#+Latex_Class: copernicus
#+AUTHOR: 
#+LaTeX_CLASS_OPTIONS: [essd, manuscript]
#+Options: toc:nil ^:t {}:t

#+PROPERTY: header-args: :comments both
#+PROPERTY: header-args:org :eval no
#+PROPERTY: header-args:PSMAP :eval no
#+PROPERTY: header-args:elisp :eval no :tangle no
#+PROPERTY: header-args:bash :eval no :noweb yes :tangle-mode (identity #o544)
#+PROPERTY: header-args:jupyter-python :eval no-export :noweb yes :kernel ice_discharge :tangle-mode (identity #o544)
#+PROPERTY: header-args: :session ice_discharge
#+PROPERTY: header-args: :display plain

#+MACRO: JAKO @@latex:Sermeq Kujalleq@@
#+EXCLUDE_TAGS: noexport

#+BEGIN_EXPORT LaTeX
\title{Greenland Ice Sheet solid ice discharge from 1986 through March 2020}
\Author[1]{Kenneth D.}{Mankoff}
\Author[1]{Anne}{Solgaard}
\Author[1]{William}{Colgan}
\Author[1]{Andreas P.}{Ahlstrøm}
\Author[2]{Shfaqat Abbas}{Khan}
\Author[1]{Robert S.}{Fausto}
\affil[1]{Department of Glaciology and Climate, Geological Survey of Denmark and Greenland (GEUS), Copenhagen, Denmark}
\affil[2]{DTU Space, National Space Institute, Department of Geodesy, Technical University of Denmark, Kgs. Lyngby, Denmark}
\runningtitle{Greenland ice sheet solid ice discharge}
\runningauthor{K. D. Mankoff \textit{et al.}}
\correspondence{Ken Mankoff (kdm@geus.dk)}

\received{}
\pubdiscuss{}
\revised{}
\accepted{}
\published{}
%% These dates will be inserted by ACPD
\firstpage{1}
\maketitle

\newcommand{\textcite}[1]{\citet{#1}}
\newcommand{\autocite}[1]{\citep{#1}}
#+END_EXPORT


#+BEGIN_abstract
We present a 1986 through last-month estimate of Greenland Ice Sheet ice discharge. Our data include all discharging ice that flows faster than 100 m yr^{-1} and are generated through an automatic and adaptable method, as opposed to conventional handpicked gates. We position gates near the present-year termini and estimate problematic bed topography (ice thickness) values where necessary. In addition to using annual time-varying ice thickness, our time series uses velocity maps that begin with sparse spatial and temporal coverage and end with near-complete spatial coverage and twelve-day updates to velocity. The 2010 through last month average ice discharge through the flux gates is ~477 \(\pm\)45 Gt yr^{-1}. The ~10 % uncertainty stems primarily from uncertain ice bed location (ice thickness). We attribute the ~50 Gt yr^{-1} differences among our results and previous studies to our use of updated bed topography from BedMachine v3. Discharge is approximately steady from 1986 to 2000, increases sharply from 2000 to 2005, and then is approximately steady again. However, regional and glacier variability exists. As part of the journal's living archive option and our goal to make an operational product, all input data, code, and results from this study will be updated as needed (when new input data are available, as new features are added, or to fix bugs) and made available at doi:10.22008/promice/data/ice_discharge citep:GEUS_discharge_paper and at http://github.com/GEUS-PROMICE/ice_discharge.
#+END_abstract

# For 2000 to present mean see LINK: id:eca400fe-cffc-4e6b-8fc1-694945093adb

* Table of Contents                               :toc_2:noexport:
- [[#about-this-document][About This Document]]
  - [[#workflow][Workflow]]
- [[#summary][Summary]]
- [[#new-in-this-version][New in this version]]
- [[#introduction][Introduction]]
- [[#input-data][Input data]]
- [[#methods][Methods]]
  - [[#terminology][Terminology]]
  - [[#gate-location][Gate location]]
  - [[#thickness][Thickness]]
  - [[#missing-or-invalid-data][Missing or invalid data]]
  - [[#discharge][Discharge]]
- [[#results][Results]]
  - [[#gates][Gates]]
  - [[#discharge-1][Discharge]]
- [[#discussion][Discussion]]
  - [[#comparison-with-past-studies][Comparison with past studies]]
- [[#data-availability][Data availability]]
- [[#conclusions][Conclusions]]
- [[#other][Other]]
- [[#references][References]]
- [[#figures][Figures]]
  - [[#overview][Overview]]
  - [[#heatmap][Heatmap]]
  - [[#ice-thickness-v-velocity-2d-histogram-color--count][Ice Thickness v. Velocity 2D Histogram: Color = count]]
  - [[#discharge-time-series][Discharge Time Series]]
  - [[#discharge-time-series-regions][Discharge Time Series: Regions]]
  - [[#discharge-time-series-top-few][Discharge Time Series: Top Few]]
- [[#appendix][Appendix]]
  - [[#errors-and-uncertainties][Errors and uncertainties]]
  - [[#velocity-versus-thickness][Velocity versus thickness]]
  - [[#køge-bugt-bed-change-between-citetbamber_2013_bed-and-citetmorlighem_2017_bedmachine][Køge Bugt bed change between citet:bamber_2013_bed and citet:morlighem_2017_bedmachine]]
  - [[#sentinel-1-ice-velocity-maps][Sentinel-1 ice velocity maps]]
  - [[#software][Software]]
- [[#code][Code]]
  - [[#misc-helper][Misc Helper]]
  - [[#import-data][Import Data]]
  - [[#find-gates][Find Gates]]
  - [[#effective-velocity][Effective Velocity]]
  - [[#export-all-data-to-csv][Export all data to CSV]]
  - [[#compute-errors][Compute Errors]]
  - [[#raw-data-to-discharge-product][Raw data to discharge product]]
  - [[#csv-to-netcdf][CSV to NetCDF]]
  - [[#figures-1][Figures]]
  - [[#auto-update][Auto update]]
  - [[#docker][Docker]]
  - [[#emacs-batch-config][Emacs batch config]]
- [[#supplementary-material][Supplementary Material]]
  - [[#errors-by-gate-sorted-by-total-d-err-err-][Errors by gate sorted by total D, err, err %]]
  - [[#annual-averages-from-observations-or-linear-interpolation][Annual averages from observations or linear interpolation]]
  - [[#køge-bugt-y2k][Køge Bugt Y2K]]
- [[#qa--qc--tests][QA / QC / tests]]
  - [[#files-used-in-this-work][Files used in this work]]
  - [[#results-1][Results]]
- [[#meta][Meta]]
- [[#latex-setup][LaTeX Setup]]

* About This Document                                   :noexport:

This document is an Emacs Org Mode plain-text file with code and text embedded. If you are viewing:

+ A DOC or PDF file, then it was generated by exporting from Org. Not all of the Org parts (code, results, comments, etc.) were exported. The Org source file is available upon request, and may be embedded in the PDF. Most non-Apple PDF viewers provide easy access to embedded or attached files.
 
+ A file with a =org= extension in something other than Emacs, then you are seeing the canonical version and the full source, but without any syntax highlighting, document structure, or the ability to execute the code blocks.

+ An =Org= file within Emacs, then this is the canonical version. You should be able to fully interact and reproduce the contents of this document, although it may require 3rd-party applications (Python, etc.) and a similar Emacs configuration. This is available upon request.

** Workflow

To recreate this work
+ See the hacking.org file

After updates, re-run make, and then...
+ Run the =workflow-update= block below
  + Cleaning all result blocks with =C-u C-c C-v k= or (org-babel-remove-result-one-or-many), then
  + Executing all blocks (without =:eval no=) using =C-c C-v C-b= or (org-babel-execute-buffer)
+ Review and commit changes
+ Re-run the =workflow-update= so that exported files have the right git commit
  + Review changes - there should be NONE
+ Push updates
  + =git push=
  + Upload data to dataverse

# WARNING: infinite recursion if not ":eval no"
#+header: :eval no
#+name: workflow-update
#+BEGIN_SRC emacs-lisp :results none :eval no :results none :exports none
(progn
  (require 'notifications)
  (toc-org-insert-toc)

  ;; remove #+results: blocks
  (org-babel-map-src-blocks nil (if (org-babel-where-is-src-block-result) 
				    (org-babel-insert-result "" '("replace"))))
  (save-buffer) ;; can now inspect "missing" results w/ git wdiff
  (org-babel-execute-buffer) ;; this make take a few whiles
  (save-buffer)
  (org-babel-tangle)
  (org-latex-export-to-latex)
  (notifications-notify
   :title "workflow-update done"
   :timeout 5000
   :transient t))
#+END_SRC



* Summary                                               :noexport:

# A short summary [...] 500-character (incl. spaces) non-technical text that may be used to promote your work to a broader audience. It should highlight your main conclusions and results, and what the implications are. If possible, please also summarize briefly why you did the research and how you did it.

We have produced an open and reproducible estimate of Greenland ice sheet solid ice discharge from 1986 through 2019. Our results show three modes at the total ice-sheet scale: Steady discharge from 1986 through 2000, increasing discharge from 2000 through 2005, steady discharge from 2005 through 2019. The behavior of individual sectors and glaciers is more complicated. This work was done to provide a 100% reproducible and operational estimate to help constrain mass balance and sea level rise estimates. 

* New in this version

The data were updated approximately every 12 days between the last published version of the paper citep:mankoff_2020_solid and the failure of one of the Sentinel satellites. Updates occur approximately monthly at the moment. Every change is versioned with unique DOIs and posted on the new GEUS data portal at doi:10.22008/promice/data/ice_discharge. The git commit for this version of the paper is \input{|"git describe --always --dirty='*'"}.

BedMachine has been updated from v3 to v4. Uncertainty has declined by ~10 % (that is, from ~10 % of total discharge to ~9 %, or from ~50 Gt yr^{-1} to ~45 Gt yr^{-1}). With the BedMachine v4 update, the southeast sector is no longer patched with citet:millan_2018 data.

The NSIDC 0646 ice velocity data citep:NSIDC_0646 have been updated from v2 to v3 with no significant changes. The early portion of the record has 1 less velocity map per month and ~1 Gt (~0.2 %) less discharge per year.

Additional metadata has been added - each gate now includes the citet:zwally_2012_data sector containing the gate (similar to the already included citet:mouginot_2019_data basins and regions). We also include the citet:moon_2008 citep:NSIDC_0642 IDs nearest the gate. Because there are more gates in this product than IDs in the citet:moon_2008 product, some gates may be assigned to citet:moon_2008 IDs far away - even in another basin. We therefore include the distance from the gate to the nearest citet:moon_2008 IDs so that users can apply a spatial cutoff if desired.

The reputability has been significantly improved. Users now only need =docker= and =make= installed - requirements for GRASS GIS, specific Python versions, and various GNU utilities are now encapsulated in Docker. 

* Introduction

The mass of the Greenland Ice Sheet is decreasing (e.g. citet:fettweis_2017_reconstructions,van-den-broeke_2017_greenland,wiese_2016_jpl,khan_2016_geodetic). Most ice sheet mass loss -- as iceberg discharge, submarine melting, and meltwater runoff -- enters the fjords and coastal seas, and therefore ice sheet mass loss directly contributes to sea-level rise citep:wcrp_2018,moon_2018_rising,nerem_2018_climate,chen_2017_increasing. Greenland's total ice loss can be estimated through a variety of independent methods, for example direct mass change estimates from GRACE citep:wiese_2016_jpl or by using satellite altimetry to estimate surface elevation change, which is then converted into mass change (using a firn model, e.g., citet:khan_2016_geodetic). However, partitioning the mass loss between ice discharge (D) and surface mass balance (SMB) remains challenging (cf. citet:rignot_2008_mass and citet:enderlin_2014_improved). Correctly assessing mass loss, as well as the attribution of this loss (SMB or D), is critical to understanding the process-level response of the Greenland Ice Sheet to climate change and thus improving models of future ice sheet changes and associated sea-level rise citep:moon_2018_rising.

The total mass of an ice sheet, or a drainage basin, changes if the mass gain (SMB inputs, primarily snowfall) is not balanced by the mass loss (D and SMB outputs, the latter generally meltwater runoff). This change is typically termed ice sheet mass balance (MB) and the formal expression for this rate of change in mass is (e.g., citet:cuffey_2010_the-physics),

#+NAME: eq:dMdt
\begin{equation}
\frac{\mathrm{d}M}{\mathrm{d}t} = \rho \int_A b \, \mathrm{d}A - \int_g Q \, \mathrm{d}g,
\end{equation}

where \(\rho\) is the average density of ice, \(b\) is an area mass balance, and \(Q\) is the discharge flux. The left-hand side of the equation is the rate of change of mass, the first term on the right-hand side is the area \(A\) integrated surface mass balance (SMB), and the second term is the discharge \(D\) mass flow rate that drains through gate \(g\). Equation [[eq:dMdt]] is often simplified to

#+NAME: eq:MB
\begin{equation}
MB = SMB - D
\end{equation}

where \(MB\) is the mass balance, and referred to as the "input--output" method (e.g., citet:khan_2015_greenland). Virtually all studies agree on the trend of Greenland mass balance, but large discrepancies persist in both the magnitude and attribution. Magnitude discrepancies include, for example, citet:kjeldsen_2015_spatial reporting a mass imbalance of -250 \(\pm\) 21 Gt yr^{-1} during 2003 to 2010, citet:ewert_2012_volume reporting -181 \(\pm\) 28 Gt yr^{-1} during 2003 to 2008, and citet:rignot_2008_mass reporting a mass imbalance of -265 \(\pm\) 19 Gt yr^{-1} during 2004 to 2008. Some of these differences may be due to different ice sheet area masks used in the studies. Attribution discrepancies include, for example, citet:enderlin_2014_improved attributing the majority (64 %) of mass loss to changes in SMB during the 2005 to 2009 period but citet:rignot_2008_mass attributing the majority (85 %) of mass loss to changes in D during the 2004 to 2008 period.

# Rignot 2008: TMB (2004-2007) = (231+293+265+267)/4 = 264 Gt yr-1  # Table 1
# Enderlin 2014: TMB (2005-2009) = 265 \pm 18 Gt yr-1 # text in Section 3
# Kjeldsen 2015: TMB (2003-2010) = 186 \pm 18.9 Gt yr-1 # Table 1

#+BEGIN_SRC jupyter-python :session tmp :exports none :results raw drawer
from uncertainties import unumpy
import numpy as np
np.mean(unumpy.uarray([231,293,265,267], [40,39,39,38]))
#+END_SRC

# error %
# Rignot: 19.5/264*100 = 7.38636363636
# Enderlin: 18/265*100 = 6.79245283019
# Kjeldsen: 19/186*100 = 10.2150537634

# When ice-sheet wide MB does agree between two independent studies, there may be spatially and/or temporally compensating errors underlying this outward agreement. Spatial discrepancies include, for example, citet:enderlin_2014_improved and citet:king_2018_seasonal. Temporal discrepancies include, for example, ???. A substantial portion of underlying spatial and temporal discrepancies may be associated with sampling bias. Underlying sampling discrepancy includes, for example, demonstrating agreement between satellite gravimetry derived mass loss estimates that sample Greenland peripheral glaciers and an input-output assessment that does not sample these disproportionately high mass loss glaciers citep:xu_2016_improved,noel_2017_greenland.


Discharge may be calculated through several methods, including mass flow rate through gates (e.g. citet:enderlin_2014_improved,king_2018_seasonal,mouginot_2019_forty), or solving as a residual from independent mass balance terms (e.g. citet:kjaer_2012_aerial,kjeldsen_2015_spatial). The gate method that we use in this study incorporates ice thickness and an estimated vertical profile from the observed surface velocity to calculate the discharge. A typical formulation of discharge across a gate \(D_g\) is,

#+NAME: eq:Q
\begin{equation}
D_g = \rho \, V \, H \, w,
\end{equation}

where \(\rho\) is the average density of ice, \(V\) is depth-average gate-perpendicular velocity, \(H\) is the ice thickness, and \(w\) is the gate width. Uncertainties in \(V\) and \(H\) naturally influence the estimated discharge. At fast-flowing outlet glaciers, \(V\) is typically assumed to be equal at all ice depths, and observed surface velocities can be directly translated into depth-averaged velocities (as in citet:enderlin_2014_improved,king_2018_seasonal). To minimize uncertainty from SMB or basal mass balance corrections downstream of a flux gate, the gate should be at the grounding line of the outlet glacier. Unfortunately, uncertainty in bed elevation (translating to ice thickness uncertainty) increases toward the grounding line.

Conventional methods of gate selection involve handpicking gate locations, generally as linear features (e.g., citet:enderlin_2014_improved) or visually approximating ice-orthogonal gates at one point in time (e.g., citet:king_2018_seasonal). Manual gate definition is suboptimal. For example, the largest discharging glaciers draw from an upstream radially diffusing region that may not easily be represented by a single linear gate. Approximately flow-orthogonal curved gates may not be flow orthogonal on the multidecade timescale due to changing flow directions. Manual gate selection makes it difficult to update gate locations, corresponding with glacier termini retreat or advance, in a systematic and reproducible fashion. We therefore adopt an algorithmic approach to generate gates based on a range of criteria.

Here, we present a discharge dataset based on gates selected in a reproducible fashion by a new algorithm. Relative to previous studies, we employ ice velocity observation over a longer period with higher temporal frequency and denser spatial coverage. We use ice velocity from 1986 through 2019 including twelve-day velocities for the last ~500 days of the time series, and discharge at 200 m pixel resolution capturing all ice flowing faster than 100 m yr^{-1} that crosses glacier termini into fjords.

* Input data

Historically, discharge gates were selected along well-constrained flight lines of airborne radar data citep:enderlin_2014_improved. Recent advances in ice thickness estimates through NASA Operation IceBridge citep:millan_2018_vulnerability, NASA Oceans Melting Greenland (OMG; citet:fenty_2016_oceans), fjord bathymetry citep:tinto_2015_bathymetry, and methods to estimate thickness from surface properties (e.g., citet:mcnabb_2012_using,james_2016_automated) have been combined into digital bed elevation models such as BedMachine citep:morlighem_2017_bedmachine,NSIDC_BedMachine or released as independent datasets citep:millan_2018_vulnerability. From these advances, digital bed elevation models have become more robust at tidewater glacier termini and grounding lines. The incorporation of flight-line ice thickness data into higher-level products that include additional methods and data means gates are no longer limited to flight lines (e.g., citet:king_2018_seasonal).

Ice velocity data are available with increasing spatial and temporal resolution (e.g., citet:vijay_2019_resolving). Until recently, ice velocity mosaics were limited to once per year during winter citep:joughin_2010_greenland, and they are still temporally limited, often to annual resolution, prior to 2000 (e.g. citet:mouginot_2018_1972to1990,mouginot_2018_1991to2000). Focusing on recent times, ice-sheet-wide velocity mosaics from the Sentinel-1A & 1B are now available every twelve days (http://PROMICE.org). The increased availability of satellite data has improved ice velocity maps both spatially and temporally, thereby decreasing the need to rely on spatial and temporal interpolation of velocities from annual/winter mosaics citep:andersen_2015_basin-scale,king_2018_seasonal,mouginot_2019_forty.

The discharge gates in this study are generated using only surface speed and an ice mask. We use the MEaSUREs Greenland Ice Sheet Velocity Map from InSAR Data, Version 2 citep:joughin_2010_greenland,NSIDC_0478, hereafter termed "MEaSUREs 0478" due to the National Snow and Ice Data Center (NSIDC) dateset ID number. We use the BedMachine v4 citep:morlighem_2017_bedmachine,NSIDC_BedMachine ice mask.

For ice thickness estimates, we use surface elevation from GIMP (citet:howat_2014_greenland,NSIDC_0715; NSIDC dataset ID 0715), adjusted through time with surface elevation change from citet:khan_2016_geodetic and bed elevations from BedMachine v4. Ice sector and region delineation is from citet:mouginot_2019_glacier. Ice velocity data are obtained from a variety of products including Sentinel-1A & 1B derived by PROMICE (see Appendix), MEaSUREs 0478, MEaSUREs 0646 citep:NSIDC_0646, citet:mouginot_2018_1972to1990, and citet:mouginot_2018_1991to2000. Official glacier names come from citet:bjork_2015_brief. Other glacier names come from citet:mouginot_2019_glacier. See Table [[tab:data]] for an overview of datasets used in this work.

#+BEGIN_SRC bash :results verbatim :eval no-export
echo "times  all: " $(head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep "vel_eff" | wc -l)
echo "times 19XX: " $(head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep "vel_eff_19" | wc -l)
echo "times 20XX: " $(head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep "vel_eff_20" |wc -l)
for Y in $(seq 2000 2025); do 
  echo "times ${Y}: " $(head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep "vel_eff_${Y}" |wc -l)
done
#+END_SRC

#+RESULTS:
#+begin_example
times  all:  3230
times 19XX:  108
times 20XX:  3122
times 2000:  12
times 2001:  9
times 2002:  10
times 2003:  9
times 2004:  8
times 2005:  9
times 2006:  10
times 2007:  9
times 2008:  16
times 2009:  118
times 2010:  103
times 2011:  116
times 2012:  171
times 2013:  189
times 2014:  200
times 2015:  256
times 2016:  292
times 2017:  290
times 2018:  257
times 2019:  254
times 2020:  254
times 2021:  244
times 2022:  230
times 2023:  56
times 2024:  0
times 2025:  0
#+end_example

This work uses src_bash[:eval yes]{head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep "vel_eff" | wc -l} {{{results(=3230=)}}} different velocity maps, biased toward post-2015 when twelve-day ice velocities become available from the Sentinel-1 satellites. The temporal distribution is ~10 maps per year from 1986 to 2013, 14 in 2014, 25 in 2015, 38 in 2016, 81 in 2017, 54 in 2018, and one every ~12 days from 2019 onward.

#+LATEX_ATTR: :placement [!h]
#+CAPTION: Summary of data sources used in this work.
#+NAME: tab:data
| Property                 | Name used in this paper  | Reference                                                      |
|--------------------------+--------------------------+----------------------------------------------------------------|
| Basal topography         | BedMachine v4            | citet:morlighem_2017_bedmachine,NSIDC_BedMachine               |
| Surface elevation        | GIMP 0715                | citet:howat_2014_greenland,NSIDC_0715                          |
| Surface elevation Change | Surface elevation change | citet:khan_2016_geodetic,GEUS_discharge_paper_elevation_change |
| Baseline velocity        | MEaSUREs 0478            | citet:NSIDC_0478                                               |
| Velocity                 | Sentinel                 | Appendix                                                       |
| Velocity                 | MEaSUREs 0646            | citet:NSIDC_0646                                               |
| Velocity                 | MEaSUREs 0731            | citet:NSIDC_0731,joughin_2010_greenland,joughin_2018_greenland |
| Velocity                 | pre-2000                 | citet:mouginot_2018_1972to1990,mouginot_2018_1991to2000        |
| Sectors and regions      | Sectors and regions      | citet:mouginot_2019_glacier                                    |
| Names                    |                          | citet:bjork_2015_brief,mouginot_2019_glacier                   |
| Additional metadata      |                          | citet:Moon_2008,NSIDC_0642,Zwally_2012                         |

* Methods
** Terminology 

We use the following terminology, displayed in Fig. [[fig:overview]]: 
+ "Pixels" are individual 200 m x 200 m raster discharge grid cells. We use the nearest neighbor when combining datasets that have different grid properties.
+ "Gates" are contiguous (including diagonal) clusters of pixels.
+ "Sectors" are spatial areas that have 0, 1, or > 1 gate(s) plus any upstream source of ice that flows through the gate(s), and come from citet:mouginot_2019_glacier.
+ "Regions" are groups of sectors, also from citet:mouginot_2019_glacier, and are labeled by approximate geographic region.
+ The "baseline" period is the average 2015, 2016, and 2017 winter velocity from MEaSUREs 0478.
+ "Coverage" is the percentage of total, region, sector, or gate discharge observed at any given time. By definition coverage is 100 % during the baseline period. From the baseline data, the contribution to total discharge of each pixel is calculated, and coverage is reported for all other maps that have missing observations (Fig. [[fig:coverage_schematic]]). Total estimated discharge is always reported because missing pixels are gap filled (see "Missing or invalid data" section below).
+ "Fast-flowing ice" is defined as ice that flows more than 100 m yr^{-1}.
+ Names are reported using the official Greenlandic names from citet:bjork_2015_brief; if an alternate name exists (e.g. from citet:mouginot_2019_glacier, or an English version), then this is shown in parentheses.

Although we refer to solid ice discharge, and it is in the solid phase when it passes the gates and eventually reaches the termini, submarine melting occurs at the termini and some of the discharge enters the fjord as liquid water citep:enderlin_2013_submarine.

** Gate location

Gates are algorithmically generated for fast-flowing ice (greater than 100 m yr^{-1}) close to the ice sheet terminus determined by the baseline-period data. We apply a 2D inclusive mask to the baseline data for all ice flowing faster than 100 m yr^{-1}. We then select the mask edge where it is near the BedMachine ice mask (not including ice shelves), which effectively provides grounding line termini. We buffer the termini 5000 m in all directions creating ovals around the termini and once again down-select to fast-flowing ice pixels. This procedure results in gates 5000 m upstream from the baseline terminus that bisect the baseline fast-flowing ice. We manually mask some land- or lake-terminating glaciers which are initially selected by the algorithm due to fast flow and mask issues. 

We select a 100 m yr^{-1} speed cutoff because slower ice, taking longer to reach the terminus, is more influenced by SMB. For the influence of this threshold on our results see the Discussion section and Fig. [[fig:heatmap]]. 

We select gates at 5000 m upstream from the baseline termini except at Sermeq Kujalleq (Jakobshavn Isbræ), which means that gates are likely > 5000 m from the termini further back in the historical record citep:murray_2015_extensive,wood_2018_ocean-induced. The choice of a 5000 m buffer follows from the fact that it is near terminus and thus avoids the need for (minor) SMB corrections downstream, yet is not too close to the terminus where discharge results are sensitive to the choice of distance-to-terminus value (Fig. [[fig:heatmap]]), which may be indicative of bed (ice thickness) errors. At Sermeq Kujalleq the termini has retreated ~5 km, so we move the baseline termini inland so that the final gate location is still a few km upstream of the present-day termini.

** Thickness

We derive thickness from surface and bed elevation. We use GIMP 0715 surface elevations in all locations, and the BedMachine bed elevations. The GIMP 0715 surface elevations are all time stamped per pixel. We adjust the surface through time by linearly interpolating elevation changes from citet:khan_2016_geodetic, which covers the period from 1995 to 2016. We use the average of the first and last 3 years for earlier and later times, respectively. Finally, from the fixed bed and temporally varying surface, we calculate the time-dependent ice thickness at each gate pixel.

** Missing or invalid data

The baseline data provide velocity at all gate locations by definition, but individual nonbaseline velocity maps often have missing or invalid data. Also, thickness provided by BedMachine is clearly incorrect in some places (e.g. fast-flowing ice that is 10 m thick, Fig. [[fig:h_v_histogram]]). We define invalid data and fill in missing data as described below.

*** Invalid velocity

We flag invalid (outlier) velocities by treating each pixel as an individual time series, applying a 30-point rolling window, flagging values more than 2 standard deviations outside the mean, and repeating this filter three times. We also drop the 1972 to 1985 years from citet:mouginot_2018_1972to1990 because there is low coverage and extremely high variability when using our algorithm.

This outlier detection method appears to correctly flag outliers (see citet:mankoff_2019_ice, for unfiltered time series graphs) but likely also flags some true short-term velocity increases. The effect of this filter is a ~1% reduction in discharge most years but more in years with high discharge -- a reduction of 3.2 % in 2013, 4.3 % in 2003, and more in the 1980s when the data are noisy. Any analysis using these data and focusing on individual glaciers or short-term changes (or lack thereof) should reevaluate the upstream data sources.

*** Missing velocity
:PROPERTIES:
:CUSTOM_ID: sec:missing_velocity
:END:

We generate an ice speed time series by assigning the PROMICE, MEaSUREs 0478, MEaSUREs 0646, and pre-2000 products to their respective reported time stamps (even though these are time-span products) or to the middle of their time span when they cover a long period such as the annual maps from citet:mouginot_2018_1972to1990,mouginot_2018_1991to2000. We ignore that any individual velocity map or pixel has a time span and not a time stamp. Velocities are sampled only where there are gate pixels. Missing pixel velocities are linearly interpolated in time, except for missing data at the beginning of the time series which are back- and forward filled with the temporally nearest value for that pixel (Fig. [[fig:coverage_schematic]]). We do not spatially interpolate missing velocities because the spatial changes around a missing data point are most likely larger than the temporal changes. We visually represent the discharge contribution of directly observed pixels, termed coverage (Fig. [[fig:coverage_schematic]]) as time series graphs and opacity of dots and error bars in the figures. The figures only display data where coverage is \(\ge\) 50 %, but the provided data files include coverage from 0 to 100 %. Therefore, the gap-filled discharge contribution at any given time is equal to 100 minus the coverage. Discharge is always reported as estimated total discharge even when coverage is less than 100 %.

*** Invalid thickness
:PROPERTIES:
:CUSTOM_ID: sec:invalid_thickness
:END:

The thickness data appear to be incorrect in some locations. For example, many locations have fast-flowing ice but report ice thickness as 10 m or less (Fig. [[fig:h_v_histogram]], left panel). We accept all ice thickness greater than 20 m and construct from this a thickness vs. log_{10}-speed relationship. For all ice thickness less than or equal to 20 m thick we adjust thickness based on this relationship (Fig. [[fig:h_v_histogram]], right panel). We selected the 20 m thickness cutoff after visually inspecting the velocity distribution (Fig. [[fig:h_v_histogram]], left panel). This thickness adjustment adds 20 Gt yr^{-1} to our baseline-period discharge estimate with no adjustment. In the Appendix and Table [[tab:thick_treatments]] we discuss the discharge contribution of these adjusted pixels, and a comparison among this and other thickness adjustments.


** Discharge

We calculate discharge per pixel using density (917 kg m^{-3}), filtered and filled ice speed, projection-corrected pixel width, and adjusted ice thickness derived from time-varying surface elevation and a fixed bed elevation (Eq. [[eq:Q]]). We assume that any change in surface elevation corresponds to a change in ice thickness and thereby neglect basal uplift, erosion, and melt, which combined are orders of magnitude less than surface melting (e.g., citet:cowton_2012_rapid,khan_2007_elastic). We also assume depth-averaged ice velocity is equal to the surface velocity.

We calculate discharge using the gate orthogonal velocity at each pixel and at each timestamp -- all velocity estimates are gate-orthogonal at all times, regardless of gate position, orientation, or changing glacier velocity direction over time.

Annual averages are calculated by linearly interpolating to daily and then estimating annual. The difference between this method and averaging only the observed samples is ~3 % median (5 % average, and a maximum of 10 % when examining the entire ice sheet and all years in our data). It is occasionally larger at individual glaciers when a year has few widely spaced samples of highly variable velocity.

*** Discharge uncertainty
\label{sec:D_uncertainty}

A longer discussion related to our and others treatments of errors and uncertainty is in the Appendix, but here we describe how we estimate the uncertainty related to the ice discharge following a simplistic approach. This yields an uncertainty of the total ice discharge of approximately 10 % throughout the time series. 

At each pixel we estimate the maximum discharge, \(D_{\mathrm{max}}\), from 

#+NAME: eq:D_err_max
\begin{equation}
D_{\mathrm{max}} = \rho \, (V + \sigma_V) \, (H + \sigma_H) \, W,
\end{equation}

and minimum discharge, \(D_{\mathrm{min}}\), from

#+NAME: eq:D_err_min
\begin{equation}
D_{\mathrm{min}} = \rho \, (V - \sigma_V) \, (H - \sigma_H) \, W,
\end{equation}

where \(\rho\) is ice density, \(V\) is baseline velocity, \(\sigma_V\) is baseline velocity error, \(H\) is ice thickness, \(\sigma_H\) is ice thickness error, and \(W\) is the width at each pixel. Included in the thickness term is surface elevation change through time (\(\mathrm{d}H/\mathrm{d}t\)). When datasets do not come with error estimates we treat the error as 0.

We use \(\rho = 917\) kg m^{-3} because the gates are near the terminus in the ablation zone, and ice thickness estimates should not include snow or firn, although regionally ice density may be < 917 kg m^{-3} due to crevasses. We ignore the velocity error \(\sigma_V\) because the proportional thickness error (\(\sigma_H/H\)) is an order of magnitude larger than the proportional velocity error (\(\sigma_V/V\)) yet both contribute linearly to the discharge. \(W\) is location dependent due to the errors between our working map projection (EPSG 3413) and a more accurate spheroid model of the earth surface. We adjust linear gate width by up to ~4% in the north and ~-2.5% in the south of Greenland (area errors are up to 8%). On a pixel-by-pixel basis we used the provided thickness uncertainty except where we modified the thickness (H < 20 m); we prescribe an uncertainty of 0.5 times the adjusted thickness. Subsequently, the uncertainty on individual glacier, sector, region, or ice sheet scale is obtained by summing, but not reducing by the square of the sums, the uncertainty related to each pixel. We are conservative with our thickness error estimates, by assuming the uncertainty range is from \(D_{\mathrm{min}}\) to \(D_{\mathrm{max}}\) and not reducing by the sum of squares of sectors or regions. 

* Results
** Gates

#+BEGIN_SRC bash :results verbatim :exports none :eval no-export
echo "pixels: " $(tail -n +2 tmp/dat_100_5000.csv | wc -l)
echo "gates: " $(cut -d"|" -f3 ./tmp/dat/gates_gateID@gates_vel_buf.bsv | tail -n +2 | sort | uniq | wc -l)
echo "sectors: " $(cut -d"|" -f3 ./tmp/dat/sectors@Mouginot_2019.bsv | tail -n +2 | sort -n | uniq | wc -l)
echo "times: " $(head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep "vel_eff" | wc -l)
#+END_SRC

#+RESULTS:
: pixels:  5865
: gates:  267
: sectors:  173
: times:  3230

Our gate placement algorithm generates src_bash[:eval yes]{tail -n +2 tmp/dat_100_5000.csv | wc -l} {{{results(=5865=)}}} pixels making up src_bash[:eval yes]{cut -d"|" -f3 ./tmp/dat/gates_gateID@gates_100_5000.bsv | tail -n +2 | sort | uniq | wc -l} {{{results(=0=)}}} gates, assigned to src_bash[:eval yes]{cut -d"|" -f3 ./tmp/dat/sectors@Mouginot_2019.bsv | tail -n +2 | sort -n | uniq | wc -l} {{{results(=173=)}}} ice sheet sectors from citet:mouginot_2019_glacier. Previous similar studies have used 260 gates citep:mouginot_2019_forty, 230 gates citep:king_2018_seasonal, and 178 gates citep:enderlin_2014_improved.

The widest gate (~47 km) is Sermersuaq (Humboldt Gletsjer) and both Ikertivaq and Sermeq Kujalleq (Jakobshavn Isbræ) are ~34 km wide. A total of 14 glaciers have gate lengths longer than 10 km. The minimum gate width is 3 pixels (600 m) by definition in the algorithm. 

# See LINK: [[id:62f5d28c-c704-422d-9e9b-c0771d5b86ee][Table of thickness adjustments]]

The average unadjusted thickness gates is 399 m with a standard deviation of 253. The average thickness after adjustment is 429 m with a standard deviation of 223. A histogram of unadjusted and adjusted thickness at all gate locations is shown in Fig. [[fig:h_v_histogram]].

** Discharge
:PROPERTIES:
:CUSTOM_ID: sec:results_flow_rate
:END:

#+BEGIN_SRC jupyter-python :session D_val_text :exports none :results raw drawer :eval no-export
import pandas as pd

t = pd.read_csv('./out/GIS_D.csv', index_col=0, parse_dates=True)\
      .resample('AS')\
      .mean()
t_err = pd.read_csv('./out/GIS_err.csv', index_col=0, parse_dates=True)\
          .resample('AS')\
          .mean()
t = t.merge(t_err, left_index=True, right_index=True)\
     .rename({'Discharge [Gt yr-1]' : 'D',
              'Discharge Error [Gt yr-1]' : 'err'}, axis='columns')

print("Initial:\n", t.loc['1986-01-01'])
print("\nMinimum\n", t.loc[t['D'].idxmin().strftime('%Y-%m-%d')])
print("\nY2K\n", t.loc['2000-01-01'])
print("\n2005\n", t.loc['2005-01-01'])

t[t.index.year > 2005]
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
Initial:
 D      451.333571
err     42.192857
Name: 1986-01-01 00:00:00, dtype: float64

Minimum
 D      427.602500
err     39.111375
Name: 1995-01-01 00:00:00, dtype: float64

Y2K
 D      436.74975
err     39.26875
Name: 2000-01-01 00:00:00, dtype: float64

2005
 D      481.440667
err     43.364889
Name: 2005-01-01 00:00:00, dtype: float64
#+end_example
#+begin_export html
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>D</th>
      <th>err</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2006-01-01</th>
      <td>473.318000</td>
      <td>42.879000</td>
    </tr>
    <tr>
      <th>2007-01-01</th>
      <td>467.606000</td>
      <td>42.603667</td>
    </tr>
    <tr>
      <th>2008-01-01</th>
      <td>474.021800</td>
      <td>43.371133</td>
    </tr>
    <tr>
      <th>2009-01-01</th>
      <td>477.455140</td>
      <td>44.100123</td>
    </tr>
    <tr>
      <th>2010-01-01</th>
      <td>481.589118</td>
      <td>44.351225</td>
    </tr>
    <tr>
      <th>2011-01-01</th>
      <td>487.247062</td>
      <td>45.082894</td>
    </tr>
    <tr>
      <th>2012-01-01</th>
      <td>484.692217</td>
      <td>45.045319</td>
    </tr>
    <tr>
      <th>2013-01-01</th>
      <td>493.267596</td>
      <td>45.942585</td>
    </tr>
    <tr>
      <th>2014-01-01</th>
      <td>492.537368</td>
      <td>46.075218</td>
    </tr>
    <tr>
      <th>2015-01-01</th>
      <td>494.864302</td>
      <td>46.241978</td>
    </tr>
    <tr>
      <th>2016-01-01</th>
      <td>485.886684</td>
      <td>45.526039</td>
    </tr>
    <tr>
      <th>2017-01-01</th>
      <td>497.332472</td>
      <td>46.631374</td>
    </tr>
    <tr>
      <th>2018-01-01</th>
      <td>496.769102</td>
      <td>46.685527</td>
    </tr>
    <tr>
      <th>2019-01-01</th>
      <td>502.399554</td>
      <td>47.236974</td>
    </tr>
    <tr>
      <th>2020-01-01</th>
      <td>514.965330</td>
      <td>48.298712</td>
    </tr>
    <tr>
      <th>2021-01-01</th>
      <td>518.639242</td>
      <td>48.624907</td>
    </tr>
    <tr>
      <th>2022-01-01</th>
      <td>515.802703</td>
      <td>48.269588</td>
    </tr>
    <tr>
      <th>2023-01-01</th>
      <td>502.132722</td>
      <td>46.819222</td>
    </tr>
  </tbody>
</table>
</div>
#+end_export
:END:


Our ice discharge dataset (Fig. [[fig:discharge_ts]]) reports a total discharge of 450 \(\pm\) 43 Gt in 1986, has a minimum of 419 \(\pm\) 39 Gt in 1996, and increases to 433 \(\pm\) 40 in 2000 and further to 488 \(\pm\) 45 Gt/yr in 2005, after which annual discharge remains approximately steady at 472 to 491 \(\pm\) ~45 Gt/yr during the 2005 through 2020 period.

#+BEGIN_SRC jupyter-python :session D_val_text :exports none :results raw drawer :eval no-export
import pandas as pd

r = pd.read_csv('./out/region_D.csv', index_col=0, parse_dates=True)\
      .resample('AS')\
      .mean()
r_err = pd.read_csv('./out/region_err.csv', index_col=0, parse_dates=True)\
          .resample('AS')\
          .mean()
# t = t.merge(t_err, left_index=True, right_index=True)\
#      .rename({'Discharge [Gt yr-1]' : 'D',
#               'Discharge Error [Gt yr-1]' : 'err'}, axis='columns')

print("SE range: ", r['SE'].min(), r['SE'].max(), r_err['SE'].min(), r_err['SE'].max())
print("SE %: ", r['SE'].mean() / r.sum(axis='columns').mean()*100)
print("NE,NO,NW %:",r[['NE','NO','NW']].sum(axis='columns').mean()/r.sum(axis='columns').mean()*100)
print("\nNW increase\n:", r.loc['1999-01-01':,'NW'])
print("\nSE max and last:", r['SE'].max(), '\n', r['SE'].iloc[-10:].describe())
#+END_SRC

#+RESULTS:
#+begin_example
SE range:  124.73322672211614 152.16356746480093 12.741238095760728 16.575369162978905
SE %:  29.649568914720653
NE,NO,NW %: 32.62058436148845

NW increase
: Date
1999-01-01     91.620024
2000-01-01     91.793270
2001-01-01     90.213475
2002-01-01     91.736174
2003-01-01     94.356057
2004-01-01     98.025738
2005-01-01     98.776836
2006-01-01     96.801529
2007-01-01     96.880708
2008-01-01     99.331709
2009-01-01    101.805364
2010-01-01    102.702630
2011-01-01    106.417633
2012-01-01    105.129677
2013-01-01    109.163402
2014-01-01    111.407470
2015-01-01    111.005718
2016-01-01    113.303207
2017-01-01    116.022516
2018-01-01    116.360810
2019-01-01    111.306665
2020-01-01    111.425655
2021-01-01    113.225821
2022-01-01    116.448423
2023-01-01    115.689001
Freq: AS-JAN, Name: NW, dtype: float64

SE max and last: 152.16356746480093 
 count     10.000000
mean     144.739725
std        5.988034
min      134.857358
25%      141.057452
50%      144.069866
75%      150.266705
max      152.163567
Name: SE, dtype: float64
#+end_example

At the region scale, the SE glaciers (see Fig. [[fig:overview]] for regions) are responsible for 128 to 154 (\(\pm\) 13 %) Gt yr^{-1} of discharge (approximately one-third of ice-sheet-wide discharge) over the 1986 through 2019 period. By comparison, the predominantly land-terminating NO, NE, and SW together were also responsible for about one-third of total ice sheet discharge during this time (Fig. [[fig:discharge_ts_regions]]). The discharge from most regions has been approximately steady for the past decade. The NW region exhibited a persistent long-term increase in discharge -- from ~90 to 114 Gt yr^{-1} (27 % increase) over the 1999 through 2017 period, but has become more variable with declines and increases from 2017 through 2021. Increased variability also appears in the CW and CE regions beginning in 2016.

# 100 - 90/115*100 = 21.7391304348
# (115-90+1)/(2017-1999+1) = 1.36842105263
# (22/(2017-1999+1)) = 1.15789473684

#+BEGIN_SRC jupyter-python :session D_val_text :exports none :results raw drawer :eval no-export
import pandas as pd

s = pd.read_csv('./out/sector_D.csv', index_col=0, parse_dates=True)\
      .resample('AS')\
      .mean()
s_err = pd.read_csv('./out/sector_err.csv', index_col=0, parse_dates=True)\
          .resample('AS')\
          .mean()

print(s['JAKOBSHAVN_ISBRAE'].idxmax())
print(s.loc['2013-01-01', 'JAKOBSHAVN_ISBRAE'], s_err.loc['2013-01-01', 'JAKOBSHAVN_ISBRAE'])
print(s.loc['2013-01-01':, 'JAKOBSHAVN_ISBRAE'].idxmin())
print(s.loc['2018-01-01', 'JAKOBSHAVN_ISBRAE'], s_err.loc['2013-01-01', 'JAKOBSHAVN_ISBRAE'])
print(s.loc['2013-01-01':, 'JAKOBSHAVN_ISBRAE'])
#+END_SRC

#+RESULTS:
#+begin_example
2013-01-01 00:00:00
52.287053607327515 4.8754132696099335
2018-01-01 00:00:00
36.2345921605291 4.8754132696099335
Date
2013-01-01    52.287054
2014-01-01    50.616675
2015-01-01    49.729753
2016-01-01    46.700591
2017-01-01    39.330943
2018-01-01    36.234592
2019-01-01    39.313432
2020-01-01    42.554549
2021-01-01    48.253045
2022-01-01    42.241685
2023-01-01    40.120191
Freq: AS-JAN, Name: JAKOBSHAVN_ISBRAE, dtype: float64
#+end_example

Focusing on eight major contributors at the individual sector or glacier scale (Fig. [[fig:discharge_ts_topfew]]), Sermeq Kujalleq (Jakobshavn Isbræ) has slowed down from an annual average high of ~50 Gt yr^{-1} in 2013 to ~30 Gt yr^{-1} in 2018, likely due to ocean cooling citep:khazendar_2019_interruption, but in 2021 returned briefly to nearly 50 Gt yr^{-1}. The Sermeq Kujalleq increasing trend and regular annual cycle has become disrupted in ~2015 with large decreases and shifting of the normal summer velocity maximum. Helheim briefly contributed more to sea level rise than Jakobshavn Isbræ in 2019, but has returned to 2nd place in 2020 and 2021 as Jakobshavn Isbræ speeds back up (Fig. [[fig:discharge_ts_topfew]]). We exclude Ikertivaq from the top eight because that gate spans multiple sectors and outlets, while the other top dischargers are each a single outlet. 

* Discussion

Different ice discharge estimates among studies likely stem from three categories: 1) changes in true discharge, 2) different input data (ice thickness and velocity), and 3) different assumptions and methods used to analyze data. Improved estimates of true discharge are the goal of this and many other studies, but changes in true discharge (category 1) can happen only when a work extends a time series into the future because historical discharge is fixed. Thus, any interstudy discrepancies in historical discharge must be due to category 2 (different data) or category 3 (different methods). Most studies use both updated data and new or different methods, but do not always provide sufficient information to disentangle the two. This is inefficient. To more quantitatively discuss interstudy discrepancies, it is imperative to explicitly consider all three potential causes of discrepancy. Only when results are fully reproducible -- meaning all necessary data and code are available (cf. citet:mankoff_2017_past,rezvanbehbahani_2017_predicting,mankoff_2019_ice) -- can new works confidently attribute discrepancies relative to old works. Therefore, in addition to providing new discharge estimates, we attempt to examine discrepancies among our estimates and other recent estimates. Without access to code and data from previous studies, it is challenging to take this examination beyond a qualitative discussion.

The algorithm-generated gates we present offer some advantages over traditional handpicked gates. Our gates are shared publicly, are generated by code that can be audited by others, and are easily adjustable within the algorithmic parameter space. This both allows sensitivity testing of gate location (Fig. [[fig:heatmap]]) and allows gate positions to systematically evolve with glacier termini (not done here).

** Comparison with past studies                           :ignore:

The total ice discharge we estimate is ~10 % less than the total discharge of two previous estimates citep:mouginot_2019_forty,enderlin_2014_improved, and similar to that of citet:king_2018_seasonal, who attributes their discrepancy with citet:enderlin_2014_improved to the latter using only summer velocities, which have higher annual average values than seasonally comprehensive velocity products. The gate locations also differ among studies, and glaciers with baseline velocity less than 100 m yr^{-1} are not included in our study due to our velocity cutoff threshold, but this should not lead to substantially different discharge estimates (Fig. [[fig:heatmap]]).

Our gate selection algorithm also does not place gates in northeast Greenland at Storstrømmen, Bredebræ (Bredebrae), or their confluence, because during the baseline period that surge glacier was in a slow phase. We do not manually add gates at these glaciers. The last surge ended in 1984 citep:reeh_1994_surge,mouginot_2018_insights, prior to the beginning of our time series, and these glaciers are therefore not likely to contribute substantial discharge even in the early period of discharge estimates.

We instead attribute the majority of our discrepancy with citet:enderlin_2014_improved to the use of differing bed topography in southeast Greenland. When we compare our top 10 highest discharging glaciers in 2000 with those reported by citet:enderlin_2014_improved, we find that the Køge Bugt (also knows as Køge Bay) discharge reported by citet:enderlin_2014_improved is ~31 Gt, but our estimate is only ~16 Gt (~17 Gt in citet:king_2018_seasonal, and similar in citet:mouginot_2019_forty). The citet:bamber_2013_bed bed elevation dataset that likely uses the same bed data employed by citet:enderlin_2014_improved has a major depression in the central Køge Bugt bed. This region of enhanced ice thicknesses is not present in the BedMachine dataset that we, citet:king_2018_seasonal, and citet:mouginot_2019_forty employ (Fig. [[fig:koge_bugt_bamber]]). If the Køge Bugt gates of citet:enderlin_2014_improved are in this location, then those gates overlie citet:bamber_2013_bed ice thicknesses that are about twice those reported in BedMachine v4. With all other values held constant, this results in roughly twice the discharge. Although we do not know whether BedMachine or citet:bamber_2013_bed is more correct, conservation of mass suggests that a substantial subglacial depression should be evident as either depressed surface elevation or velocity citep:morlighem_2016_improving.

We are unable to attribute the remaining discrepancy between our discharge estimates and those by citet:enderlin_2014_improved. It is likely a combination of different seasonal velocity sampling citep:king_2018_seasonal, our evolving surface elevation from citet:khan_2016_geodetic, or other previously unpublished algorithmic or data differences, of which many possibilities exist.

Our ice discharge estimates agree well with the most recently published discharge estimate (citet:king_2018_seasonal, also used by citet:bamber_2018_landice), except that our discharge is slightly less. We note that our uncertainty estimates include the citet:king_2018_seasonal estimates, but the opposite does not appear be true. The minor differences are likely due to different methods. citet:king_2018_seasonal use seasonally varying ice thicknesses, derived from seasonally varying surface elevations, and a Monte Carlo method to temporally interpolate missing velocity data to produce discharge estimates. In comparison, we use linear interpolation of both yearly surface elevation estimates and temporal data gaps. It is not clear whether linear or higher-order statistical approaches are best suited for interpolation as annual cycles begin to shift, as is the case with Sermeq Kujalleq (Jakobshavn Isbræ) after 2015. There are benefits and deficiencies with both methods. Linear interpolation may alias large changes if there are no other observations nearby in time. Statistical models of past glacier behavior may not be appropriate when glacier behavior changes.

It is unlikely that discharge estimates using gates that are only approximately flow orthogonal and time invariant citep:king_2018_seasonal have large errors due to this, because it is unlikely that glacier flow direction changes significantly, but our gate-orthogonal treatment may be the cause of some differences among our approach and other works. Discharge calculated using nonorthogonal methodology would overestimate true discharge.

* Data availability

This work in its entirety is available at doi:10.22008/promice/data/ice_discharge citep:GEUS_discharge_paper. The glacier-scale, sector, region, and Greenland summed ice sheet discharge dataset is available at doi:10.22008/promice/data/ice_discharge/d/v02 citep:GEUS_discharge_paper_d, where it will be updated as more velocity data become available. The gates can be found at doi:10.22008/promice/data/ice_discharge/gates/v02 citep:GEUS_discharge_paper_gates, the code at doi:10.22008/promice/data/ice_discharge/code/v0.0.1 citep:GEUS_discharge_paper_code, and the surface elevation change at doi:10.22008/promice/data/DTU/surface_elevation_change/v1.0.0 citep:GEUS_discharge_paper_elevation_change.

* Conclusions

We have presented a novel dataset of flux gates and a 1986 through 2019 glacier-scale ice discharge estimate for the Greenland Ice Sheet. These data are underpinned by an algorithm that both selects gates for ice flux and then computes ice discharges. 

Our results are similar to the most recent discharge estimate citep:king_2018_seasonal but begin in 1986 - although there are fewer samples prior to 2000. From our discharge estimate we show that over the past ~30 years, ice sheet discharge was ~440 Gt yr^{-1} prior to 2000, rose to over 500 Gt yr^{-1} from 2000 to 2005, and has held roughly steady since 2005 at near 500 Gt yr^{-1}. However, when viewed at a region or sector scale, the system appears more dynamic with spatial and temporal increases and decreases canceling each other out to produce the more stable ice sheet discharge. We note that there does not appear to be any dynamic connection among the regions, and any increase in one region that was offset by a decrease in another has likely been due to chance. If in coming years when changes occur the signals have matching signs, then ice sheet discharge would decrease or increase, rather than remain fairly steady.

The application of our flux gate algorithm shows that ice-sheet-wide discharge varies by ~30 Gt yr^{-1} due only to gate position, or ~40 Gt yr^{-1} due to gate position and cutoff velocity (Fig. [[fig:heatmap]]). This variance is approximately equal to the uncertainty associated with ice sheet wide discharge estimates reported in many studies (e.g. citet:rignot_2008_mass,andersen_2015_basin-scale,kjeldsen_2015_spatial). We highlight a major discrepancy with the ice discharge data of citet:enderlin_2014_improved and we suspect this discharge discrepancy -- most pronounced in southeast Greenland -- is associated with the choice of digital bed elevation model, specifically a deep hole in the bed at Køge Bugt.

Transparency in data and methodology are critical to move beyond a focus of estimating discharge quantities, towards more operational mass loss products with realistic errors and uncertainty estimates. The convention of devoting a paragraph, or even page, to methods is insufficient given the complexity, pace, and importance of Greenland Ice Sheet research citep:catania_2020. Therefore the flux gates, discharge data, and the algorithm used to generate the gates, discharge, and all figures from this paper are available. We hope that the flux gates, data, and code we provide here is a step toward helping others both improve their work and discover the errors in ours.

* Other                                                   :ignore:

#+BEGIN_authorcontribution
\ KDM conceived of the algorithm approach, and wrote the code. KDM , WIC, and RSF iterated over the algorithm results and methods. ASO provided the velocity data. SAK supplied the surface elevation change data. All authors contributed to the scientific discussion, writing, and editing of the manuscript. 
#+END_authorcontribution


#+BEGIN_competinginterests
\ The authors declare that they have no conflict of interest.
#+END_competinginterests


#+BEGIN_acknowledgements
We thank contributors and co-authors of previous versions of this paper, and the reviewers and editors for their constructive input that helped improve the paper. Andy Aschwanden helped improve metadata. Sentinel ice velocity maps were produced from Copernicus Sentinel-1 image data, processed by ESA data as part of PROMICE, and were provided by the Geological Survey of Denmark and Greenland (GEUS) at http://www.promice.org.
#+END_acknowledgements

#+BEGIN_financialsupport
This research has been supported by the Programme for Monitoring of the Greenland Ice Sheet (PROMICE) and the European Union's Horizon 2020 research and innovation program (INTAROS, grant no. 727890).
#+END_financialsupport


* References                                              :ignore:

#+LaTeX: \bibliographystyle{copernicus}
# #+LaTeX: \bibliography{/home/kdm/Documents/Papers/library,local}{}
# #+LaTeX: \bibliography{local}{}
#+LaTeX: \bibliography{ice_discharge}{}

* Figures
:PROPERTIES:
:clearpage: t
:END:
** Overview                                               :ignore:

#+NAME: fig:overview
#+ATTR_LATEX: :width 0.4\textwidth :placement [!h]
#+CAPTION: Overview showing fast-flowing ice (orange, greater than 100 m yr^{-1}) and the gates for eight major discharging glaciers (Fig. [[fig:discharge_ts_topfew]]). Gates are shown as black lines in inset images. Each inset is 30 x 30 km and they all have the same color scaling, but different from the main map. Insets pair with nearest label and box. On the main map, regions from citet:mouginot_2019_glacier are designated by thicker black lines and large bold labels. Sectors (same source) are delineated with thinner gray lines, and eight major discharging glaciers are labeled with smaller font. H = Helheim Gletsjer (Helheim Glacier), KB = Køge Bugt (Køge Bay), KG = Kangerlussuaq Gletsjer (Kangerlussuaq Glacier), KS = Kangilliup Sermia (English: Rink Glacier; Danish: Rink Isbræ), N = Nioghalvfjerdsbræ, P = Petermann Gletsjer (Petermann Glacier), SK = Sermeq Kujalleq (English: Jakobshavn Glacier; Danish: Jakobshavn Isbræ), and Z = Zachariae Isstrøm. Basemap terrain (gray), ocean bathymetry (blues), and ice mask (white) come from BedMachine.
[[./figs/overview.png]]


** Heatmap                                                :ignore:

#+NAME: fig:heatmap
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Heatmap and table showing ice sheet discharge as a function of gate buffer distance and ice speed cutoff. The colors of the numbers change for readability.
[[./figs/heatmap_all.png]]


** Ice Thickness v. Velocity 2D Histogram: Color = count  :ignore:

#+BEGIN_SRC jupyter-python :session histogram2D :exports none
import matplotlib
import matplotlib as mpl

if "LOADED" not in locals():
    <<load_data>>
    <<adjust_thickness>>
    <<adjust_thickness_fit>>
    LOADED=True

plt.close(1)
fig = plt.figure(1, figsize=(8,4)) # w,h
# get_current_fig_manager().window.move(0,0)
fig.clf()
# fig.set_tight_layout(True)

ax1 = fig.add_subplot(121)
thick = th['thick']
thick[thick < 1] = 1
im = ax1.hexbin(vel_baseline['vel'].values, thick,
               gridsize=(40,25),
               norm=mpl.colors.LogNorm(),
               vmin=1, vmax=100,
               xscale='log', yscale='log',
               linewidths=0.01,
               edgecolors='k',  mincnt=1)
ax1.set_ylabel('Thickness [m]')
ax1.set_xlabel('Velocity [m yr$^{-1}$]')
# cb = fig.colorbar(im, ax=ax1, extend='max')
# cb.set_label('Count [#]')

ax2 = fig.add_subplot(122)
im = ax2.hexbin(vel_baseline['vel'].values, th['fit'],
               gridsize=(40,25),
               norm=mpl.colors.LogNorm(),
               vmin=1, vmax=100,
               extent=[2,4,0,3],
               xscale='log', yscale='log',
                linewidths=0.01,
               edgecolors='k',  mincnt=1)
#ax2.set_ylabel('Thickness [m]')
#ax2.set_xlabel('Velocity [m yr$^{-1}$]')
cb = fig.colorbar(im, ax=[ax1,ax2], extend='max')
cb.set_label('Count [#]')

from adjust_spines import adjust_spines as adj
adj(ax1, ['left','bottom'])
adj(ax2, ['bottom'])

plt.savefig('./figs/h_v_histogram.png', transparent=True, dpi=300, bbox_inches='tight')
#+END_SRC

#+RESULTS:

#+NAME: fig:h_v_histogram
#+ATTR_LATEX: :height 0.5\textwidth
#+CAPTION: Two-dimensional histogram of velocity and thickness at all gate pixels. Left panel: Unadjusted thickness. Right panel: Adjusted (as described in the text) thickness.
[[./figs/h_v_histogram.png]]




** Discharge Time Series                                  :ignore:

#+NAME: fig:discharge_ts
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Bottom panel: Time series of ice discharge from the Greenland Ice Sheet. Dots represent when observations occurred (limited to coverage > 50 %). Orange stepped line is annual average (limited to three or more observations in a year). Coverage (percentage of total discharge observed at any given time) is shown in the top panel and also by the opacity of the dots' interior and error bars on lower panel. When coverage is < 100 %, total discharge is estimated and shown.
[[./figs/discharge_ts.png]]

** Discharge Time Series: Regions                         :ignore:

#+NAME: fig:discharge_ts_regions
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Bottom panel: Time series of ice discharge by region. Same graphical properties as Fig. [[fig:discharge_ts]].
[[./figs/discharge_ts_regions.png]]

** Discharge Time Series: Top Few                         :ignore:

#+NAME: fig:discharge_ts_topfew
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Bottom panel: Time series of ice discharge showing the eight major discharging glaciers from Figure [[fig:overview]]. Same graphical properties as Fig. [[fig:discharge_ts]].
[[./figs/discharge_ts_topfew.png]]

* Appendix                                                :ignore:
#+LaTeX: \appendix
#+LaTeX: \clearpage

** Errors and uncertainties

Here we describe our error and uncertainty treatments. We begin with a brief philosophical discussion of common uncertainty treatments, our general approach, and then the influence of various decisions made throughout our analysis, such as gate location and treatments of unknown thicknesses.

# Throughout this work we have tried to use simple rather than complicated methods (e.g. linear interpolation rather than Monte Carlo simulations, or setting bad thickness directly to X m rather than via a convoluted self-correlation) and conservative (low) rather than aggressive (high) estimates (e.g. unknown thicknesses set to 300 \(\pm\) 300 m rather than ~400 \(\pm\) 70 m citep:enderlin_2014_improved).

Traditional and mathematically valid uncertainty treatments divide errors into two classes: systematic (bias) and random. The primary distinction is that systematic errors do not decrease with more samples, and random errors decrease as the number of samples or measurements increases. The question is then which errors are systematic and which are random. A common treatment is to decide that errors within a region are systematic and among regions are random. This approach has no physical basis - two glaciers a few hundred meters apart but in different regions are assumed to have random errors, but two glaciers thousands of kilometers apart but within the same region are assumed to have systematic errors. It is more likely the case that all glaciers narrower than some width or deeper than some depth have systematic errors even if they are on opposite sides of the ice sheet, if ice thickness is estimated with the same method (i.e. the systematic error is likely caused by the sensor and airplane, not the location of the glacier).

The decision to have \(R\) random samples (where \(R\) is the number of regions, usually ~18 based on citet:zwally_2012_sectors) is also arbitrary. Mathematical treatment of random errors means that, even if the error is 50 % 18 measurements reduce it to only 11.79 %.

#+BEGIN_SRC jupyter-python :session err_example :results output :exports none :eval no-export
import numpy as np
from uncertainties import unumpy
val = 1 # arbitrary
err = 1 # 100% error # also try with 0.5

x = []
xerr = []
for i in [1,2,10,18,100,176,267,5829]:
    u = np.sum(unumpy.uarray([val]*i, [err]*i))
    x.append(u.n)
    xerr.append(u.s)
    print(i, u.n, u.s, np.round(u.s/u.n*100,2))
#+END_SRC

#+RESULTS:
: 1 1.0 1.0 100.0
: 2 2.0 1.4142135623730951 70.71
: 10 10.0 3.1622776601683795 31.62
: 18 18.0 4.242640687119285 23.57
: 100 100.0 10.0 10.0
: 176 176.0 13.2664991614216 7.54
: 267 267.0 16.34013463836819 6.12
: 5829 5829.0 76.34788798650555 1.31

This reduction is unlikely to be physically meaningful. Our 173 sectors, 267 gates, and 5829 pixels means that, even if errors were 100 % for each, we could reduce it to 7.5, 6.1, or 1.3 % respectively. We note that the area error introduced by the common EPSG:3413 map projection is -5 % in the north and +8 % in the south. While this error is mentioned in some other works (e.g., citet:joughin_2018_greenland) it is often not explicitly mentioned.

We do not have a solution for the issues brought up here, except to discuss them explicitly and openly so that those, and our own, error treatments are clearly presented and understood to likely contain errors themselves. 

*** Invalid thickness
:PROPERTIES:
:header-args:jupyter-python+: :session thick_adj
:END:

#+header: :eval no-export
#+NAME: tab:thick_adjust
#+BEGIN_SRC jupyter-python :display text/org :exports results :results value :session thick_adj :noweb yes

<<load_data>>
<<adjust_thickness>>

df = pd.DataFrame(index=pd.DataFrame(np.random.random(3)).describe().index.values)
df['Good pixels'] = vel_baseline.loc[~th['bad']].describe()
df['Bad pixels'] = vel_baseline.loc[th['bad']].describe()
df.index = [_.capitalize() for _ in df.index]
df.rename({"Min" : "Minimum", "Max" : "Maximum", "Std" : "SD"}, axis="rows", inplace=True)

# print("#+LATEX_ATTR: :placement [!h]")
# print("#+CAPTION: Statistics of pixels with and without valid thickness. Numbers represent speed (m yr^{-1}) except for the \"count\" row\label{tab:thick_adjust}.")
df.round(0).astype(int)
#+END_SRC

#+NAME: tab:thick_adjust
#+LATEX_ATTR: :placement [!h]
#+CAPTION: Statistics of pixels with and without valid thickness. Numbers represent speed (m yr^{-1}) except for the "count" row\label{tab:thick_adjust}.
#+RESULTS: tab:thick_adjust
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)

src_jupyter-python{vel.shape[0]} {{{results(=5863=)}}}
src_jupyter-python{(th['bad'] == False).sum()} {{{results(=5301=)}}}
src_jupyter-python{th['bad'].sum()} {{{results(=562=)}}}
src_jupyter-python{np.round(th['bad'].sum()/vel.shape[0]*100).astype(int)} {{{results(=10=)}}}

We assume ice thicknesses < 20 m are incorrect where ice speed is > 100 m yr^{-1}. Of 5863 pixels, 5301 have valid thickness, and 562 (11 %) have invalid thickness. However, the speed at the locations of the invalid thicknesses is generally much less (and therefore the assumed thickness is less), and the influence on discharge is less than an average pixel with valid thickness (Table [[tab:thick_adjust]]).

src_jupyter-python{th['gates'].unique().size} {{{results(=267=)}}}
src_jupyter-python{(th.groupby('gates').mean()['bad'] == 0).sum()} {{{results(=181=)}}}
src_jupyter-python{np.round((th.groupby('gates').mean()['bad'] == 0).sum()/th['gates'].unique().size*100).astype(int)} {{{results(=68=)}}}
src_jupyter-python{(th.groupby('gates').mean()['bad'] > 0).sum()} {{{results(=86=)}}}
src_jupyter-python{np.round((th.groupby('gates').mean()['bad'] > 0).sum()/th['gates'].unique().size*100).astype(int)} {{{results(=32=)}}}
src_jupyter-python{(th.groupby('gates').mean()['bad'] > 0.5).sum()} {{{results(=61=)}}}
src_jupyter-python{(th.groupby('gates').mean()['bad'] == 1).sum()} {{{results(=57=)}}}
src_jupyter-python{np.round((th.groupby('gates').mean()['bad'] == 1).sum()/th['gates'].unique().size*100).astype(int)} {{{results(=21=)}}}

When aggregating by gate, there are 267 gates. Of these, 181 (68 %) have no bad pixels and 86 (32 %) have some bad pixels, 61 have > 50 % bad pixels, and 57 (21 %) are all bad pixels.

We adjust these thickness using a poor fit (correlation coefficient: 0.3) of the log$_{10}$ of the ice speed to thickness where the relationship is known (thickness > 20 m). We set errors equal to one half the thickness (i.e. \(\sigma_H = \pm 0.5 \, H\)). We also test the sensitivity of this treatment to simpler treatments, and have the following five categories:

+ NoAdj :: No adjustments made. Assume BedMachine thicknesses are all correct.
+ 300 :: If a gate has some valid pixel thicknesses, set the invalid thicknesses to the minimum of the valid thicknesses. If a gate has no valid thickness, set the thickness to 300 m.
+ 400 :: Set all thicknesses < 50 m to 400 m
+ Fit :: Use the thickness--speed relationship described above.

Table [[tab:thick_treatments]] shows the estimated baseline discharge to these four treatments:

#+header: :eval no-export
#+NAME: tab:thick_treatments
#+BEGIN_SRC jupyter-python :session thick_treat :exports results :results value
<<load_data>>
<<adjust_thickness>>
<<adjust_thickness_fit>>
<<discharge_th>>

D_tmp = D_th.sum(axis=0).astype(int).astype(str)

df = pd.DataFrame(columns=['Discharge (Gt)'], index=['NoAdj',300,400,'Fit'])
df.loc['NoAdj'] = D_tmp['NoMillan'] + ' \pm ' + D_tmp['NoAdj_err']
df.loc[300] = D_tmp['300'] + ' \pm ' + D_tmp['300_err']
df.loc[400] = D_tmp['400'] + ' \pm ' + D_tmp['400_err']
df.loc['Fit'] = D_tmp['fit'] + ' \pm ' + D_tmp['fit_err']
df.index.name = 'Treatment'
# print("#+NAME: tab:thick_treatments")
# print('#+LATEX_ATTR: :placement [!h]')
# print('#+CAPTION: Effect of different thickness adjustments on baseline discharge\label{tab:thick_treatments}')
df
#+END_SRC

#+NAME: tab:thick_treatments
#+LATEX_ATTR: :placement [!h]
#+CAPTION: Effect of different thickness adjustments on baseline discharge\label{tab:thick_treatments}
#+RESULTS: tab:thick_treatments
#+begin_export html
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Discharge (Gt)</th>
    </tr>
    <tr>
      <th>Treatment</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>NoAdj</th>
      <td>463 \pm 41</td>
    </tr>
    <tr>
      <th>300</th>
      <td>467 \pm 43</td>
    </tr>
    <tr>
      <th>400</th>
      <td>473 \pm 46</td>
    </tr>
    <tr>
      <th>Fit</th>
      <td>470 \pm 45</td>
    </tr>
  </tbody>
</table>
</div>
#+end_export


Finally, Figure [[fig:gate_map]] shows the geospatial locations, concentration, and speed of gates with and without bad pixels.

#+NAME: fig:gate_map
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Gate locations and thickness quality. Left: locations of all gates. Black dots represent gates with 100 % valid thickness pixels, blue with partial, and red with none. Top right: Percent of bad pixels in each of the 267 gates, arranged by region. Bottom panel: Average speed of gates. Color same as left panel.
[[./figs/gate_map.png]]


*** Missing velocity
\label{sec:uncertain_vel}

We estimate discharge at all pixel locations for any time when there exists any velocity product. Not every velocity product provides velocity estimates at all locations, and we fill in where there are gaps by linearly interpolating velocity at each pixel in time. We calculate coverage, the discharge-weighted percent of observed velocity at any given time (Figure [[fig:coverage_schematic]]), and display coverage as 1) line plots over the time series graphs, 2) opacity of the error bars and 3) opacity of the infilling of time series dots. Linear interpolation and discharge-weighted coverage is illustrated in Figure [[fig:coverage_schematic]], where pixel A has a velocity value at all three times, but pixel B has a filled gap at time \(t_3\). The concentration of valid pixels is 0.5, but the weighted concentration, or coverage, is 9/11 or ~0.82. When displaying these three discharge values, \(t_1\) and \(t_4\) would have opacity of 1 (black), and \(t_3\) would have opacity of 0.82 (dark gray).

# Because velocity uncertainty is << thickness uncertainty (see next section) we do estimate a velocity uncertainty for our gap-filled velocities.

This treatment is applied at the pixel level and then weight averaged to the gate, sector, region, and ice sheet results.


#+BEGIN_SRC bash :results verbatim
inkscape -z ./figs/gate_weight_schematic.svg -e ./figs/gate_weight_schematic.png
#+END_SRC


#+NAME: fig:coverage_schematic
#+ATTR_LATEX: :width 0.33\textwidth :placement [!h]
#+CAPTION: Schematic demonstrating coverage. Velocities are filled with linear interpolation in time, and coverage is weighted by discharge. \(t\) columns represent the same two gate pixels (A & B) at three time steps, where \(t_n\) values are linearly spaced, but \(t_2\) is not observed anywhere on the ice sheet and therefore not included. Numbers in boxes represent example discharge values. The gray parenthetical number is filled, not sampled, in pixel B at time t\(_3\). Weighted filling computes the coverage as 9/11 = \(0.\overline{81}\), instead of 0.5 (half of the pixels at time t\(_3\) have observations).
[[./figs/gate_weight_schematic.png]]


*** Errors from map projection                          :noexport:
#+LaTeX: \label{sec:uncertain_map}

Our work takes place in a projected coordinate system (EPSG 3413) and therefore errors are introduced between the "true" earth spheroid (which is itself an approximation) and our projected coordinates system. We address these by calculating the projection error due to EPSG 3413 which is approximately +8 % in Northern Greenland and -6 % in Southern Greenland, and multiplying variables by a scaling factor if the variables do not already take this into account. Velocities are "true velocities" and not scaled, but the nominal 200 m gate width is scaled.

** Velocity versus thickness                            :noexport:
:PROPERTIES:
:clearpage: t
:END:

#+NAME: fig:h_v_histogram
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Thickness versus ice speed histogram. Points limited to discharge pixels.
[[./h_v_histogram.png]]


** Køge Bugt bed change between citet:bamber_2013_bed and citet:morlighem_2017_bedmachine
:PROPERTIES:
:clearpage: t
:END:

#+NAME: fig:koge_bugt_bamber
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Differences between BedMachine citep:morlighem_2017_bedmachine and citet:bamber_2013_bed near Køge Bugt. Panel (a) is baseline ice speed, (b) BedMachine thickness, (c) citet:bamber_2013_bed thickness, and (d) difference computed as BedMachine - Bamber. The curved line is the gate used in this work.
[[./figs/koge_bugt.png]]



** Sentinel-1 ice velocity maps
:PROPERTIES:
:CUSTOM_ID: sec:appendix:sentinel
:clearpage: t
:END:

We use ESA Sentinel-1 synthetic aperture radar (SAR) data to derive ice velocity maps covering the Greenland Ice Sheet margin using offset tracking citep:strozzi_2002_glacier assuming surface parallel flow using the digital elevation model from the Greenland Ice Mapping Project (GIMP DEM, NSIDC 0645) by citet:howat_2014_greenland,NSIDC_0645. The operational interferometric postprocessing (IPP) chain citep:dall_2015_ice,kusk_2018_system, developed at the Technical University of Denmark (DTU) Space and upgraded with offset tracking for ESA’s Climate Change Initiative (CCI) Greenland project, was employed to derive the surface movement. The Sentinel-1 satellites have a repeat cycle of 12 days, and due to their constellation, each track has a twelve-day repeat cycle. We produce a Greenland-wide product that spans two repeat cycles of Sentinel-1A. The product is a mosaic of all the ice velocity maps based on 12 day pairs produced from all the tracks from Sentinel-1A and 1B covering Greenland during those two cycles. The product thus has a total time span of 24 days. Twelve-day pairs are also included in each mosaic from track 90, 112 and 142 covering the ice sheet margin in the south as well as other tracks on an irregular basis in order to increase the spatial resolution. citet:rathmann_2017_highly and citet:vijay_2019_resolving have exploited the high temporal resolution of the product to investigate dynamics of glaciers. The maps are available from 2016-09-13 and onward, are updated regularly, and are available from http://promice.org.


** Software
:PROPERTIES:
:clearpage: t
:END:

This work was performed using only open-source software, primarily =GRASS GIS= citep:neteler_2012_GRASS and =Python= citep:van-rossum_1995_python, in particular the =Jupyter= citep:kluyver_2016_jupyter, =pandas= citep:mckinney_2010_pandas, =numpy= citep:oliphant_2006_numpy, =statsmodel= citep:seabold_2010_statsmodels, =x-array= citep:hoyer_2017_xarray, and =Matplotlib= citep:hunter_2007_matplotlib packages. The entire work was performed in =Emacs= citep:stallman_1981_emacs using =Org Mode= citep:schulte_2012_a-multi-language. The =parallel= citep:tange_2011_parallel tool was used to speed up processing. We used =proj4= citep:proj4 to compute the errors in the EPSG 3413 projection. All code used in this work is available in the Supplemental Material.

* Code                                                  :noexport:
:PROPERTIES:
:header-args:bash+: :comments both
:header-args:bash+: :tangle-mode (identity #o544)
:header-args:bash+: :shebang #!/usr/bin/env bash
:END:
** Misc Helper
*** Support pretty messages
#+NAME: MSGS_pretty_print
#+BEGIN_SRC bash :results verbatim :tangle no
RED='\033[0;31m'
ORANGE='\033[0;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color
MSG_OK() { printf "${GREEN}${1}${NC}\n"; }
MSG_WARN() { printf "${ORANGE}WARNING: ${1}${NC}\n"; }
MSG_ERR() { echo "${RED}ERROR: ${1}${NC}\n" >&2; }
#+END_SRC

*** GRASS config

https://grass.osgeo.org/grass74/manuals/variables.html

#+BEGIN_QUOTE
GRASS_VERBOSE
[all modules]
toggles verbosity level
-1 - complete silence (also errors and warnings are discarded)
0 - only errors and warnings are printed
1 - progress and important messages are printed (percent complete)
2 - all module messages are printed
3 - additional verbose messages are printed
#+END_QUOTE

#+NAME: GRASS_config
#+BEGIN_SRC bash :results verbatim :tangle no
export GRASS_VERBOSE=3
# export GRASS_MESSAGE_FORMAT=silent

if [ -z ${DATADIR+x} ]; then
    echo "DATADIR environment varible is unset."
    echo "Fix with: \"export DATADIR=/path/to/data\""
    exit 255
fi

set -x # print commands to STDOUT before running them

trap ctrl_c INT
function ctrl_c() {
  MSG_WARN "Caught CTRL-C"
  MSG_WARN "Killing process"
  kill -term $$ # send this program a terminate signal
}
#+END_SRC

** Import Data
:PROPERTIES:
:header-args:bash+: :tangle import.sh
:END:

#+BEGIN_SRC bash :results verbatim 
<<MSGS_pretty_print>>
<<GRASS_config>>
#+END_SRC

*** Bed and Surface
**** BedMachine v5
+ from [[textcite:Morlighem:2017BedMachine][Morlighem /et al./ (2017)]]
#+BEGIN_SRC bash :results verbatim
MSG_OK "BedMachine"
g.mapset -c BedMachine

for var in mask surface thickness bed errbed; do
  echo $var
  r.external source=NetCDF:${DATADIR}/Morlighem_2017/BedMachineGreenland-v5.nc:${var} output=${var}
done

r.colors -a map=errbed color=haxby

g.mapset PERMANENT
g.region raster=surface@BedMachine res=200 -a -p
g.region -s
g.mapset BedMachine
g.region -dp

r.colors map=mask color=haxby

r.mapcalc "mask_ice = if(mask == 2, 1, null())"
#+END_SRC

**** Bamber 2013
#+BEGIN_SRC bash :results verbatim
MSG_OK "Bamber 2013"
g.mapset -c Bamber_2013
r.in.gdal input=${DATADIR}/Bamber_2013/IceThickness.tif output=thickness
r.null thickness null=0
#+END_SRC

**** GIMP 0715
#+BEGIN_SRC bash :results verbatim
MSG_OK "GIMP 0715"
g.mapset -c GIMP.0715
ROOT=${DATADIR}/GIMP/0715

# reset
# g.remove -f type=raster name=$(g.list type=raster mapset=. separator=",")

# read in DEM, DAY, and ERR
# for f in $(ls ${ROOT}/reg/tile_?_?_reg_30m_???.tif); do
#   name=$(basename ${f})
#   r.external input=${f} output=${name}
# done
ls ${ROOT}/reg/tile_?_?_reg_30m_???.tif | parallel --verbose --bar r.external input={} output={/.}
ls ${ROOT}/fit/tile_?_?_fit_30m_???.tif | parallel --verbose --bar r.external input={} output={/.}

r.patch -s input=$(g.list type=raster pattern=tile_?_?_reg_30m_dem separator=,),$(g.list type=raster pattern=tile_?_?_fit_30m_dem separator=,) output=dem

# no fit day data to patch holes. We'll assign elevation pixels with DEM data but not DAY data to some day, TBD
r.patch -s input=$(g.list type=raster pattern=tile_?_?_reg_30m_day separator=,) output=day

r.patch -s input=$(g.list type=raster pattern=tile_?_?_reg_30m_err separator=,),$(g.list type=raster pattern=tile_?_?_fit_30m_err separator=,) output=err

r.null map=day null=0
#+END_SRC

*** Sectors
**** Mouginot 2019
+ From citet:mouginot_2019_glacier
***** Import & Clean
#+BEGIN_SRC bash :results verbatim
MSG_OK "Mouginot 2019 sectors"

g.mapset -c Mouginot_2019
v.in.ogr input=${DATADIR}/Mouginot_2019 output=sectors_all
v.extract input=sectors_all where="NAME NOT LIKE '%ICE_CAP%'" output=sectors

db.select table=sectors | head
v.db.addcolumn map=sectors columns="region_name varchar(100)"
db.execute sql="UPDATE sectors SET region_name=SUBREGION1 || \"___\" || NAME"

v.to.db map=sectors option=area columns=area units=meters

mkdir -p ./tmp/
# db.select table=sectors > ./tmp/Mouginot_2019.txt

v.to.rast input=sectors output=sectors use=cat label_column=region_name
r.mapcalc "mask_GIC = if(sectors)"

# # regions map
v.to.rast input=sectors output=regions_tmp use=cat label_column=SUBREGION1
# which categories exist?
# r.category regions separator=comma | cut -d, -f2 | sort | uniq
# Convert categories to numbers
r.category regions_tmp separator=comma | sed s/NO/1/ | sed s/NE/2/ | sed s/CE/3/ | sed s/SE/4/ | sed s/SW/5/ | sed s/CW/6/ | sed s/NW/7/ > ./tmp/mouginot.cat
r.category regions_tmp separator=comma rules=./tmp/mouginot.cat
# r.category regions_tmp
r.mapcalc "regions = @regions_tmp"

# # region vector 
# r.to.vect input=regions output=regions type=area
# v.db.addcolumn map=regions column="REGION varchar(2)"
# v.what.vect map=regions column=REGION query_map=sectors query_column=SUBREGION1

# # mask
#+END_SRC

***** Test
#+BEGIN_SRC bash :results verbatim :tangle no
grass74 ./G/Mouginot_2019
d.mon start=wx0
d.rast regions
d.rast sectors
d.vect sectors_all fill_color=none color=red
d.vect sectors fill_color=none
#+END_SRC

**** Zwally 2012

I use an "expanded boundary" version. This was created by loading the Zwally sectors into QGIS and moving the coasts outward. This is done because some gates (ice) is outside the boundaries provided by Zwally.

#+BEGIN_SRC bash
g.mapset -c Zwally_2012
v.in.ogr input=${DATADIR}/Zwally_2012/sectors_enlarged output=Zwally_2012
#+END_SRC

*** 2D Area Error
+ EPSG:3413 has projection errors of \(\pm\) ~8% in Greenland
+ Method
  + Email: [[mu4e:msgid:m2tvxmd2xr.fsf@gmail.com][Re: {GRASS-user} scale error for each pixel]]
  + Webmail: https://www.mail-archive.com/grass-user@lists.osgeo.org/msg35005.html
#+BEGIN_SRC bash :results verbatim
MSG_OK "2D Area Error"
g.mapset PERMANENT

if [[ "" == $(g.list type=raster pattern=err_2D) ]]; then
    r.mask -r
    g.region -d

    g.region res=1000 -ap # do things faster
    r.mapcalc "x = x()"
    r.mapcalc "y = y()"
    r.latlong input=x output=lat_low
    r.latlong -l input=x output=lon_low

    r.out.xyz input=lon_low,lat_low separator=space > ./tmp/llxy.txt
    PROJSTR=$(g.proj -j)
    echo $PROJSTR

    paste -d" " <(cut -d" " -f1,2 ./tmp/llxy.txt) <(cut -d" " -f3,4 ./tmp/llxy.txt | proj -VS ${PROJSTR} | grep Areal | column -t | sed s/\ \ /,/g | cut -d, -f4) > ./tmp/xy_err.txt

    r.in.xyz input=./tmp/xy_err.txt  output=err_2D_inv separator=space
    r.mapcalc "err_2D = 1/(err_2D_inv^0.5)" # convert area error to linear multiplier error
    g.region -d

    r.latlong input=x output=lat # for exporting at full res
    r.latlong -l input=x output=lon
fi

# sayav done
g.region -d
#+END_SRC

*** Velocity
**** MEaSUREs 
+ See: [[file:~/data/MEaSUREs/README.org][MEaSUREs README]]

+ [X] 0478 :: 2000 -- 2017 annual average
+ [X] 0481 :: 6-11 day velocity TSX
+ [X] 0646 :: Monthly velocity - sparse glacier coverage 1985 through 2016
+ [ ] 0670 :: 1995 -- 2015 average
+ [ ] 0725 :: 2015 & 2016 annual average
+ [X] 0731 :: Monthly  ice sheet velocity 2015 through 2018
+ [X] 0766 :: S1 6-d16

***** 0478.002
+ MEaSUREs Greenland Ice Sheet Velocity Map from InSAR Data, Version 2
+ Winter velocity maps
****** Import
+ First read in the 200 m files
+ Then read in the 500 m files if there were no 200 m files
#+BEGIN_SRC bash :results verbatim
MSG_OK "MEaSURES.0478"
g.mapset -c MEaSUREs.0478

MSG_OK "  200 m..."
r.mask -r
ROOT=${DATADIR}/MEaSUREs/NSIDC-0478.002/
VX=$(find ${ROOT} -name "*mosaic200_*vx*.tif" | head -n1) # DEBUG
for VX in $(find ${ROOT} -name "*mosaic200_*vx*.tif" | LC_ALL=C sort); do
  VY=${VX/vx/vy}
  EX=${VX/vx/ex}
  EY=${EX/ex/ey}
  DATE=$(dirname ${VX} | rev | cut -d"/" -f1 | rev | sed s/\\./_/g)
  # echo $DATE
  # need to import not link to external so that we can set nulls to 0
  parallel --verbose --bar r.in.gdal input={1} output={2}_${DATE} ::: ${VX} ${VY} ${EX} ${EY} :::+ VX VY EX EY
  parallel --verbose --bar r.null map={}_${DATE} null=0 ::: VX VY EX EY
done
g.region raster=VX_${DATE} -pa

MSG_OK "  500 m..."
VX=$(find ${ROOT} -name "*mosaic500_*vx*.tif" | head -n1) # DEBUG
for VX in $(find ${ROOT} -name "*mosaic500_*vx*.tif" | LC_ALL=C sort); do
  VY=${VX/vx/vy}
  EX=${VX/vx/ex}
  EY=${EX/ex/ey}
  DATE=$(dirname ${VX} | rev | cut -d"/" -f1 | rev | sed s/\\./_/g)
  echo $DATE

  # Read in all the 500 m velocity data
  parallel --verbose --bar r.external source={1} output={2}_${DATE}_500 ::: ${VX} ${VY} ${EX} ${EY} :::+ VX VY EX EY 
  # If the 200 m data exists, will produce an error and continue
  # If the 200 m data does not exist, will resample from 500
  r.mapcalc "VX_${DATE} = VX_${DATE}_500"
  r.mapcalc "VY_${DATE} = VY_${DATE}_500"
  r.mapcalc "EX_${DATE} = EX_${DATE}_500"
  r.mapcalc "EY_${DATE} = EY_${DATE}_500"
  parallel --verbose --bar r.null map={}_${DATE} null=0 ::: VX VY EX EY
done
#+END_SRC

****** Baseline: Average of 2015-2017

+ See [[./dat/remove_ice_manual.kml]]
+ This is due to extensive Jakobshavn retreat between baseline and present
+ The gates need to be >5 km from the baseline terminus


#+BEGIN_SRC bash :results verbatim
MSG_OK "Baseline"
g.mapset -c MEaSUREs.0478

r.series input=VX_2015_09_01,VX_2016_09_01,VX_2017_09_01 output=vx_baseline method=average range=-1000000,1000000
r.series input=VY_2015_09_01,VY_2016_09_01,VY_2017_09_01 output=vy_baseline method=average range=-1000000,1000000

r.series input=EX_2015_09_01,EX_2016_09_01,EX_2017_09_01 output=ex_baseline method=average range=-1000000,1000000
r.series input=EY_2015_09_01,EY_2016_09_01,EY_2017_09_01 output=ey_baseline method=average range=-1000000,1000000

v.import input=./dat/remove_ice_manual.kml output=remove_ice_manual --o
r.mask -i vector=remove_ice_manual --o

r.mapcalc "vel_baseline = sqrt(vx_baseline^2 + vy_baseline^2)"
r.mapcalc "vel_err_baseline = sqrt(ex_baseline^2 + ey_baseline^2)"

r.mask -r

parallel --verbose --bar r.null map={}_baseline setnull=0 ::: vx vy vel ex ey vel_err
r.colors -e map=vel_baseline,vel_err_baseline color=viridis
#+END_SRC

****** Fill in holes
+ There are holes in the velocity data which will create false gates. Fill them in.
+ Clump based on yes/no velocity
  + Largest clump is GIS
  + 2nd largest is ocean
+ Mask by ocean (so velocity w/ holes remains)
+ Fill holes
#+BEGIN_SRC bash :results verbatim
r.mask -r
r.mapcalc "no_vel = if(isnull(vel_baseline), 1, null())"
r.mask no_vel
r.clump input=no_vel output=no_vel_clump --o
ocean_clump=$(r.stats -c -n no_vel_clump sort=desc | head -n1 | cut -d" " -f1)
r.mask -i raster=no_vel_clump maskcats=${ocean_clump} --o
r.fillnulls input=vel_baseline out=vel_baseline_filled method=bilinear
r.mask -r
g.rename raster=vel_baseline_filled,vel_baseline --o
r.colors map=vel_baseline -e color=viridis
#+END_SRC

******* Display
#+BEGIN_SRC bash :results verbatim :tangle no
d.mon start=wx0
d.erase
d.rast vel
d.rast vel_filled
#+END_SRC

***** 0481.004 TSX
****** Generate VRTs
+ One map per date
+ Build GDAL virtual tiles for every date (when data exists)
#+BEGIN_SRC bash :results verbatim
g.mapset -c MEaSUREs.0481

ROOT=${DATADIR}/MEaSUREs/NSIDC-0481.004
VRTROOT=./tmp/NSIDC-0481.004.vrt/
mkdir -p ${VRTROOT}

for date in $(cd ${ROOT}; ls -d */|tr -d '/'); do
  if [[ ! -f ${VRTROOT}/${date}_vx.vrt ]]; then # VRT file does not exist?
    LIST=$(find ${ROOT}/${date}/ -name "TSX*vx*.tif" | LC_ALL=C sort)
    if [[ ! -z ${LIST} ]]; then
      MSG_OK "Building VRTs for ${date}"

      VX=$(ls $ROOT/$date/*vx* | head -n1)
      T0=$(basename ${VX} | cut -d_ -f3)
      T1=$(basename ${VX} | cut -d_ -f4)
      SEC0=$(date --utc --date="${T0}" +"%s")
      SEC1=$(date --utc --date="${T1}" +"%s")
      MID=$(echo "(${SEC0}+${SEC1})/2"|bc)
      DATE=$(date --utc --date="@${MID}" +"%Y_%m_%d")
      
      parallel --verbose --bar gdalbuildvrt -overwrite ${VRTROOT}/${DATE}_{}.vrt $\(find ${ROOT}/${date} -name "TSX*{}*.tif" \| LC_ALL=C sort\) ::: vx vy ex ey
    fi
  fi
done
#+END_SRC

****** Import VRTs
#+BEGIN_SRC bash :results verbatim
MSG_OK "MEaSURES.0481"
g.mapset -c MEaSUREs.0481

# Set a super region
gdalbuildvrt -overwrite tmp/0481.vrt ./tmp/NSIDC-0481.004.vrt/*_vx.vrt
r.external source=tmp/0481.vrt output=tmp -e -r 
g.region raster=tmp -pa res=250
g.remove -f type=raster name=tmp

r.mask -r
ROOT=./tmp/NSIDC-0481.004.vrt/
VX=$(find ${ROOT} -name "*vx*.vrt" | head -n1) # debug
for VX in $(find ${ROOT} -name "*vx*.vrt" | LC_ALL=C sort); do
    VY=${VX/vx/vy}
    EX=${VX/vx/ex}
    EY=${EX/ex/ey}
    DATE=$(basename $VX | cut -d"_" -f1-3)
    echo $DATE
    
    parallel --verbose --bar r.external source={1} output={2}_${DATE} ::: ${VX} ${VY} ${EX} ${EY} :::+ VX VY EX EY
done
#+END_SRC

***** 0646.003
+ MEaSUREs Greenland Ice Velocity: Selected Glacier Site Velocity Maps from Optical Images, Version 2
+ Monthly velocity maps
****** Generate VRTs
+ One map per month
+ Build GDAL virtual tiles for every month (when data exists)
#+BEGIN_SRC bash :results verbatim
g.mapset -c MEaSUREs.0646

ROOT=${DATADIR}/MEaSUREs/NSIDC-0646.003/
VRTROOT=./tmp/NSIDC-0646.003.vrt/
mkdir -p ${VRTROOT}
for year in $(seq 1985 2018); do
  for month in $(seq -w 1 12); do
    if [[ ! -f ${VRTROOT}/${year}_${month}_vx.vrt ]]; then # VRT file does not exist?
      LIST=$(find ${ROOT} -name "*${year}-${month}_vx_*.tif" | LC_ALL=C sort)
      if [[ ! -z ${LIST} ]]; then
        MSG_OK "Building VRTs for ${year} ${month}"
        parallel --verbose --bar gdalbuildvrt -overwrite ${VRTROOT}/${year}_${month}_{}.vrt $\(find ${ROOT} -name "*${year}-${month}_{}_*.tif" \| LC_ALL=C sort\) ::: vx vy ex ey
      fi
    fi
  done
done
#+END_SRC

****** Import VRTs
#+BEGIN_SRC bash :results verbatim
MSG_OK "MEaSURES.0646"
g.mapset -c MEaSUREs.0646

r.mask -r
ROOT=./tmp/NSIDC-0646.003.vrt/
VX=$(find ${ROOT} -name "*vx*.vrt" | head -n1) # debug
for VX in $(find ${ROOT} -name "*vx*.vrt" | LC_ALL=C sort); do
    VY=${VX/vx/vy}
    EX=${VX/vx/ex}
    EY=${EX/ex/ey}
    DATE=$(basename $VX | cut -d"_" -f1-2)
    DATE=${DATE}_15
    echo $DATE
    
    parallel --verbose --bar r.external source={1} output={2}_${DATE} ::: ${VX} ${VY} ${EX} ${EY} :::+ VX VY EX EY
done
g.region raster=VX_${DATE} -pa
# g.list type=raster mapset=MEaSUREs.0646
#+END_SRC



***** 0731.005
MEaSUREs Greenland Monthly Ice Sheet Velocity Mosaics from SAR and Landsat, Version 1

****** Import
#+BEGIN_SRC bash :results verbatim
MSG_OK "MEaSURES.0731"
g.mapset -c MEaSUREs.0731
r.mask -r
ROOT=${DATADIR}/MEaSUREs/NSIDC-0731.005/
VX=$(find ${ROOT} -name "*mosaic_*vx*.tif" | head -n1) # DEBUG
for VX in $(find ${ROOT} -name "*mosaic_*vx*.tif" | LC_ALL=C sort); do
  VY=${VX/vx/vy}
  EX=${VX/vx/ex}
  EY=${EX/ex/ey}

  T0=$(dirname ${VX} | rev | cut -d"/" -f1 | rev|cut -d"_" -f4 | tr '.' '-')
  T1=$(dirname ${VX} | rev | cut -d"/" -f1 | rev|cut -d"_" -f5 | tr '.' '-')
  SEC0=$(date --utc --date="${T0}" +"%s")
  SEC1=$(date --utc --date="${T1}" +"%s")
  MID=$(echo "(${SEC0}+${SEC1})/2"|bc)
  DATE=$(date --utc --date="@${MID}" +"%Y_%m_%d")

  # echo $DATE
  parallel --verbose --bar r.external source={1} output={2}_${DATE} ::: ${VX} ${VY} ${EX} ${EY} :::+ VX VY EX EY
  parallel --verbose --bar r.null map={}_${DATE} null=0 ::: VX VY EX EY
done
g.region raster=VX_${DATE} -pa
#+END_SRC


***** 0766.002 Sentinel

****** Import

#+NAME: MEaSURES_0766_import
#+BEGIN_SRC bash :results verbatim
MSG_OK "MEaSURES.0766"
g.mapset -c MEaSUREs.0766
r.mask -r
ROOT=${DATADIR}/MEaSUREs/NSIDC-0766.002
VX=$(find ${ROOT} ${ROOT}-updates -name "*mosaic_*vx*.tif" | tail -n1) # DEBUG
for VX in $(find ${ROOT} ${ROOT}-updates -name "*mosaic_*vx*.tif" | LC_ALL=C sort); do
  VY=${VX/vx/vy}
  EX=${VX/vx/ex}
  EY=${EX/ex/ey}

  T0=$(basename ${VX} | cut -d_ -f5)
  T1=$(basename ${VX} | cut -d_ -f6)
  SEC0=$(date --utc --date="${T0}" +"%s")
  SEC1=$(date --utc --date="${T1}" +"%s")
  MID=$(echo "(${SEC0}+${SEC1})/2"|bc)
  DATE=$(date --utc --date="@${MID}" +"%Y_%m_%d")

  # echo $DATE
  parallel --verbose --bar r.external source={1} output={2}_${DATE} ::: ${VX} ${VY} ${EX} ${EY} :::+ VX VY EX EY
  # Can't r.null for external maps.
  # parallel --verbose --bar r.null map={}_${DATE} null=0 ::: VX VY EX EY 
done
g.region raster=VX_${DATE} -pa
#+END_SRC

**** PROMICE IV 200m
***** Data Intro                                        :noexport:
#+BEGIN_SRC bash :results verbatim :tangle no
DIR=${DATADIR}/Promice200m/
(cd ${DIR}; ls *.nc | head)
(cd ${DIR}; ncdump -h $(ls *.nc | head -n1) | grep "float")
#+END_SRC 

***** Import data                                       :noexport:

+ Read in all the data
+ Conversion from [m day-1] to [m year-1] is done in section Just one velocity cutoff & buffer distance

#+NAME: promice_import
#+BEGIN_SRC bash :results verbatim
MSG_OK "Promice 200m"
g.mapset -c promice
ROOT=${DATADIR}/Promice200m/

FILE=$(find ${ROOT} -name "*.nc" | head -n1) # DEBUG 
for FILE in $(find ${ROOT} -name "*.nc" | LC_ALL=C sort); do
  DATE_STR=$(ncdump -t -v time ${FILE} | tail -n2 | tr -dc '[0-9\-]' | tr '-' '_')
  echo $DATE_STR
                                                                                                                         
  r.external -o source="NetCDF:${FILE}:land_ice_surface_easting_velocity" output=vx_${DATE_STR}
  r.external -o source="NetCDF:${FILE}:land_ice_surface_northing_velocity" output=vy_${DATE_STR}
                                                                                 
  r.external -o source="NetCDF:${FILE}:land_ice_surface_easting_velocity_std" output=ex_${DATE_STR}
  r.external -o source="NetCDF:${FILE}:land_ice_surface_northing_velocity_std" output=ey_${DATE_STR}
done
#+END_SRC


**** Mouginot 2018 (pre-2000 velocities)
+ See citet:mouginot_2018_1972to1990 and citet:mouginot_2018_1991to2000

#+BEGIN_SRC bash :results verbatim
MSG_OK "Mouginot pre 2000"
g.mapset -c Mouginot_pre2000

ROOT=${DATADIR}/Mouginot_2018/D1GW91
find ${ROOT} -name "*.nc"
FILE=$(find ${ROOT} -name "*.nc" | head -n1 | LC_ALL=C sort) # DEBUG
for FILE in $(find ${ROOT} -name "*.nc"); do
  YYYYMMDD=$(echo ${FILE} | cut -d"_" -f4)
  YEAR=$(echo ${YYYYMMDD} | cut -d"-" -f1)
  DATE=${YEAR}_01_01
  echo $DATE
  r.external -o source="NetCDF:${FILE}:VX" output=vx_${DATE}
  r.external -o source="NetCDF:${FILE}:VY" output=vy_${DATE}
done

# ROOT=${DATADIR}/Mouginot_2018/D1MM37
# find ${ROOT} -name "*.nc"
# FILE=$(find ${ROOT} -name "*.nc" | head -n1) # DEBUG
# for FILE in $(find ${ROOT} -name "*.nc"); do
#   YYYYMMDD=$(echo ${FILE} | cut -d"_" -f4)
#   YEAR=$(echo ${YYYYMMDD} | cut -d"-" -f1)
#   DATE=${YEAR}_01_01
#   echo $DATE
#   r.external -o source="NetCDF:${FILE}:VX" output=vx_${DATE}
#   r.external -o source="NetCDF:${FILE}:VY" output=vy_${DATE}
# done
#+END_SRC

***** Display
#+BEGIN_SRC bash :results verbatim :tangle no
d.mon start=wx0
g.list type=raster pattern=vx_*

d.erase; d.rast vx_1990-07-01
d.erase; d.rast vx_1991-07-01
d.erase; d.rast vx_1992-07-01
d.erase; d.rast vx_1993-07-01
d.erase; d.rast vx_1994-07-01
d.erase; d.rast vx_1995-07-01
d.erase; d.rast vx_1996-07-01
d.erase; d.rast vx_1997-07-01
d.erase; d.rast vx_1998-07-01
d.erase; d.rast vx_1999-07-01
#+END_SRC


*** Glacier Names
+ From [[textcite:Bjork:2015Brief][Bjørk /et al./ (2015)]].
+ Also use citet:mouginot_2019_glacier
**** Bjørk 2015
+ Write out x,y,name. Can use x,y and mean gate location to find closest name for each gate.
#+BEGIN_SRC bash :results verbatim
MSG_OK "Bjørk 2015"
g.mapset -c Bjork_2015

ROOT=${DATADIR}/Bjørk_2015/

cat ${ROOT}/GreenlandGlacierNames_GGNv01.csv |  iconv -c -f utf-8 -t ascii | grep GrIS | awk -F';' '{print $3"|"$2"|"$7}' | sed s/,/./g | m.proj -i input=- | sed s/0.00\ //g | v.in.ascii input=- output=names columns="x double precision, y double precision, name varchar(99)"

# db.select table=names | tr '|' ',' > ./tmp/Bjork_2015_names.csv
#+END_SRC
**** Mouginot 2019
#+BEGIN_SRC bash :results verbatim
g.mapset Mouginot_2019
db.select table=sectors | head
# v.out.ascii -c input=sectors output=./tmp/Mouginot_2019_names.csv columns=NAME,SUBREGION1
#+END_SRC


**** NSIDC 0642

+ https://nsidc.org/data/NSIDC-0642/versions/1

#+BEGIN_SRC bash
MSG_OK "NSIDC 0642"
g.mapset -c NSIDC_0642
ROOT=${DATADIR}/Moon_2008
v.in.ogr input=${ROOT}/GlacierIDs_v01.2.shp output=GlacierIDs
# v.db.select map=GlacierIDs | head
#+END_SRC

#+BEGIN_SRC bash :tangle no :results verbatim
ROOT=${DATADIR}/Moon_2008
md5sum ${ROOT}/GlacierIDs_v01.2.*
#+END_SRC

#+RESULTS:

*** Elevation

+ h_0 is PRODEM 20 set to day 182 of 2020
+ h_n+ is PRODEM following years
  + When PRODEM ends, continue using last year (e.g., =pandas= =ffill()=)
+ h_n- is Khan 2016e [[file:${DATADIR}/Khan_2016/README.org]]
  + Coverage is 1995 through 2020
  + Prior to Khan beginning, use first year (e.g., =pandas= =bfill()=)
    
**** PRODEM

#+BEGIN_SRC bash :exports both :results verbatim
MSG_OK "dh/dt"

g.mapset -c PRODEM
r.mask -r

f=$(ls ${DATADIR}/PRODEM/PRODEM??.tif | head -n1) # debug
for f in $(ls ${DATADIR}/PRODEM/PRODEM??.tif); do
  y=20$(echo ${f: -6:2})
  r.in.gdal -r input=${f} output=DEM_${y} band=1
  # r.in.gdal -r input=${f} output=var_${y} band=2
  # r.in.gdal -r input=${f} output=dh_${y} band=3
  # r.in.gdal -r input=${f} output=time_${y} band=4
  # r.univar -g time_2019 # mean = DOI 213 = 01 Aug
done
g.region raster=DEM_2019 -pa
#+END_SRC

**** Khan 2016
#+BEGIN_SRC bash :results verbatim
MSG_OK "Khan 2016"

g.mapset -c Khan_2016
r.mask -r

g.region -d
g.region res=2000 -pa

cat << EOF > ./tmp/elev_filter.txt
TITLE     See r.mfilter manual
    MATRIX    3
    1 1 1
    1 1 1
    1 1 1
    DIVISOR   0
    TYPE      P
EOF

FILE=${DATADIR}/Khan_2016/dhdt_1995-2015_GrIS.txt
head -n1 $FILE
Y=1995 # debug
for Y in $(seq 1995 2010); do
  col=$(echo "$Y-1995+3" | bc -l)
  echo $Y $col
  if [[ "" == $(g.list type=raster pattern=dh_${Y}) ]]; then
    # remove comments, leading spaces, and convert
    # spaces to comma, swap lat,lon, then import
    cat ${FILE} \
      | grep -v "^%" \
      | sed s/^\ *//g \
      | sed s/\ \ \*/,/g \
      | cut -d"," -f1,2,${col} \
      | awk -F, '{print $2 "|" $1 "|" $3}' \
      | m.proj -i input=- \
      | r.in.xyz input=- output=dh_${Y}_unfiltered
  fi
done


FILE=${DATADIR}/Khan_2016/GR_2011_2020.txt
head -n6 $FILE
Y=2011 # debug
for Y in $(seq 2011 2019); do
  col=$(echo "($Y-2011)*2 +3" | bc -l)
  echo $Y $col
  if [[ "" == $(g.list type=raster pattern=dh_${Y}) ]]; then
    # remove comments, leading spaces, and convert
    # spaces to comma, swap lat,lon, then import
    cat ${FILE} \
      | grep -v "^%" \
      | sed s/^\ *//g \
      | sed s/\ \ \*/,/g \
      | cut -d"," -f1,2,${col} \
      | awk -F, '{print $2 "|" $1 "|" $3}' \
      | m.proj -i input=- \
      | r.in.xyz input=- output=dh_${Y}_unfiltered
  fi
done

parallel "r.mfilter -z input=dh_{1}_unfiltered output=dh_{1} filter=./tmp/elev_filter.txt repeat=2" ::: $(seq 1995 2019)
parallel "r.colors map=dh_{1} color=difference" ::: $(seq 1995 2019)
#+END_SRC


**** DEM

+ Merge Khan dh/dt w/ PRODEM to generate annual DEMs

#+BEGIN_SRC bash :exports both :results verbatim
MSG_OK "DEM"
g.mapset -c DEM

g.region raster=DEM_2020@PRODEM -pa
for y in {2019..2022}; do
  r.mapcalc "DEM_${y} = DEM_${y}@PRODEM"
done

for y in {2019..1995}; do
  y1=$(( ${y} + 1 ))
  r.mapcalc "DEM_${y} = DEM_${y1} - dh_${y}@Khan_2016"
done
#+END_SRC

** Find Gates
:PROPERTIES:
:header-args:bash+: :tangle gate_IO.sh
:END:

*** Algorithm
+ [X] Find all fast-moving ice (>X m yr^{-1})
  + Results not very sensitive to velocity limit (10 to 100 m yr^{-1} examined)
+ [X] Find grounding line by finding edge cells where fast-moving ice borders water or ice shelf based (loosely) on BedMachine mask
+ [X] Move grounding line cells inland by X km, again limiting to regions of fast ice.
  + Results not very sensitive to gate position (1 - 5 km range examined)

+ [X] Discard gates if group size \in [1,2]
+ [X] Manually clean a few areas (e.g. land-terminating glaciers, gates due to invalid masks, etc.) by manually selecting invalid regions in Google Earth, then remove gates in these regions

Note that "fast ice" refers to flow velocity, not the sea ice term of "stuck to the land".

INSTRUCTIONS: Set VELOCITY_CUTOFF and BUFFER_DIST to 50 and 2500 respectively and run the code. Then repeat for a range of other velocity cutoffs and buffer distances to get a range of sensitivities.

OR: Tangle via ((org-babel-tangle) the code below (C-c C-v C-t or ) to [[./gate_IO.sh]] and then run this in a GRASS session:
#+BEGIN_SRC bash :results verbatim :tangle gate_IO_runner.sh
<<MSGS_pretty_print>>
<<GRASS_config>>

VELOCITY_CUTOFF=100
BUFFER_DIST=5000
. ./gate_IO.sh
#+END_SRC

Create a new mapset for this specific velocity cutoff and buffer distance

#+BEGIN_SRC bash :results verbatim
g.mapset -c gates_vel_buf
g.region -d
#+END_SRC

From above:

+ [X] Find grounding line by finding edge cells where fast-moving ice borders water or ice shelf based (loosely) on BedMachine mask

The "loosely" is because the BedMachine mask doesn't always reach into each fjord all the way. I buffer the BedMachine mask by 2 km here so that it extends to the edge of the velocity data.

#+BEGIN_SRC bash :results verbatim
g.copy raster=mask_ice@BedMachine,mask_ice --o
# Grow by 2 km (10 cells @ 200 m/cell)
r.grow input=mask_ice output=mask_ice_grow radius=10 new=1 --o
r.mask mask_ice_grow
#+END_SRC

The fast ice edge is where there is fast-flowing ice overlapping with not-ice.

#+BEGIN_SRC bash :results verbatim
r.mapcalc "fast_ice = if(vel_baseline@MEaSUREs.0478 > ${VELOCITY_CUTOFF}, 1, null())" --o
r.mask -r

# no velocity data, or is flagged as ice shelf or land in BedMachine
r.mapcalc "not_ice = if(isnull(vel_baseline@MEaSUREs.0478) ||| (mask@BedMachine == 0) ||| (mask@BedMachine == 3), 1, null())" --o

r.grow input=not_ice output=not_ice_grow radius=1.5 new=99 --o
r.mapcalc "fast_ice_edge = if(((not_ice_grow == 99) && (fast_ice == 1)), 1, null())" --o
#+END_SRC

The gates are set ${BUFFER_DIST} inland from the fast ice edge. This is done by buffering the fast ice edge (which fills the space between the fast ice edge and buffer extent) and then growing the buffer by 1. This last step defines the gate locations.

However, in order to properly estimate discharge, the gate location is not enough. Ice must flow from outside the gates, through the gates, to inside the gates, and not flow from one gate pixel to another gate pixel (or it would be counted 2x). 

#+BEGIN_SRC bash :results verbatim
r.buffer input=fast_ice_edge output=fast_ice_buffer distances=${BUFFER_DIST} --o
r.grow input=fast_ice_buffer output=fast_ice_buffer_grow radius=1.5 new=99 --o
r.mask -i not_ice --o
r.mapcalc "gates_inside = if(((fast_ice_buffer_grow == 99) && (fast_ice == 1)), 1, null())" --o
r.mask -r

r.grow input=gates_inside output=gates_inside_grow radius=1.1 new=99 --o
r.mask -i not_ice --o
r.mapcalc "gates_maybe = if(((gates_inside_grow == 99) && (fast_ice == 1) && isnull(fast_ice_buffer)), 1, null())" --o
r.mask -r

r.grow input=gates_maybe output=gates_maybe_grow radius=1.1 new=99 --o
r.mask -i not_ice --o
r.mapcalc "gates_outside = if(((gates_maybe_grow == 99) && (fast_ice == 1) && isnull(fast_ice_buffer) && isnull(gates_inside)), 1, null())" --o
r.mask -r

r.mapcalc "gates_IO = 0" --o
r.mapcalc "gates_IO = if(isnull(gates_inside), gates_IO, 1)" --o
r.mapcalc "gates_IO = if(isnull(gates_outside), gates_IO, -1)" --o

r.colors map=gates_inside color=red
r.colors map=gates_maybe color=grey
r.colors map=gates_outside color=blue
r.colors map=gates_IO color=viridis
#+END_SRC

+ For each gate, split into two for the vector components of the velocity, then...
+ If flow is from gate to INSIDE, it is discharged
+ If flow is from gate to GATE, it is ignored
+ If flow is from gate to NOT(GATE || INSIDE) it is ignored
  + If gates are a closed loop, such as the 1700 m flight-line, then
    this scenario would be NEGATIVE discharge, not ignored. This was
    tested with the 1700 m flight-line and compared against both the
    vector calculations and WIC estimates.

#+NAME: tbl_velocity
| var            | value  | meaning           |
|----------------+--------+-------------------|
| vx             | > 0    | east / right      |
| vx             | < 0    | west / left       |
| vy             | > 0    | north / up        |
| vy             | < 0    | south / down      |
|----------------+--------+-------------------|
| GRASS indexing | [0,1]  | cell to the right |
|                | [0,-1] | left              |
|                | [-1,0] | above             |
|                | [1,0]  | below             |

#+BEGIN_SRC bash :results verbatim
# g.mapset -c gates_50_2500

r.mask -r

r.mapcalc "gates_x = 0" --o
r.mapcalc "gates_x = if((gates_maybe == 1) && (vx_baseline@MEaSUREs.0478 > 0), gates_IO[0,1], gates_x)" --o
r.mapcalc "gates_x = if((gates_maybe != 0) && (vx_baseline@MEaSUREs.0478 < 0), gates_IO[0,-1], gates_x)" --o

r.mapcalc "gates_y = 0" --o
r.mapcalc "gates_y = if((gates_maybe != 0) && (vy_baseline@MEaSUREs.0478 > 0), gates_IO[-1,0], gates_y)" --o
r.mapcalc "gates_y = if((gates_maybe != 0) && (vy_baseline@MEaSUREs.0478 < 0), gates_IO[1,0], gates_y)" --o

r.mapcalc "gates_x = if(gates_x == 1, 1, 0)" --o
r.mapcalc "gates_y = if(gates_y == 1, 1, 0)" --o

r.null map=gates_x null=0 # OR r.null map=gates_x setnull=0
r.null map=gates_y null=0 # OR r.null map=gates_y setnull=0
#+END_SRC
*** Clean Gates                                                    :noexport:
**** Subset to where there is known discharge
#+BEGIN_SRC bash :results verbatim
r.mapcalc "gates_xy_clean00 = if((gates_x == 1) || (gates_y == 1), 1, null())" --o
r.mapcalc "gates_xy_clean0 = if(gates_xy_clean00 & if(DEM_2019@DEM), 1, null())" --o
#+END_SRC

**** Remove small areas (clusters <X cells)
#+BEGIN_SRC bash :results verbatim
# Remove clusters of 2 or less. How many hectares in X pixels?
# frink "(200 m)^2 * 2 -> hectares" # ans: 8.0

r.clump -d input=gates_xy_clean0 output=gates_gateID --o
r.reclass.area -d input=gates_gateID output=gates_area value=9 mode=lesser method=reclass --o

r.mapcalc "gates_xy_clean1 = if(isnull(gates_area), gates_xy_clean0, null())" --o
#+END_SRC


**** Limit to Mouginot 2019 mask
+ Actually, limit to approximate Mouginot 2019 mask - its a bit narrow in some places
#+BEGIN_SRC bash :results verbatim
# r.mask mask_GIC@Mouginot_2019 --o
r.grow input=mask_GIC@Mouginot_2019 output=mask_GIC_Mouginot_2019_grow radius=4.5 # three cells
r.mask mask_GIC_Mouginot_2019_grow --o
r.mapcalc "gates_xy_clean2 = gates_xy_clean1" --o
r.mask -r

# r.univar map=gates_xy_clean1
# r.univar map=gates_xy_clean2
#+END_SRC

**** Remove gates in areas from manually-drawn KML mask
+ See [[./dat/remove_gates_manual.kml]]
#+BEGIN_SRC bash :results verbatim
v.import input=./dat/remove_gates_manual.kml output=remove_gates_manual --o
r.mask -i vector=remove_gates_manual --o
r.mapcalc "gates_xy_clean3 = gates_xy_clean2" --o
r.mask -r

r.univar map=gates_xy_clean2
r.univar map=gates_xy_clean3
#+END_SRC

*** Final Gates
#+BEGIN_SRC bash :results verbatim
g.copy "gates_xy_clean3,gates_final" --o
#+end_src

*** Add meta-data to gates
Add:
+ Gate ID
+ Calculate the average x,y of the gate, and then from that ONE point, determine the following. Do this from the average point rather than for each gate pixel because some gates span multiple sectors, or different ends of the gate are nearer different names, etc.
  + Average lon,lat of gate
  + Nearest citet:mouginot_2019_glacier region, sector, and name
  + Nearest citet:bjork_2015_brief name

Do this for both the area vector and the point vector so that we can export
+ KML and GeoPackage with gates and metadata
+ simple CSV w/ gates and metadata.

**** Gate ID
#+BEGIN_SRC bash :results verbatim

# db.droptable -f table=gates_final
# db.droptable -f table=gates_final_pts

# areas (clusters of gate pixels, but diagonals are separate)
r.to.vect input=gates_final output=gates_final type=area --o
v.db.dropcolumn map=gates_final column=label
v.db.dropcolumn map=gates_final column=value
v.db.addcolumn map=gates_final columns="gate INT"
v.what.rast map=gates_final raster=gates_gateID column=gate type=centroid

# # points (each individual gate pixel)
# r.to.vect input=gates_final output=gates_final_pts type=point --o
# v.db.dropcolumn map=gates_final_pts column=label
# v.db.dropcolumn map=gates_final_pts column=value
# v.db.addcolumn map=gates_final_pts columns="gate INT"
# v.what.rast map=gates_final_pts raster=gates_gateID column=gate type=point
#+END_SRC
**** Mean x,y
#+BEGIN_SRC bash :results verbatim
# v.db.addcolumn map=gates_final columns="x DOUBLE PRECSION, y DOUBLE PRECISION, mean_x INT, mean_y INT, area INT"
v.db.addcolumn map=gates_final columns="mean_x INT, mean_y INT"
v.to.db map=gates_final option=coor columns=x,y units=meters
v.to.db map=gates_final option=area columns=area units=meters

for G in $(db.select -c sql="select gate from gates_final"|sort -n|uniq); do
  db.execute sql="UPDATE gates_final SET mean_x=(SELECT AVG(x) FROM gates_final WHERE gate == ${G}) where gate == ${G}"
  db.execute sql="UPDATE gates_final SET mean_y=(SELECT AVG(y) FROM gates_final WHERE gate == ${G}) where gate == ${G}"
done

v.out.ascii -c input=gates_final columns=gate,mean_x,mean_y | cut -d"|" -f4- | sort -n|uniq | v.in.ascii input=- output=gates_final_pts skip=1 cat=1 x=2 y=3 --o
v.db.addtable gates_final_pts
v.db.addcolumn map=gates_final_pts columns="gate INT"
v.db.update map=gates_final_pts column=gate query_column=cat

#v.db.addcolumn map=gates_final_pts columns="mean_x INT, mean_y INT"
v.to.db map=gates_final_pts option=coor columns=mean_x,mean_y units=meters
#+END_SRC

Here we have:
#+BEGIN_SRC bash :results verbatim :tangle no
db.select table=gates_final|head -n10 # cat|gate|x|y|mean_x|mean_y
db.select table=gates_final_pts|head # cat|gate|mean_x|mean_y
#+END_SRC

**** Mean lon,lat
#+BEGIN_SRC bash :results verbatim
v.what.rast map=gates_final_pts raster=lon@PERMANENT column=lon
v.what.rast map=gates_final_pts raster=lat@PERMANENT column=lat

v.db.addcolumn map=gates_final columns="mean_lon DOUBLE PRECISION, mean_lat DOUBLE PRECISION"
for G in $(db.select -c sql="select gate from gates_final"|sort -n|uniq); do
    db.execute sql="UPDATE gates_final SET mean_lon=(SELECT lon FROM gates_final_pts WHERE gate = ${G}) where gate = ${G}"
    db.execute sql="UPDATE gates_final SET mean_lat=(SELECT lat FROM gates_final_pts WHERE gate = ${G}) where gate = ${G}"
done
#+END_SRC

**** Sector, Region, Names, etc.
+ Sector Number
+ Region Code
+ Nearest Sector or Glacier Name
#+BEGIN_SRC bash :results verbatim
v.db.addcolumn map=gates_final columns="sector INT"
v.db.addcolumn map=gates_final_pts columns="sector INT"
v.distance from=gates_final to=sectors@Mouginot_2019 upload=to_attr column=sector to_column=cat
v.distance from=gates_final_pts to=sectors@Mouginot_2019 upload=to_attr column=sector to_column=cat

v.db.addcolumn map=gates_final columns="region VARCHAR(2)"
v.db.addcolumn map=gates_final_pts columns="region VARCHAR(2)"
v.distance from=gates_final to=sectors@Mouginot_2019 upload=to_attr column=region to_column=SUBREGION1
v.distance from=gates_final_pts to=sectors@Mouginot_2019 upload=to_attr column=region to_column=SUBREGION1

v.db.addcolumn map=gates_final columns="Mouginot_2019 VARCHAR(99)"
v.db.addcolumn map=gates_final_pts columns="Mouginot_2019 VARCHAR(99)"
v.distance from=gates_final to=sectors@Mouginot_2019 upload=to_attr column=Mouginot_2019 to_column=NAME
v.distance from=gates_final_pts to=sectors@Mouginot_2019 upload=to_attr column=Mouginot_2019 to_column=NAME

v.db.addcolumn map=gates_final columns="Bjork_2015 VARCHAR(99)"
v.db.addcolumn map=gates_final_pts columns="Bjork_2015 VARCHAR(99)"
v.distance from=gates_final to=names@Bjork_2015 upload=to_attr column=Bjork_2015 to_column=name
v.distance from=gates_final_pts to=names@Bjork_2015 upload=to_attr column=Bjork_2015 to_column=name

v.db.addcolumn map=gates_final columns="Zwally_2012 INT"
v.db.addcolumn map=gates_final_pts columns="Zwally_2012 INT"
v.distance from=gates_final to=Zwally_2012@Zwally_2012 upload=to_attr column=Zwally_2012 to_column=cat_
v.distance from=gates_final_pts to=Zwally_2012@Zwally_2012 upload=to_attr column=Zwally_2012 to_column=cat_

v.db.addcolumn map=gates_final columns="Moon_2008 INT"
v.db.addcolumn map=gates_final_pts columns="Moon_2008 INT"
v.distance from=gates_final to=GlacierIDs@NSIDC_0642 upload=to_attr column=Moon_2008 to_column=GlacierID
v.distance from=gates_final_pts to=GlacierIDs@NSIDC_0642 upload=to_attr column=Moon_2008 to_column=GlacierID

v.db.addcolumn map=gates_final columns="Moon_2008_dist INT"
v.db.addcolumn map=gates_final_pts columns="Moon_2008_dist INT"
v.distance from=gates_final to=GlacierIDs@NSIDC_0642 upload=dist column=Moon_2008_dist
v.distance from=gates_final_pts to=GlacierIDs@NSIDC_0642 upload=dist column=Moon_2008_dist

v.db.addcolumn map=gates_final columns="n_pixels INT"
v.db.addcolumn map=gates_final_pts columns="n_pixels INT"
for G in $(db.select -c sql="select gate from gates_final"|sort -n|uniq); do
    db.execute sql="UPDATE gates_final SET n_pixels=(SELECT SUM(area)/(200*200) FROM gates_final WHERE gate = ${G}) where gate = ${G}"
    # now copy that to the average gate location (point) table
    db.execute sql="UPDATE gates_final_pts SET n_pixels = (SELECT n_pixels FROM gates_final WHERE gate = ${G}) WHERE gate = ${G}"
done
#+END_SRC
**** Clean up
#+BEGIN_SRC bash :results verbatim
db.dropcolumn -f table=gates_final column=area
# db.dropcolumn -f table=gates_final column=cat
#+END_SRC

**** Export as metadata CSV
#+BEGIN_SRC bash :results verbatim
mkdir -p out
db.select sql="SELECT gate,mean_x,mean_y,lon,lat,n_pixels,sector,region,Bjork_2015,Mouginot_2019,Zwally_2012,Moon_2008,Moon_2008_dist from gates_final_pts" separator=, | sort -n | uniq  > ./out/gate_meta.csv
#+END_SRC

*** Export Gates to KML                                            :noexport:
#+BEGIN_SRC bash :results verbatim
v.out.ogr input=gates_final output=./tmp/gates_final_${VELOCITY_CUTOFF}_${BUFFER_DIST}.kml format=KML --o
# open ./tmp/gates_final_${VELOCITY_CUTOFF}_${BUFFER_DIST}.kml
#+END_SRC

*** Sensitivity of results to gate distance and cutoff velocity
:PROPERTIES:
:header-args:bash+: :tangle no
:END:

Run the gate detection algorithm at a variety of cutoff velocities and buffer distances
#+BEGIN_SRC bash :results verbatim :tangle no
for VELOCITY_CUTOFF in 10 20 30 40 50 60 70 80 90 100 125 150; do
  for BUFFER_DIST in 1000 2000 3000 4000 5000 6000 7000 8000 9000; do
      . ./gate_IO.sh
  done
done
#+END_SRC

**** Heatmap
***** Compute
#+BEGIN_SRC bash :results verbatim
rm ./tmp/gate_test.dat
for M in $(g.mapset -l | tr ' ' '\n' | grep gates); do
  g.mapset ${M} --quiet
  r.mask -r --quiet
  g.region -d

  ### To generate this heatmap for a sub-region or single glacier, PRIOR to
  ### this in PERMANENT mapset, zoom in, then "set computational region extent from display",
  ### then save w/ "g.region save=SUBREGION --o", then in the loop zoom in on each mapset with:
  # g.region res=200 align=vel_baseline@MEaSUREs.0478 -pa
  # g.region region=SUBREGION@PERMANENT --o -pa

  r.mapcalc "vel_eff = (if(gates_x == 1, abs(vx_baseline@MEaSUREs.0478), 0) + if(gates_y == 1, abs(vy_baseline@MEaSUREs.0478), 0))" --o
  r.mask gates_final --o
  # frink "(m/yr * m) * m * kg/m^3 * 1E12 -> Gt/yr"

  ### simple D w/ "raw" unadjusted thickness
  r.mapcalc "tmp_D = (vel_eff * 200) * thickness@BedMachine * 917 / pow(10.0, 12)" --o

  ### D w/ adjusted thickness
  # in BedMachine mapset, from the OLS fits.summary()
  # r.mapcalc "thick_fit_adj=if(thickness<20,380*log(vel_baseline@MEaSUREs.0478,10)-380,thickness)"
  # r.mapcalc "tmp_D = (vel_eff * 200) * thick_fit_adj@BedMachine * 917 / pow(10.0, 12)" --o

  r.univar tmp_D | grep sum
  echo ${M} $(r.univar tmp_D | grep sum) >> ./tmp/gate_test.dat
  g.remove -f type=raster name=tmp_D
done
#+END_SRC

#+BEGIN_SRC bash :results verbatim
cat ./tmp/gate_test.dat | sort
#+END_SRC

***** Display

#+BEGIN_SRC jupyter-python :session v_b_compare :exports results :results raw drawer :display text/org
# %matplotlib qt5
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from matplotlib import rc
rc('font', size=12)
rc('text', usetex=False)

df0 = pd.read_csv('./tmp/gate_test.dat', sep=" ", names=['param','D'], usecols=((0,2)), index_col=0)
vel = np.sort(np.unique([_.split('_')[1] for _ in df0.index.values.astype(str)]).astype(int))
buf = np.unique([_.split('_')[2] for _ in df0.index.values.astype(str)]).astype(int)
df = pd.DataFrame(columns=vel, index=buf)
for v in vel:
    for b in buf:
        idx='gates_'+str(v)+'_'+str(b)
        df.loc[b,v] = np.float(df0.loc[idx].values[0])

df = df.apply(pd.to_numeric)
df_int = df.apply(pd.to_numeric).round().astype(int)

fig = plt.figure(1, figsize=(8,6)) # w,h
fig.clf()
fig.set_tight_layout(True)
ax = fig.add_subplot(111)

sns.set()

im = sns.heatmap(df,
                 annot=df_int, annot_kws={"size":12},
                 vmin=440, vmax=490,
                 # vmin=470, vmax=510,
                 cbar_kws={'label':'Unadjusted Baseline Discharge [Gt yr$^{-1}$]'},
                           #, 'extend':'min'},
                           # "ticks":[470,480,490,500,510]},
                 fmt='d',
                 ax=ax)

plt.yticks(rotation=0)
ax.text(0.5, -0.1, 'Cutoff Velocity [m yr$^{-1}$]',
        transform=ax.transAxes, horizontalalignment='center')
ax.text(-0.14, 0.5, 'Distance from terminus [m]',
        rotation='vertical',
        transform=ax.transAxes, verticalalignment='center')

       
plt.savefig('./figs/heatmap_all.png', transparent=True, bbox_inches='tight', dpi=300)
plt.savefig('./figs/heatmap_all.pdf', bbox_inches='tight')

df.round()
#+END_SRC

** Effective Velocity
:PROPERTIES:
:header-args:bash+: :tangle vel_eff.sh
:END:

#+BEGIN_SRC bash :results verbatim
<<MSGS_pretty_print>>
<<GRASS_config>>
#+END_SRC


*** NOTDONE All Mapsets
Effective velocity (because gates may only be valid in =x= or =y= direction) was calculated for the sensitivity test above at one time, but for all gate locations (buffer dist and speed cutoff). Now we need to calculate it at all times

#+BEGIN_SRC bash :results verbatim :tangle no
g.mapsets gates_vel_buf
r.mask -r

mapset=$(g.mapset -l | tr ' ' '\n' | grep -E gates_??_????| head -n1) # DEBUG
for mapset in $(g.mapset -l | tr ' ' '\n' | grep -E gates_??_????); do
  g.mapset ${mapset} --quiet

  g.region -d
  r.mapcalc "MASK = if((gates_x == 1) | (gates_y == 1), 1, null())" --o
  VX=$(g.list -m type=raster pattern=VX_????_??_?? mapset=* | head -n1) # DEBUG
  for VX in $(g.list -m type=raster pattern=VX_????_??_?? mapset=*); do
    VY=${VX/VX/VY}
    EX=${VX/VX/EX}
    EY=${VX/VX/EY}
    DATE=$(echo $VX | cut -d"_" -f2- | cut -d@ -f1)
    echo $DATE
    r.mapcalc "vel_eff_${DATE} = if(gates_x == 1, if(${VX} == -2*10^9, 0, abs(${VX})), 0) + if(gates_y == 1, if(${VY} == -2*10^9, 0, abs(${VY})), 0)"
    r.mapcalc "err_eff_${DATE} = if(gates_x == 1, if(${EX} == -2*10^9, 0, abs(${EX})), 0) + if(gates_y == 1, if(${EY} == -2*10^9, 0, abs(${EY})), 0)"
  done

  VX=$(g.list -m type=raster pattern=vx_????_??_?? mapset=Sentinel1 | head -n1) # DEBUG
  for VX in $(g.list -m type=raster pattern=vx_????_??_?? mapset=Sentinel1); do
    VY=${VX/vx/vy}
    EX=${VX/vx/ex}
    EY=${VX/vx/ey}
    DATE=$(echo $VX | cut -d"_" -f2- | cut -d@ -f1)
    echo $DATE
    r.mapcalc "vel_eff_${DATE} = 365 * (if(gates_x@gates_50_2500 == 1, if(isnull(${VX}), 0, abs(${VX}))) + if(gates_y == 1, if(isnull(${VY}), 0, abs(${VY}))))"
    r.mapcalc "err_eff_${DATE} = 365 * (if(gates_x@gates_50_2500 == 1, if(isnull(${EX}), 0, abs(${EX}))) + if(gates_y == 1, if(isnull(${EY}), 0, abs(${EY}))))"
  done
done


#+END_SRC

*** Just one velocity cutoff & buffer distance
:PROPERTIES:
:ID:       20210102T152009.186822
:END:

#+BEGIN_SRC bash :results verbatim
g.mapsets -l

r.mask -r

MAPSET=gates_vel_buf

g.mapset MEaSUREs.0478
g.region -d
r.mapcalc "MASK = if((gates_x@${MAPSET} == 1) | (gates_y@${MAPSET} == 1), 1, null())" --o
dates=$(g.list type=raster pattern=VX_????_??_?? | cut -d"_" -f2-)
parallel --bar "r.mapcalc \"vel_eff_{1} = if(gates_x@${MAPSET} == 1, if(VX_{1} == -2*10^9, 0, abs(VX_{1})), 0) + if(gates_y@${MAPSET} == 1, if(VY_{1} == -2*10^9, 0, abs(VY_{1})), 0)\"" ::: ${dates}
parallel --bar "r.mapcalc \"err_eff_{1} = if(gates_x@${MAPSET} == 1, if(EX_{1} == -2*10^9, 0, abs(EX_{1})), 0) + if(gates_y@${MAPSET} == 1, if(EY_{1} == -2*10^9, 0, abs(EY_{1})), 0)\"" ::: ${dates}


g.mapset MEaSUREs.0481
g.region -d
r.mapcalc "MASK = if((gates_x@${MAPSET} == 1) | (gates_y@${MAPSET} == 1), 1, null())" --o
dates=$(g.list type=raster pattern=VX_????_??_?? | cut -d"_" -f2-)
parallel --bar "r.mapcalc \"vel_eff_{1} = if(gates_x@${MAPSET} == 1, if(isnull(VX_{1}), 0, abs(VX_{1})), 0) + if(gates_y@${MAPSET} == 1, if(isnull(VY_{1}), 0, abs(VY_{1})), 0)\"" ::: ${dates}
parallel --bar "r.mapcalc \"err_eff_{1} = if(gates_x@${MAPSET} == 1, if(isnull(EX_{1}), 0, abs(EX_{1})), 0) + if(gates_y@${MAPSET} == 1, if(isnull(EY_{1}), 0, abs(EY_{1})), 0)\"" ::: ${dates}


g.mapset MEaSUREs.0646
g.region -d
r.mapcalc "MASK = if((gates_x@${MAPSET} == 1) | (gates_y@${MAPSET} == 1), 1, null())" --o
dates=$(g.list type=raster pattern=VX_????_??_?? | cut -d"_" -f2-)
parallel --bar "r.mapcalc \"vel_eff_{1} = if(gates_x@${MAPSET} == 1, if(isnull(VX_{1}), 0, abs(VX_{1})), 0) + if(gates_y@${MAPSET} == 1, if(isnull(VY_{1}), 0, abs(VY_{1})), 0)\"" ::: ${dates}
parallel --bar "r.mapcalc \"err_eff_{1} = if(gates_x@${MAPSET} == 1, if(isnull(EX_{1}), 0, abs(EX_{1})), 0) + if(gates_y@${MAPSET} == 1, if(isnull(EY_{1}), 0, abs(EY_{1})), 0)\"" ::: ${dates}


g.mapset MEaSUREs.0731
g.region -d
r.mapcalc "MASK = if((gates_x@${MAPSET} == 1) | (gates_y@${MAPSET} == 1), 1, null())" --o
dates=$(g.list type=raster pattern=VX_????_??_?? | cut -d"_" -f2-)
parallel --bar "r.mapcalc \"vel_eff_{1} = if(gates_x@${MAPSET} == 1, if(isnull(VX_{1}), 0, abs(VX_{1})), 0) + if(gates_y@${MAPSET} == 1, if(isnull(VY_{1}), 0, abs(VY_{1})), 0)\"" ::: ${dates}
parallel --bar "r.mapcalc \"err_eff_{1} = if(gates_x@${MAPSET} == 1, if(isnull(EX_{1}), 0, abs(EX_{1})), 0) + if(gates_y@${MAPSET} == 1, if(isnull(EY_{1}), 0, abs(EY_{1})), 0)\"" ::: ${dates}

g.mapset Mouginot_pre2000
g.region -d
r.mapcalc "MASK = if((gates_x@${MAPSET} == 1) | (gates_y@${MAPSET} == 1), 1, null())" --o
VX=$(g.list type=raster pattern=vx_????_??_?? | head -n1) # DEBUG
for VX in $(g.list type=raster pattern=vx_????_??_??); do
  VY=${VX/vx/vy}
  DATE=$(echo $VX | cut -d"_" -f2-)
  echo $DATE
  r.mapcalc "vel_eff_${DATE} = if(gates_x@${MAPSET} == 1, if(isnull(${VX}), 0, abs(${VX})), 0) + if(gates_y@${MAPSET} == 1, if(isnull(${VY}), 0, abs(${VY})), 0)"
done

#+END_SRC

#+NAME: MEaSUREs_0766_effective_velocity
#+BEGIN_SRC bash
g.mapset MEaSUREs.0766
g.region -d
r.mapcalc "MASK = if((gates_x@${MAPSET} == 1) | (gates_y@${MAPSET} == 1), 1, null())" --o
dates=$(g.list type=raster pattern=VX_????_??_?? | cut -d"_" -f2-)
parallel --bar "r.mapcalc \"vel_eff_{1} = if(gates_x@${MAPSET} == 1, if(isnull(VX_{1}), 0, abs(VX_{1})), 0) + if(gates_y@${MAPSET} == 1, if(isnull(VY_{1}), 0, abs(VY_{1})), 0)\"" ::: ${dates}
parallel --bar "r.mapcalc \"err_eff_{1} = if(gates_x@${MAPSET} == 1, if(isnull(EX_{1}), 0, abs(EX_{1})), 0) + if(gates_y@${MAPSET} == 1, if(isnull(EY_{1}), 0, abs(EY_{1})), 0)\"" ::: ${dates}
#+END_SRC


#+NAME: promice_effective_velocity
#+BEGIN_SRC bash :results verbatim
g.mapset promice
g.region -d

dates=$(g.list type=raster pattern=vx_????_??_?? | cut -d"_" -f2-)

parallel --bar "r.mapcalc \"vel_eff_{1} = 365 * (if(gates_x@${MAPSET} == 1, if(isnull(vx_{1}), 0, abs(vx_{1})), 0) + if(gates_y@${MAPSET} == 1, if(isnull(vy_{1}), 0, abs(vy_{1})), 0))\"" ::: ${dates}

parallel --bar "r.mapcalc \"err_eff_{1} = 365 * (if(gates_x@${MAPSET} == 1, if(isnull(ex_{1}), 0, abs(ex_{1})), 0) + if(gates_y@${MAPSET} == 1, if(isnull(ey_{1}), 0, abs(ey_{1})), 0))\"" ::: ${dates}
#+END_SRC


#+BEGIN_SRC bash :results verbatim
# fix return code of this script so make continues
MSG_OK "vel_eff DONE" 
#+END_SRC

** Export all data to CSV
:PROPERTIES:
:header-args:bash+: :tangle export.sh
:END:

#+BEGIN_SRC bash :results verbatim
<<MSGS_pretty_print>>
<<GRASS_config>>
#+END_SRC

#+NAME: export
#+BEGIN_SRC bash :results output
MSG_OK "Exporting..."
g.mapset PERMANENT
g.region -dp

MAPSET=gates_vel_buf

VEL_baseline="vel_baseline@MEaSUREs.0478 vx_baseline@MEaSUREs.0478 vy_baseline@MEaSUREs.0478 vel_err_baseline@MEaSUREs.0478 ex_baseline@MEaSUREs.0478 ey_baseline@MEaSUREs.0478"
VEL_0478=$(g.list -m mapset=MEaSUREs.0478 type=raster pattern=vel_eff_????_??_?? separator=space)
ERR_0478=$(g.list -m mapset=MEaSUREs.0478 type=raster pattern=err_eff_????_??_?? separator=space)
VEL_0481=$(g.list -m mapset=MEaSUREs.0481 type=raster pattern=vel_eff_????_??_?? separator=space)
ERR_0481=$(g.list -m mapset=MEaSUREs.0481 type=raster pattern=err_eff_????_??_?? separator=space)
VEL_0646=$(g.list -m mapset=MEaSUREs.0646 type=raster pattern=vel_eff_????_??_?? separator=space)
ERR_0646=$(g.list -m mapset=MEaSUREs.0646 type=raster pattern=err_eff_????_??_?? separator=space)
VEL_0731=$(g.list -m mapset=MEaSUREs.0731 type=raster pattern=vel_eff_????_??_?? separator=space)
ERR_0731=$(g.list -m mapset=MEaSUREs.0731 type=raster pattern=err_eff_????_??_?? separator=space)
VEL_0766=$(g.list -m mapset=MEaSUREs.0766 type=raster pattern=vel_eff_????_??_?? separator=space)
ERR_0766=$(g.list -m mapset=MEaSUREs.0766 type=raster pattern=err_eff_????_??_?? separator=space)
VEL_SENTINEL=$(g.list -m mapset=promice type=raster pattern=vel_eff_????_??_?? separator=space)
ERR_SENTINEL=$(g.list -m mapset=promice type=raster pattern=err_eff_????_??_?? separator=space)
VEL_MOUGINOT=$(g.list -m mapset=Mouginot_pre2000 type=raster pattern=vel_eff_????_??_?? separator=space)
THICK=$(g.list -m mapset=DEM type=raster pattern=DEM_???? separator=space)
GIMP_0715="dem@GIMP.0715 day@GIMP.0715" # ,err@GIMP.0715

LIST="lon lat err_2D gates_x@${MAPSET} gates_y@${MAPSET} gates_gateID@${MAPSET} sectors@Mouginot_2019 regions@Mouginot_2019 bed@BedMachine thickness@BedMachine surface@BedMachine thickness@Bamber_2013 ${THICK} ${GIMP_0715} ${VEL_baseline} ${VEL_0478}
${VEL_0481} ${VEL_0646} ${VEL_0731} ${VEL_0766} ${VEL_SENTINEL} ${VEL_MOUGINOT} errbed@BedMachine ${ERR_0478} ${ERR_0481} ${ERR_0646} ${ERR_0731} ${ERR_0766} ${ERR_SENTINEL}"

mkdir tmp/dat
r.mapcalc "MASK = if(gates_final@${MAPSET}) | if(dem@GIMP.0715) | if(mask_GIC@Mouginot_2019) | if(vel_err_baseline@MEaSUREs.0478) | if(DEM_2020@DEM)" --o
parallel --bar "if [[ ! -e ./tmp/dat/{1}.bsv ]]; then (echo x\|y\|{1}; r.out.xyz input={1}) > ./tmp/dat/{1}.bsv; fi" ::: ${LIST}
r.mask -r

# combine individual files to one mega csv
cat ./tmp/dat/lat.bsv | cut -d"|" -f1,2 | datamash -t"|" transpose > ./tmp/dat_100_5000_t.bsv
for f in ./tmp/dat/*; do
  cat $f | cut -d"|" -f3 | datamash -t"|" transpose >> ./tmp/dat_100_5000_t.bsv
done
cat ./tmp/dat_100_5000_t.bsv |datamash -t"|" transpose | tr '|' ',' > ./tmp/dat_100_5000.csv
rm ./tmp/dat_100_5000_t.bsv
#+END_SRC

** Compute Errors
:PROPERTIES:
:header-args:jupyter-python+: :tangle errors.py
:END:

*** Velocity v Thickness Errors
+ Is velocity uncertainty important relative to thickness uncertainty?
  + ANS: No, proportional velocity uncertainty is an order of magnitude less than thickness uncertainty.
#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/plain :tangle no
import pandas as pd
import numpy as np

df = pd.read_csv("./tmp/dat_100_5000.csv")

thick = df['thickness@BedMachine'].copy()
thick[thick < 50] = 50  # IS THIS REASONABLE? IMPORTANT?
thick[thick == 0] = 1
thick_err = np.abs(df['errbed@BedMachine'].values)


vel = df['vel_baseline@MEaSUREs.0478']
vel_err = df['vel_err_baseline@MEaSUREs.0478']

print("Relative thickness error:")
print((thick_err/thick*100).describe())
print("\n\nRelative velocity error:")
print((vel_err/vel*100).describe())

# import matplotlib.pyplot as plt
# plt.clf()
# ax = plt.hexbin((thick_err/thick), (vel_err/vel), mincnt=1, bins='log', xscale='log', yscale='log')
# plt.xlabel('Relative Thickness Error [Log_10]')
# plt.ylabel('Relative Velocity Error [Log_10]')
#+END_SRC

*** Do velocity errors scale w/ velocity?
+ ANS: Not really.
#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/plain :tangle no
import pandas as pd
import numpy as np
import datetime

# df = pd.read_csv("./tmp/dat_100_5000.csv")
# vel = df['vel_baseline@MEaSUREs.0478']
# vel_err = df['vel_err_baseline@MEaSUREs.0478']


vel = pd.read_csv("./tmp/dat_100_5000.csv", usecols=(lambda c: ('vel_eff' in c)))
vel.rename(columns=lambda c: datetime.datetime(int(c[8:12]), int(c[13:15]), int(c[16:18])), inplace=True)
vel.replace(0, np.nan, inplace=True)
# vel = vel.loc[:,vel.columns.year < 2018] # drop 2018
vel.sort_index(axis='columns', inplace=True)

vel_err = pd.read_csv("./tmp/dat_100_5000.csv", usecols=(lambda c: ('err_eff' in c)))
vel_err.rename(columns=lambda c: datetime.datetime(int(c[8:12]), int(c[13:15]), int(c[16:18])), inplace=True)
# vel_err = vel_err.loc[:,vel_err.columns.year < 2018] # drop 2018
for c in vel.columns:
    if c not in vel_err.columns:
        vel_err[c] = 0 
vel_err.sort_index(axis='columns', inplace=True) 


import matplotlib.pyplot as plt
plt.clf()
ax = plt.hexbin(vel.values.flatten()+1,
                vel_err.values.flatten()+1,
                mincnt=1,
                bins='log',
                xscale='log', yscale='log',
                gridsize=100)
plt.xlabel("Velocity [m yr$^{-1}$]")
plt.ylabel("Velocity Error [m yr$^{-1}$]")
#+END_SRC

*** Results (GIS)
#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/org :tangle no :eval no-export
from uncertainties import unumpy
import pandas as pd
import numpy as np

df_out = pd.DataFrame(columns=['Val','Unit'])
df_out.index.name = 'Method'

df = pd.read_csv("./tmp/dat_100_5000.csv")

thick = df['thickness@BedMachine']
# thick[thick < 50] = 50  # IS THIS REASONABLE? IMPORTANT?
# vel = df['vel_baseline@MEaSUREs.0478']
vel = np.abs(df['vx_baseline@MEaSUREs.0478'])*df['gates_x@gates_vel_buf'] + np.abs(df['vy_baseline@MEaSUREs.0478'])*df['gates_y@gates_vel_buf']
D = 200  * thick * vel * 917 / 1E12
df_out.loc['D'] = [np.sum(D), 'Gt']

err_thick = np.abs(df['errbed@BedMachine'].values)
# err_vel = np.abs(df['vel_err_baseline@MEaSUREs.0478'])
err_vel = np.abs(df['ex_baseline@MEaSUREs.0478'])*df['gates_x@gates_vel_buf'] + np.abs(df['ey_baseline@MEaSUREs.0478'])*df['gates_y@gates_vel_buf']

e_th = 200 * err_thick * vel * 917 / 1E12
df_out.loc['Err (Thickness)'] = [np.sum(e_th), 'Gt']
df_out.loc['Err (Thickness %)'] = [np.sum(e_th)/np.sum(D)*100, '%']

e_vel = 200 * thick * err_vel * 917 / 1E12
df_out.loc['Err (Velocity)'] = [np.sum(e_vel), 'Gt']
df_out.loc['Err (Velocity %)'] = [np.sum(e_vel)/np.sum(D)*100, '%']
df_out.loc['Err (Combined)'] = [np.sum(e_vel+e_th), 'Gt']
df_out.loc['Err (%)'] = [np.sum(e_vel+e_th)/np.sum(D)*100, '%']
# The above assumes everything is systematic/independent/correlated

# If errors are all random and uncorrelated:
t = unumpy.uarray(thick, err_thick)
v = unumpy.uarray(vel, err_vel)
e = np.sum(200 * t * v * 917 / 1E12)
df_out.loc['Random Errors'] = [e, 'Gt']
df_out.loc['Random Errors (%)'] = [e.s/e.n*100, '%']

df_out
#+END_SRC

#+RESULTS:
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)

*** Results (Mouginot 2019 Sector)
#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/org :eval no-export
from uncertainties import unumpy
import pandas as pd
import numpy as np

df = pd.read_csv("./tmp/dat_100_5000.csv")

err_sector = pd.DataFrame(columns=['D', 'E', 'E%'])
err_sector.index.name = 'Sector'

sectors = np.unique(df['sectors@Mouginot_2019'].values)
for s in sectors:
    sub_s = df[df['sectors@Mouginot_2019'] == s]
    thick = sub_s['thickness@BedMachine']
    # vel = sub_s['vel_baseline@MEaSUREs.0478']
    vel = np.abs(sub_s['vx_baseline@MEaSUREs.0478']*sub_s['gates_x@gates_vel_buf']) + np.abs(sub_s['vy_baseline@MEaSUREs.0478']*sub_s['gates_y@gates_vel_buf'])
    D = 200  * thick * vel * 917 / 1E12
    err_thick = np.abs(sub_s['errbed@BedMachine'].values)
    # err_thick[np.where(err_thick < 50)] = 50  # IS THIS REASONABLE? IMPORTANT?
    e_th = 200 * err_thick * vel * 917 / 1E12
    err_sector.loc[s] = [np.sum(D), np.sum(e_th), np.round(np.sum(e_th),10)/np.round(np.sum(D),10)*100]

err_sector.loc['GIS'] = np.sum(err_sector, axis=0)
err_sector.loc['GIS']['E%'] = err_sector.loc['GIS']['E']/err_sector.loc['GIS']['D']*100

err_sector.to_csv('./tmp/err_sector_mouginot.csv')

err_sector.rename(columns = {'D':'D [Gt]',
                             'E':'Error [Gt]',
                             'E%':'Error [%]'}, inplace=True)

err_sector
#+END_SRC

#+RESULTS:
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)

*** Results (Mouginot 2019 Region)

#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/org :eval no-export
from uncertainties import unumpy
import pandas as pd
import numpy as np

df = pd.read_csv("./tmp/dat_100_5000.csv")

err_region = pd.DataFrame(columns=['D','E', 'E%'])
err_region.index.name = 'Region'

regions = np.unique(df['regions@Mouginot_2019'].values)
for r in regions:
   sub_r = df[df['regions@Mouginot_2019'] == r]
   thick = sub_r['thickness@BedMachine']
   vel = np.abs(sub_r['vx_baseline@MEaSUREs.0478']*sub_r['gates_x@gates_vel_buf']) + np.abs(sub_r['vy_baseline@MEaSUREs.0478']*sub_r['gates_y@gates_vel_buf'])
   D = 200  * thick * vel * 917 / 1E12
   err_thick = np.abs(sub_r['errbed@BedMachine'].values)
   # err_thick[np.where(err_thick < 50)] = 50  # IS THIS REASONABLE? IMPORTANT?
   e_th = 200 * err_thick * vel * 917 / 1E12
   err_region.loc[r] = [np.sum(D), np.sum(e_th), np.round(np.sum(e_th),10)/np.round(np.sum(D),10)*100]

err_region.loc['GIS'] = np.sum(err_region, axis=0)
err_region.loc['GIS']['E%'] = err_region.loc['GIS']['E']/err_region.loc['GIS']['D']*100

err_region.to_csv('./tmp/err_region_mouginot.csv')

err_region.rename(columns = {'D':'D [Gt]', 
                         'E':'Error [Gt]',
                         'E%':'Error [%]'}, inplace=True)

err_region
#+END_SRC

#+RESULTS:
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)

*** Results (Gate)                                                 :noexport:
#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/org :eval no-export
from uncertainties import unumpy
import pandas as pd
import numpy as np

df = pd.read_csv("./tmp/dat_100_5000.csv")

err_gate = pd.DataFrame(columns=['D','E', 'E%'])
err_gate.index.name = 'Gate'

gates = np.unique(df['gates_gateID@gates_vel_buf'].values)
for g in gates:
    sub = df[df['gates_gateID@gates_vel_buf'] == g]
    thick = sub['thickness@BedMachine']
    vel = np.abs(sub['vx_baseline@MEaSUREs.0478'])*sub['gates_x@gates_vel_buf'] + np.abs(sub['vy_baseline@MEaSUREs.0478'])*sub['gates_y@gates_vel_buf']
    D = 200  * thick * vel * 917 / 1E12
    err_thick = np.abs(sub['errbed@BedMachine'].values)
    # err_thick[np.where(err_thick < 50)] = 50  # IS THIS REASONABLE? IMPORTANT?
    e_th = 200 * err_thick * vel * 917 / 1E12
    err_gate.loc[g] = [np.sum(D), np.sum(e_th), np.sum(e_th)/np.sum(D)*100]

err_gate.loc['GIS'] = np.sum(err_gate, axis=0)
err_gate.loc['GIS']['E%'] = err_gate.loc['GIS']['E']/err_gate.loc['GIS']['D']*100

gate_meta = pd.read_csv("./out/gate_meta.csv")
err_gate['name'] = ''
for g in err_gate.index.values:
    if (g == 'GIS'): continue
    if (sum(gate_meta.gate == g) == 0): continue
    err_gate.loc[g,'name'] = gate_meta[gate_meta.gate == g].Mouginot_2019.values[0]

err_gate.to_csv('./tmp/err_gate.csv')
err_gate.rename(columns = {'D':'D [Gt]', 
                           'E':'Error [Gt]',
                           'E%':'Error [%]'}, inplace=True),

err_gate
#+END_SRC

#+RESULTS:
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)


** Raw data to discharge product
:PROPERTIES:
:header-args:jupyter-python+: :tangle raw2discharge.py :session discharge
:END:
*** Load data

+ What columns are in the file?
+ Don't show all the "vel_eff_YYYY_MM_DD" and "err_eff_YYYY_MM_DD" columns.

#+BEGIN_SRC bash :results verbatim :tangle no :eval no-export
head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep -v "vel_eff_*" | grep -v "err_eff_*" | grep -v "dh_*" | sort | uniq | tr '\n' '\t'
echo "also: dh_YYYY@elev, vel_eff_YYYY_MM_DD@various, etc."
#+END_SRC

#+RESULTS:
: bed@BedMachine	day@GIMP.0715	dem@GIMP.0715	err_2D	errbed@BedMachine	ex_baseline@MEaSUREs.0478	ey_baseline@MEaSUREs.0478	gates_gateID@gates_vel_buf	gates_x@gates_vel_buf	gates_y@gates_vel_buf	lat	lon	regions@Mouginot_2019	sectors@Mouginot_2019	surface@BedMachine	thickness@Bamber_2013	thickness@BedMachine	vel_baseline@MEaSUREs.0478	vel_err_baseline@MEaSUREs.0478	vx_baseline@MEaSUREs.0478	vy_baseline@MEaSUREs.0478	x	y	also: dh_YYYY@elev, vel_eff_YYYY_MM_DD@various, etc.

#+NAME: load_data
#+BEGIN_SRC jupyter-python :exports none :results none
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import datetime as dt

# pd.options.display.notebook_repr_html = False

###
### Load metadata
### 
meta_cols = ["x", "y", "err_2D", 
             "regions@Mouginot_2019", "sectors@Mouginot_2019", "gates_gateID@gates_vel_buf"]
meta = pd.read_csv("./tmp/dat_100_5000.csv", usecols=meta_cols)
# rename columns
meta.rename(inplace=True, columns={'regions@Mouginot_2019':'regions', 
                                   'sectors@Mouginot_2019':'sectors',
                                   'gates_gateID@gates_vel_buf':'gates'})
regions = {1:'NO', 2:'NE', 3:'CE', 4:'SE', 5:'SW', 6:'CW', 7:'NW'}
meta['regions'] = meta['regions'].map(regions.get) # Convert sector numbers to meaningful names
# UNDO with foo.replace({'NO':1,'NW':2,'NE':3,'CW':4,'CE':5,'SW':6,'SE':7}) 
meta['ones'] = 1

R = pd.read_csv('./out/gate_meta.csv')
meta['name'] = ''
for g in meta['gates'].unique():
    if R[R['gate'] == g].shape[0] == 0: continue
    meta.loc[meta['gates'] == g, 'name'] = R[R['gate'] == g]['Mouginot_2019'].values[0]
    
### https://github.com/GEUS-Glaciology-and-Climate/ice_discharge/issues/28
### Gates span sectors and regions. Assign to their primary sector or region
### meta.groupby('gates').mean()['sectors'].values  
### meta[meta['gates'] == 239].sectors
### Don't seem to span regions (run same code but do it above before "map(regions.get)"
for g in meta['gates'].unique():
    meta.loc[meta['gates'] == g, 'sectors'] = meta[meta['gates'] == g]['sectors'].mode()
    # meta.loc[meta['gates'] == g, 'regions'] = meta[meta['gates'] == g]['regions'].mode()

###
### Load BASELINE velocity
###
vel_baseline = pd.read_csv("./tmp/dat_100_5000.csv", usecols=['vel_baseline@MEaSUREs.0478'])
vel_baseline.rename(inplace=True, columns={'vel_baseline@MEaSUREs.0478':'vel'})

####################
# Filter Velocity: Rolling Windows
##################
def filter_bad_v(v):
    WINDOW=30
    SIGMA=2
    vel_rolling = v.T.rolling(window=WINDOW, center=True, min_periods=1).mean().T
    vel_residual = v - vel_rolling
    vel_std = vel_residual.T.rolling(window=WINDOW, center=True, min_periods=1).std().T
    vel_outlier = (v > vel_rolling+SIGMA*vel_std) | ( v < vel_rolling-SIGMA*vel_std)
    v[vel_outlier] = np.nan
    return v
####################


###
### Load all velocity
###
vel = pd.read_csv("./tmp/dat_100_5000.csv", usecols=(lambda c: ('vel_eff' in c)))


all_t = vel.rename(columns=lambda c: dt.datetime(int(c[8:12]),
                                                 int(c[13:15]),
                                                 int(c[16:18]))).columns.unique()

# 'velocity source' as in Sentinel, measures.X, measures.Y, etc.
vel_sources = np.unique([_.split('@')[1] for _ in vel.columns])
for vs in vel_sources:
    print(vs)
    vs_vel = vel.drop(labels=vel.columns[~vel.columns.str.contains(vs)], axis='columns')
    vs_vel = vs_vel.rename(columns=lambda c: dt.datetime(int(c[8:12]),
                                                         int(c[13:15]),
                                                         int(c[16:18])))\
                   .replace(0, np.nan)\
                   .sort_index(axis='columns')\
                   .reindex(all_t, axis='columns')

    vs_vel = vs_vel.loc[:,vs_vel.columns.year >= 1985] # drop early years

    # filter 3x
    vs_vel = filter_bad_v(vs_vel); vs_vel = filter_bad_v(vs_vel); vs_vel = filter_bad_v(vs_vel)

    vs_fill = vs_vel.copy() / vs_vel # 1 where data, nan where not
    vs_vel = vs_vel.interpolate(method='time', axis='columns',
                                limit_area='inside', limit_direction='both')\
                   .replace(np.nan,0)

    if vs == vel_sources[0]:
        vel_sum = vs_vel.copy()
        vel_navg = (vs_vel != 0).replace({True:1, False:0})
        vel_fill = vs_fill.copy().replace(np.nan,0)
    else:
        vel_sum += vs_vel
        vel_navg += (vs_vel.replace(np.nan,0) != 0).replace({True:1, False:0})
        vel_fill += (vs_fill.replace(np.nan,0)) # != 0).replace({True:1, False:0})

vel_final = vel_sum / vel_navg
vel_final = vel_final.fillna(method='bfill', axis=1).fillna(method='ffill', axis=1)

vel = vel_final
fill = vel_fill; fill[fill > 1] = 1


###
### Load all velocity ERROR
###
err = pd.read_csv("./tmp/dat_100_5000.csv", usecols=(lambda c: ('err_eff' in c)))
err.rename(columns=lambda c: dt.datetime(int(c[8:12]), int(c[13:15]), int(c[16:18])), inplace=True)
err.replace(0, np.nan, inplace=True)
err = err.loc[:,err.columns.year > 1985] # drop early years
err.sort_index(axis='columns', inplace=True)
err.drop(labels=err.columns[err.columns.duplicated(keep='first')], axis='columns', inplace=True)
# err.interpolate(method='time', limit_area='inside', axis=1 inplace=True)
err.fillna(method='ffill', axis=1, inplace=True)
err.fillna(method='backfill', axis=1, inplace=True)

for c in err.columns[err.columns.duplicated()]:
    err.drop(columns=c, inplace=True)

# make sure we have error (even if 0) for each velocity, and no err w/o vel
for c in vel.columns:
    if c not in err.columns:
        err[c] = np.nan

for c in err.columns:
    if c not in vel.columns:
        err.drop(columns=c, inplace=True)
    
err.sort_index(axis='columns', inplace=True)


###
### DEM
###
dem = pd.read_csv("./tmp/dat_100_5000.csv", usecols=(lambda c: ('DEM' in c)))
mv = {}
for c in dem.columns: mv[c] = int(c.split('@')[0].split('_')[1])
dem.rename(inplace=True, columns=mv)

###
### Thickness
###
th = pd.read_csv("./tmp/dat_100_5000.csv", usecols=["surface@BedMachine",
                                                    "bed@BedMachine",
                                                    "errbed@BedMachine",
                                                    "gates_gateID@gates_vel_buf"])
th.rename(inplace=True, columns={'errbed@BedMachine': 'err',
                                 'gates_gateID@gates_vel_buf':'gates'})
th['thick'] = dem[2020] - th['bed@BedMachine']


# what is the unadjusted discharge using BedMachine thickness?
D = (vel).apply(lambda c: c * (200 * th['thick'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()
#+END_SRC


*** Adjust thickness 
**** Adjust "bad" thickness
Here we perform a few thickness adjustments:

+ 300 :: All ice <= 20 m thick is assumed bad and set to the minimum
         "good" thickness in a gate if good exists, or 300 m if it
         does not exist
+ 400 :: All ice <= 50 m thick is set to 400 m thick
+ fit :: All ice <= 20 m thick is fit to the log10(thickness) v.
         log10(velocity) relationship, even though it is not a good
         fit.

For testing, gate clumps 9 (all bad) and 546 (some bad)

#+CALL: load_data[:results none]()

#+NAME: adjust_thickness
#+BEGIN_SRC jupyter-python :exports none :results none
th['bad'] = th['thick'] <= 20

th['thick_adj_300'] = th['thick']
th['thick_adj_300_err'] = th['err']
for g in th[th['bad']]['gates'].unique(): # only work on gates with some (or all) bad thickness
    if all(th[th['gates'] == g]['bad']): # If all bad, set to 300
        th.loc[th['gates'] == g, 'thick_adj_300'] = 300
        th.loc[th['gates'] == g, 'thick_adj_300_err'] = 300/2.

    elif any(th[th['gates'] == g]['bad']): # If any bad, set to minimum of good.
        th.loc[(th['gates'] == g) & (th['bad']), 'thick_adj_300'] = \
        (th.loc[(th['gates'] == g) & (~th['bad']), 'thick']).min()
        th.loc[(th['gates'] == g) & (th['bad']), 'thick_adj_300_err'] = 300/2.

# aggressive: Anything <= 50 gets 400 m thickness
th['thick_adj_400'] = [400 if T <= 50 else T for T in th['thick']]
th['thick_adj_400_err'] = [400/2. if T[0] <= 50 else T[1] for T in zip(th['thick'],th['err'])]
#+END_SRC


#+BEGIN_SRC jupyter-python :exports none :results raw drawer :display text/org :session discharge :tangle no :eval no-export
<<load_data>>
<<adjust_thickness>>

th.describe().T
#+END_SRC

#+RESULTS:
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)

#+BEGIN_SRC jupyter-python :exports none :results raw drawer :display text/org :session discharge :eval no-export
D0 = (vel).apply(lambda c: c * (200 * th['thick'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D1 = (vel).apply(lambda c: c * (200 * th['thick_adj_300'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D0 = D0.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()
D1 = D1.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()
pd.concat([D0,D1, D1-D0], axis='columns', keys=['BedMachine','300','diff'])
#+END_SRC

#+RESULTS:
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)


**** Adjust thickness w thickness v. velocity fit.

#+NAME: adjust_thickness_fit
#+BEGIN_SRC jupyter-python :exports none :results raw drawer :display text/plain :eval no-export
CUTOFF = 20
df = vel_baseline.join(th['thick'])
max_vel = df.loc[df['thick'] <= CUTOFF, 'vel'].max() # limit fit to velocities where data is missing
# df = df[(df['thick'] > CUTOFF) & (df['vel'] <= max_vel)]
df = df[df['thick'] > CUTOFF]
# df = df[df['vel'] <= max_vel]

import statsmodels.api as sm
y = (df['thick'])
X = np.log10(df['vel'])
X = sm.add_constant(X)
model = sm.OLS(y, X)
fits = model.fit()
# print(fits.summary())
predictions = fits.predict(X)

from statsmodels.sandbox.regression.predstd import wls_prediction_std
XX = np.linspace(X['vel'].min(), X['vel'].max(), 50)
XX = sm.add_constant(XX)
yy = fits.predict(XX)
sdev, lower, upper = wls_prediction_std(fits, exog=XX, alpha=0.05)

# fig = plt.figure(1, figsize=(4,4)) # w,h
# # get_current_fig_manager().window.move(0,0)
# fig.clf()
# # fig.set_tight_layout(True)

# ax = fig.add_subplot(111)
# im = ax.scatter(X['vel'], y, alpha=0.1, color='k')
# xl, yl = ax.get_xlim(), ax.get_ylim()
# ax.set_ylabel('Thickness [m]')
# ax.set_xlabel('Velocity [m yr$^{-1}$]')
# ax.plot(XX[:,1], yy, 'r--')
# ax.fill_between(XX[:,1], lower, upper, color='#888888', alpha=0.4)
# ax.fill_between(XX[:,1], lower, upper, color='#888888', alpha=0.1)
# # ax.set_xlim(50,xl[1])
# ax.set_ylim(0,yl[1])
# plt.savefig('./tmp/vel_thick_fit.png', transparent=True, bbox_inches='tight', dpi=300)
# plt.savefig('./tmp/vel_thick_fit.pdf', transparent=True, bbox_inches='tight', dpi=300)
            
th['fit'] = th['thick']
vel_where_thick_bad = vel_baseline.loc[th['bad'] == True, 'vel']
th.loc[th['bad'] == True, 'fit'] = fits.predict(sm.add_constant(np.log10(vel_where_thick_bad)))
# set err to thickness where fit
th['fit_err'] = th['err']
th.loc[th['bad'] == True, 'fit_err'] = th.loc[th['bad'] == True, 'fit'] /2.


fits.summary()


D0 = (vel).apply(lambda c: c * (200 * th['thick_adj_300'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D1 = (vel).apply(lambda c: c * (200 * th['fit'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D0 = D0.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()
D1 = D1.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()
pd.concat([D0,D1, D1-D0], axis='columns', keys=['300','fit','diff'])

#+END_SRC

#+RESULTS: adjust_thickness_fit
#+begin_example
                   300         fit      diff
1985-12-31  393.810537  397.448020  3.637483
1986-12-31  403.621790  407.143284  3.521494
1987-12-31  404.365408  407.540752  3.175344
1988-12-31  395.613192  398.371912  2.758720
1989-12-31  399.864935  402.658843  2.793908
1990-12-31  401.664134  405.084540  3.420406
1991-12-31  400.462215  403.736095  3.273880
1992-12-31  402.519731  405.770122  3.250392
1993-12-31  403.423903  406.542109  3.118206
1994-12-31  399.933315  402.914126  2.980811
1995-12-31  389.067728  391.995398  2.927670
1996-12-31  392.167165  395.031045  2.863880
1997-12-31  391.297053  394.007069  2.710016
1998-12-31  393.170860  395.913105  2.742245
1999-12-31  398.630186  401.359739  2.729553
2000-12-31  401.634050  404.374435  2.740385
2001-12-31  397.664092  400.359660  2.695569
2002-12-31  411.781589  414.561559  2.779970
2003-12-31  426.282367  429.163926  2.881559
2004-12-31  439.521487  442.449812  2.928325
2005-12-31  451.184821  454.168586  2.983765
2006-12-31  447.452914  450.423805  2.970891
2007-12-31  442.788037  445.753816  2.965779
2008-12-31  449.601460  452.588288  2.986828
2009-12-31  455.659977  458.697265  3.037288
2010-12-31  461.181847  464.301524  3.119676
2011-12-31  468.530811  471.659178  3.128366
2012-12-31  467.967179  471.201219  3.234040
2013-12-31  477.413165  480.623358  3.210193
2014-12-31  477.917362  481.074540  3.157178
2015-12-31  481.916935  485.012330  3.095395
2016-12-31  473.822767  476.881356  3.058589
2017-12-31  485.067498  488.212923  3.145424
2018-12-31  485.992336  489.154601  3.162265
2019-12-31  493.257814  496.544119  3.286305
2020-12-31  505.170590  508.516843  3.346252
2021-12-31  510.813279  514.069424  3.256144
2022-12-31  508.353288  511.518189  3.164901
2023-12-31  495.140473  498.106154  2.965681
#+end_example

**** Table of thickness adjustments
:PROPERTIES:
:ID:       62f5d28c-c704-422d-9e9b-c0771d5b86ee
:END:

#+BEGIN_SRC jupyter-python :exports none :results raw drawer :display text/org :eval no-export
th[['thick','thick_adj_300','thick_adj_400','fit']].describe()
#+END_SRC

#+RESULTS:
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)


**** Baseline discharge values for various thickness adjustments
Here we calculate:
+ D_baseline_th_noadj :: Discharge with no thickness adjustment
+ D_baseline_th_300 :: The baseline discharge
+ D_baseline_th_400 :: The discharge assuming the aggressive thickness adjustment
+ D_baseline_th_fit :: The discharge assuming the fitted thickness adjustment
+ D_baseline :: The baseline discharge - picked from our favorite of the above. TBD

#+NAME: discharge_th
#+BEGIN_SRC jupyter-python :exports none :results raw drawer :eval no-export
D_th = pd.DataFrame(index=th.index,
                    columns=['NoAdj','NoAdj_err','300','300_err','400','400_err','fit','fit_err'])

# + D_baseline_th_noadj :: Discharge with no thickness adjustment
D_th['NoAdj'] = vel_baseline.apply(lambda c: c * (th['thick'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

# should match HeatMap
D_th['NoMillan'] = vel_baseline.apply(lambda c: c * ((th['surface@BedMachine']-th['bed@BedMachine']).values * 200), axis=0) * 917 / 1E12

# D_baseline_th_noadj_err ::
D_th['NoAdj_err'] = vel_baseline.apply(lambda c: c * (th['err'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

D_th['300'] = vel_baseline.apply(lambda c: c * (th['thick_adj_300'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12
D_th['300_err'] = vel_baseline.apply(lambda c: c * (th['thick_adj_300_err'].values  * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

D_th['400'] = vel_baseline.apply(lambda c: c * (th['thick_adj_400'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12
D_th['400_err'] = vel_baseline.apply(lambda c: c * (th['thick_adj_400_err'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

D_th['fit'] = vel_baseline.apply(lambda c: c * (th['fit'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12
D_th['fit_err'] = vel_baseline.apply(lambda c: c * (th['fit_err'].values* 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

D_th.sum(axis=0)
#+END_SRC

#+RESULTS: discharge_th
: NoAdj        462.883690
: NoAdj_err     41.680738
: 300          467.881433
: 300_err       43.985599
: 400          473.705747
: 400_err       46.234386
: fit          470.996240
: fit_err       45.034132
: NoMillan     463.309375
: dtype: float64

**** Map of where thickness adjustments occur

#+BEGIN_SRC jupyter-python :session gate_map :exports none :results raw drawer :tangle no
import matplotlib.pyplot as plt
import numpy as np

from grass_session import Session
from grass.pygrass.modules.shortcuts import general as g
from grass.pygrass.modules.shortcuts import raster as r
from grass.pygrass.modules.shortcuts import vector as v
from grass.pygrass.modules.shortcuts import display as d
from grass.script import array as garray

from grass.pygrass.modules.shortcuts import vector as v
import shapefile

if 'th' not in locals():
    <<load_data>>
    <<adjust_thickness>>
    <<adjust_thickness_fit>>
    # <<discharge>>

# th['bad'] = th['thick'] <= 20
th['all_bad'] = False
for g in th[th['bad']]['gates'].unique():
    if all(th[th['gates'] == g]['bad']):
        th.loc[th['gates'] == g, 'all_bad'] = True
        
tmp = meta.copy()
tmp['vel'] = vel_baseline
gates = pd.DataFrame(index=th['gates'].unique())
id = 'gates' #_gateID@gates_vel_buf'
gates['x'] = tmp.groupby(id).mean()['x']
gates['y'] = tmp.groupby(id).mean()['y']
gates['all_bad'] = th.groupby('gates').mean()['all_bad']
gates['bad'] = th.groupby('gates').mean()['bad']
gates['regions'] = tmp.groupby(id).first()['regions']
gates['vel_all_bad'] = tmp[th['all_bad'] == 1].groupby(id).mean()['vel']
gates['vel_part_bad'] = tmp[th['bad']>0].groupby(id).mean()['vel']
gates['vel_gd'] = tmp[th['bad'] == 0].groupby(id).mean()['vel']

fig = plt.figure(1, figsize=(8,6)) # w,h
fig.clf()
fig.set_tight_layout(True)

from matplotlib import rc
rc('font', size=12)
rc('text', usetex=False)

import matplotlib.gridspec as gridspec
gs = gridspec.GridSpec(2, 2) #h, w
ax1 = plt.subplot(gs[:,0])
ax2 = plt.subplot(gs[0,1])
ax3 = plt.subplot(gs[1,1])

SIZE=4

# Write out the vector from GRASS to disk
if 'r_regions' not in locals():
    with Session(gisdb="./", location="G", mapset="Mouginot_2019", create_opts=""):
        # r.to.vect input=regions output=regions type=area
        # v.out.ogr -c input=regions output=tmp.shp format=ESRI_Shapefile --o
        r_regions = shapefile.Reader("./tmp/SHP/tmp.shp")

sf = r_regions

for shape in list(sf.iterShapes()):
   x_lon = np.zeros(len(shape.points))
   y_lat = np.zeros(len(shape.points))
   for ip in range(len(shape.points)):
       x_lon[ip] = shape.points[ip][0]
       y_lat[ip] = shape.points[ip][1]

   dist = np.sqrt(x_lon**2 + y_lat**2)
   dist_d = np.abs(np.diff(dist))
   bad = np.where(dist_d > 5000)[0]
   x_lon[bad] = np.nan; y_lat[bad] = np.nan
   ax1.plot(x_lon, y_lat, 'k', color='lightgray', zorder=-999)
   ax1.text(-130000,-2750000, 'SW')
   ax1.text(-130000,-2125000, 'CW')
   ax1.text(-130000,-1750000, 'NW')
   ax1.text(-135000,-1200000, 'NO')
   ax1.text(260000,-1.35E6, 'NE')
   ax1.text(370000,-2.1E6, 'CE')
   ax1.text(200000,-2.5E6, 'SE')

ax1.scatter(gates['x'],gates['y'], marker='o', color='k', s=SIZE, label="0 % Invalid")
ax1.scatter(gates.loc[gates['all_bad'] == True, 'x'],
            gates.loc[gates['all_bad'] == True, 'y'],
            marker='v', color='r', s=SIZE, label="100 % Invalid")
ax1.scatter(gates.loc[(gates['bad'] > 0) & (gates['bad'] < 1), 'x'], # partial bad
            gates.loc[(gates['bad'] > 0) & (gates['bad'] < 1), 'y'],
            marker='s', color='b', s=SIZE, label="Partial")
ax1.set_yticklabels([])
ax1.set_xticklabels([])
ax1.legend(fontsize=10, markerscale=5)

MS=4

gs = gates.sort_values(by='regions')
gs.index = np.arange(gs['bad'].size)
ax2.plot(gs.loc[gs['bad'] == 1, 'bad']*100, '.', color='r', marker='v', markersize=MS, markerfacecolor='None')
ax2.plot(gs.loc[gs['bad']%1 != 0, 'bad']*100, '.', color='b', marker='s', markersize=MS, markerfacecolor='None')
ax2.plot(gs.loc[gs['bad'] == 0, 'bad']*100, '.', color='k')
ax2.set_ylabel('Invalid thickness\npixels in gate [%]')
ax2.set_xlabel('Gate [#]')

ax3.plot(gs['vel_gd'], '.', color='k', label='Gate pixels all good')
ax3.plot(gs['vel_part_bad'], '.', color='b', label='Gate pixels partial bad', marker='s', markersize=MS, markerfacecolor='None')
ax3.plot(gs['vel_all_bad'], '.', color='r', label='Gate pixels all bad', marker='v', markersize=MS, markerfacecolor='None')
ax3.set_ylabel('Gate average speed [m yr$^{-1}$]')
ax3.set_xlabel('Gate [#]')
ax3.set_yscale('log')
# ax3.legend()

# print region label on ax4. Shade ax4 and ax5 every 2nd region
for n,R in enumerate(gs['regions'].unique()):
    ax2.text(np.mean(gs[gs['regions'] == R].index), 50, R, horizontalalignment='center', rotation=90)
    for a in [ax2,ax3]:
        if n % 2 == 0:
            a.axvspan(gs[gs['regions'] == R].index[0],
                      gs[gs['regions'] == R].index[-1],
                      alpha=0.1, color='k')
             
print("Gates: ", gates.shape[0])
print("Gates w/ any bad pixels: ", gates[gates['bad'] > 0].shape[0])
print("Gates w/ >50% bad pixels: ", gates[gates['bad'] > 0.5].shape[0])
print("Gates w/ all bad pixels: ", gates[gates['bad'] == 1].shape[0])
print("Gates w/ all bad pixels: ", gates[gates['all_bad'] == True].shape[0])
    
# plt.savefig('./figs/gate_map.png', transparent=True, bbox_inches='tight', dpi=300)
# plt.savefig('./figs/gate_map.pdf', transparent=True, bbox_inches='tight', dpi=300)

print(tmp[th['bad'] == 0]['vel'].describe())
print(tmp[th['bad'] > 0]['vel'].describe())
#+END_SRC

#+RESULTS:

**** Temporal changes in thickness
+ Each pixel has DEM at YYYY. Assume 08-01 (DOY ~213)
+ Assume DEM_2020 is baseline 
+ Linear interpolate between annual values
+ Take derivative to get dh/dt

#+NAME: adjust_thickness_ts
#+BEGIN_SRC jupyter-python :exports none :results raw drawer
dem_ts = dem.copy(deep=True)
dem_ts.columns = [str(y)+'-08-01' for y in dem_ts.columns]
dem_ts.columns = dem_ts.columns.astype(str).astype('datetime64[ns]')

# extend to first and last velocity timestamp
dem_ts[vel.columns.min()] = dem_ts[dem_ts.columns.min()]
dem_ts[vel.columns.max()] = dem_ts[dem_ts.columns.max()]
# re-sort so column are still in temporal order
dem_ts = dem_ts.reindex(sorted(dem_ts.columns), axis='columns')
# resample to daily.
dem_ts = dem_ts.T.resample('1D').interpolate().T
dem_ts = dem_ts[vel.columns] # resample back to observed times
# Above gives us DEM time series at each gate pixel


# subtract thickness from each pixel at each time
th_ts = dem_ts.apply(lambda x: x - th['bed@BedMachine'])

# Re-adjust th_ts where thickness < 20 m.
bad = th_ts.min(axis=1) < 20 # Pixels with bad thickness somewhere in the time series
for px in bad[bad == True].index:
    th_ts.loc[px] = fits.predict(np.log10([1,vel_baseline.iloc[px].values[0]]))
#+END_SRC

*** Discharge

And more importantly and long-term, we calculate the following time series discharge products, using our preferred method (fill w/ 300 m):
+ D :: Discharge at gate scale
+ D_err :: The discharge error at gate scale
+ D_fill :: The fill percentage for each gate at each point in time
+ D_sector :: Same, but at Mouginot 2019 sector scale
+ D_sector_err ::
+ D_sector_fill :: 
+ D_region :: Same, but at Mouginot 2019 region scale
+ D_region_err ::
+ D_region_fill ::
+ D_all :: Same, but all GIS
+ D_all_err ::
+ D_all_fill ::

#+BEGIN_SRC jupyter-python :display text/plain :session test :tangle no
import pandas as pd
import numpy as np
filled_D = pd.DataFrame(index=['A','B'], columns=['t1','t3','t4'], data=[[8,9,7],[4,2,1]])
fill = filled_D/filled_D
fill.loc['B','t3'] = np.nan

no_filled_D = filled_D * fill
# filled_weighted_D = filled_D / filled_D.sum()
no_filled_weighted_D = no_filled_D / filled_D.sum()

r = ((filled_D*fill)/filled_D.sum()).sum()
r.round(2)                        
#+END_SRC

#+NAME: discharge
#+BEGIN_SRC jupyter-python :exports none :results raw drawer
# D :: Discharge at pixel scale
# D_err :: The discharge error at pixel scale
# D_fill :: The fill percentage for each pixel at each point in time
D = (vel*th_ts).apply(lambda c: c * (200 * meta['err_2D'].values), axis=0) * 917 / 1E12
# Don't adjust thickness over time
# D = (vel).apply(lambda c: c * (200 * meta['err_2D'].values * th['thick'].values), axis=0) * 917 / 1E12

D_err = vel.apply(lambda c: c * (th['fit_err'] * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

[DD,DD_err] = [_.copy() for _ in [D,D_err]]
DD[['gates','sectors','regions','ones','name']] = meta[['gates','sectors','regions','ones','name']]
DD_err[['gates','sectors','regions','ones','name']] = meta[['gates','sectors','regions','ones','name']]


# D_gate :: Same, but at the gate scale
# D_gate_err ::
# D_gate_fill ::
D_gates = DD.groupby('gates').sum().drop(['ones','sectors'], axis=1)
D_gates_err = DD_err.groupby('gates').sum().drop(['ones','sectors'], axis=1)
D_gates_fill_weight = pd.DataFrame(dtype=np.float64).reindex_like(D_gates)
for g in D_gates.index:
    g_idx = (DD['gates'] == g)
    D_gates_fill_weight.loc[g] = ((D[g_idx]*fill[g_idx])/D[g_idx].sum()).sum()

D_gates.columns = D_gates.columns.astype(str).astype('datetime64[ns]')
D_gates_err.columns = D_gates_err.columns.astype(str).astype('datetime64[ns]')
D_gates_fill_weight.columns = D_gates_fill_weight.columns.astype(str).astype('datetime64[ns]')
D_gates_fill_weight.clip(lower=0, upper=1, inplace=True)



# D_sector :: Same, but at Mouginot sector scale
# D_sector_err ::
# D_sector_fill ::
D_sectors = DD.groupby('name').sum().drop(['ones','sectors','gates'], axis=1)
D_sectors_err = DD_err.groupby('name').sum().drop(['ones','sectors','gates'], axis=1)
D_sectors_fill_weight = pd.DataFrame(dtype=np.float64).reindex_like(D_sectors)
for s in D_sectors.index:
    s_idx = (DD['name'] == s)
    D_sectors_fill_weight.loc[s] = ((D[s_idx]*fill[s_idx])/D[s_idx].sum()).sum()

D_sectors.columns = D_sectors.columns.astype(str).astype('datetime64[ns]')
D_sectors_err.columns = D_sectors_err.columns.astype(str).astype('datetime64[ns]')
D_sectors_fill_weight.columns = D_sectors_fill_weight.columns.astype(str).astype('datetime64[ns]')
D_sectors_fill_weight.clip(lower=0, upper=1, inplace=True)


# D_region :: Same, but at Mouginot region scale
# D_region_err ::
# D_region_fill ::
D_regions = DD.groupby('regions').sum().drop(['ones','sectors','gates'], axis=1)
D_regions_err = DD_err.groupby('regions').sum().drop(['ones','sectors','gates'], axis=1)
D_regions_fill_weight = pd.DataFrame(dtype=np.float64).reindex_like(D_regions)
for r in D_regions.index:
    r_idx = DD['regions'] == r
    D_regions_fill_weight.loc[r] = ((D[r_idx]*fill[r_idx])/D[r_idx].sum()).sum()
    
    # # or, broken apart into simple steps.
    # # Whether any given pixel is filled (1) or not (0).
    # r_fill = fill[DD['regions'] == r].fillna(value=0)
    # # Discharge for each pixel in this region, using filling
    # r_filled_D = DD[DD['regions'] == r].drop(['sectors','regions','ones'], axis=1)
    # # weighted filling for this region
    # r_fill_weight = ((r_filled_D*r_fill)/r_filled_D.sum()).sum()
    # D_regions_fill_weight.loc[r] = r_fill_weight
    
D_regions.columns = D_regions.columns.astype(str).astype('datetime64[ns]')
D_regions_err.columns = D_regions_err.columns.astype(str).astype('datetime64[ns]')
D_regions_fill_weight.columns = D_regions_fill_weight.columns.astype(str).astype('datetime64[ns]')
D_regions_fill_weight.clip(lower=0, upper=1, inplace=True)


# D_all :: Same, but all GIS
# D_all_err ::
# D_all_fill ::
D_all = DD.drop(['regions','sectors','ones','name','gates'], axis=1).sum()
D_all_err = DD_err.drop(['regions','sectors','ones','name','gates'], axis=1).sum()
D_all_fill_weight = pd.Series(dtype=np.float64).reindex_like(D_all)
for c in D.columns:
    D_all_fill_weight.loc[c] = (fill[c] * (D[c] / D[c].sum())).sum()
#+END_SRC

*** SAVE & RESTORE STATE

#+BEGIN_SRC jupyter-python :results raw drawer :tangle no
%store D
%store D_err
%store fill
%store D_gates
%store D_gates_err
%store D_gates_fill_weight
%store D_sectors
%store D_sectors_err
%store D_sectors_fill_weight
%store D_regions
%store D_regions_err
%store D_regions_fill_weight
%store D_all
%store D_all_err
%store D_all_fill_weight
%store meta
#+END_SRC

#+BEGIN_SRC jupyter-python :results raw drawer :tangle no
%store -r

D = D.T['2000':].T
D_err = D_err.T['2000':].T
fill = fill.T['2000':].T
D_gates = D_gates.T['2000':].T
D_gates_err = D_gates_err.T['2000':].T
D_gates_fill_weight = D_gates_fill_weight.T['2000':].T
D_sectors = D_sectors.T['2000':].T
D_sectors_err = D_sectors_err.T['2000':].T
D_sectors_fill_weight = D_sectors_fill_weight.T['2000':].T
D_regions = D_regions.T['2000':].T
D_regions_err = D_regions_err.T['2000':].T
D_regions_fill_weight = D_regions_fill_weight.T['2000':].T
D_all = D_all.T['2000':].T
D_all_err = D_all_err.T['2000':].T
D_all_fill_weight = D_all_fill_weight.T['2000':].T
#+END_SRC


*** Export Data
**** Crop time series
#+BEGIN_SRC jupyter-python :exports both :results raw drawer

STARTDATE='1986'
D_all = D_all.T[STARTDATE:].T
D_all_err = D_all_err.T[STARTDATE:].T
D_all_fill_weight = D_all_fill_weight.T[STARTDATE:].T
D_gates = D_gates.T[STARTDATE:].T
D_gates_err = D_gates_err.T[STARTDATE:].T
D_gates_fill_weight = D_gates_fill_weight.T[STARTDATE:].T
D_sectors = D_sectors.T[STARTDATE:].T
D_sectors_err = D_sectors_err.T[STARTDATE:].T
D_sectors_fill_weight = D_sectors_fill_weight.T[STARTDATE:].T
D_regions = D_regions.T[STARTDATE:].T
D_regions_err = D_regions_err.T[STARTDATE:].T
D_regions_fill_weight = D_regions_fill_weight.T[STARTDATE:].T
D_all = D_all.T[STARTDATE:].T
D_all_err = D_all_err.T[STARTDATE:].T
D_all_fill_weight = D_all_fill_weight.T[STARTDATE:].T

#+END_SRC

**** README

#+BEGIN_SRC bash :mkdirp ./out :eval no-export
cat << EOF > ./out/README.txt
<<README>>
EOF

cat << EOF | cut -c2- >> ./out/README.txt 
 * Version

 This version of this README generated from git commit: $(git describe --always)
EOF

#+END_SRC

#+RESULTS:

#+NAME: README
#+BEGIN_SRC org
README for "Greenland Ice Sheet solid ice discharge from 1986 through March 2020"
 
Reference paper: doi:10.5194/essd-12-1367-2020  https://doi.org/10.5194/essd-12-1367-2020
Data Citations: doi:10.22008/promice/data/ice_discharge

Source: https://github.com/GEUS-PROMICE/ice_discharge

,* Usage instructions:

When using any of the following data, you are required to cite the paper and the data set.

,* Data Descriptions

Data sets released as part of this work include:
+ Discharge data
+ Gates
+ Surface Elevation Change
+ Code

Each are described briefly below.

,** Discharge Data

This data set is made up of the following files

| Filename            | Description                                                            |
|---------------------+------------------------------------------------------------------------|
| GIS_D.csv           | Greenland Ice Sheet cumulative discharge by timestamp                  |
| GIS_err.csv         | Errors for GIS_D.csv                                                   |
| GIS_coverage.csv    | Coverage for GIS_D.csv                                                 |
| GIS.nc              | Discharge, errors, and covarge for GIS                                 |
| region_D.csv        | Regional discharge                                                     |
| region_err.csv      | Errors for region_D.csv                                                |
| region_coverage.csv | Coverage for region_D.csv                                              |
| region.nc           | Discharge, errors, and covarge for GIS regions                         |
| sector_D.csv        | Sector discharge                                                       |
| sector_err.csv      | Errors for sector_D.csv                                                |
| sector_coverage.csv | Coverage for sector_D.csv                                              |
| sector.nc           | Discharge, errors, and covarge for GIS sectors                         |
| gate_D.csv          | Gate discharge                                                         |
| gate_err.csv        | Errors for gate_D.csv                                                  |
| gate_coverage.csv   | Coverage for gate_D.csv                                                |
| gate.nc             | Discharge, errors, and covarge for GIS gates - including gate metadata |
|---------------------+------------------------------------------------------------------------|
| gate_meta.csv       | Metadata for each gate                                                 |

D and err data have units [Gt yr-1].
Coverage is in range [0, 1]

,** Surface elevation change

See doi:10.22008/promice/data/DTU/surface_elevation_change/v1.0.0

,** Code

See https://github.com/GEUS-PROMICE/ice_discharge

#+END_SRC

**** Gates
***** D, err, coverage
#+BEGIN_SRC jupyter-python :exports both :results raw drawer
D_gatesT = D_gates.T
D_gates_errT = D_gates_err.T
D_gates_fill_weightT = D_gates_fill_weight.T

D_gatesT.index.name = "Date"
D_gates_errT.index.name = "Date"
D_gates_fill_weightT.index.name = "Date"

D_gatesT.to_csv('./out/gate_D.csv')
D_gates_errT.to_csv('./out/gate_err.csv')
D_gates_fill_weightT.to_csv('./out/gate_coverage.csv')
#+END_SRC

**** Sectors
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org
# meta_sector = pd.DataFrame(index=meta.groupby('sectors').first().index)
# meta_sector['mean x'] = meta.groupby('sectors').mean()['x'].round().astype(int)
# meta_sector['mean y'] = meta.groupby('sectors').mean()['y'].round().astype(int)
# meta_sector['n gates'] = meta.groupby('sectors').count()['gates'].round().astype(int)
# meta_sector['region'] = meta.groupby('sectors').first()['regions']

D_sectorsT = D_sectors.T
D_sectors_errT = D_sectors_err.T
D_sectors_fill_weightT = D_sectors_fill_weight.T

D_sectorsT.index.name = "Date"
D_sectors_errT.index.name = "Date"
D_sectors_fill_weightT.index.name = "Date"

# meta_sector.to_csv('./out/sector_meta.csv')
D_sectorsT.to_csv('./out/sector_D.csv')
D_sectors_errT.to_csv('./out/sector_err.csv')
D_sectors_fill_weightT.to_csv('./out/sector_coverage.csv')

# meta_sector.head(10)
#+END_SRC

**** Regions
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org
# meta_region = pd.DataFrame(index=meta.groupby('regions').first().index)
# meta_region['n gates'] = meta.groupby('regions').count()['gates'].round().astype(int)

D_regionsT = D_regions.T
D_regions_errT = D_regions_err.T
D_regions_fill_weightT = D_regions_fill_weight.T
D_regionsT.index.name = "Date"
D_regions_errT.index.name = "Date"
D_regions_fill_weightT.index.name = "Date"

# meta_region.to_csv('./out/region_meta.csv')
D_regionsT.to_csv('./out/region_D.csv')
D_regions_errT.to_csv('./out/region_err.csv')
D_regions_fill_weightT.to_csv('./out/region_coverage.csv')

# meta_region.head(10)
#+END_SRC


**** GIS
#+BEGIN_SRC jupyter-python :exports both :results raw drawer
D_all.index.name = "Date"
D_all_err.index.name = "Date"
D_all_fill_weight.index.name = "Date"

D_all.to_csv('./out/GIS_D.csv', float_format='%.3f', header=["Discharge [Gt yr-1]"])
D_all_err.to_csv('./out/GIS_err.csv', float_format='%.3f', header=["Discharge Error [Gt yr-1]"])
D_all_fill_weight.to_csv('./out/GIS_coverage.csv', float_format='%.3f', header=["Coverage [unit]"])
#+END_SRC

**** Gates
#+BEGIN_SRC bash :results verbatim :tangle gate_export.sh
g.mapset gates_vel_buf

v.out.ogr input=gates_final output=./out/gates.kml format=KML --o
(cd out; zip gates.kmz gates.kml; rm gates.kml)
v.out.ogr input=gates_final output=./out/gates.gpkg format=GPKG --o
v.out.ogr input=gates_final output=./out/gates.geojson format=GeoJSON --o
#+END_SRC

**** Elevation change

Done manually. See DOI

**** TODO Code

Make sure this Org file is tidy enough...

**** TODO Distribute
#+BEGIN_SRC bash :results verbatim :tangle no
(cd out; zip -e /media/kdm/promicedata/ice_discharge/gates/gates.zip gates*)
(cd out; zip -e /media/kdm/promicedata/ice_discharge/d/D.zip D*csv)
cp ./out/README.txt /media/kdm/promicedata/ice_discharge/

zip -e /media/kdm/promicedata/ice_discharge/code/mankoff_et_al.zip ice_discharge.org

cp ${DATADIR}/Khan_2016/dhdt_1995-2015_GrIS.txt /media/kdm/promicedata/ice_discharge/surface_elevation_change

#+END_SRC

** CSV to NetCDF
:PROPERTIES:
:header-args:jupyter-python+: :tangle csv2nc.py :session discharge :eval no-export
:END:

#+BEGIN_SRC jupyter-python
import pandas as pd
import xarray as xr
import numpy as np
import subprocess
import datetime
#+END_SRC

#+RESULTS:

*** GIS
#+BEGIN_SRC jupyter-python
csvfile = 'GIS'

df_D = pd.read_csv('./out/' + csvfile + '_D.csv', index_col=0, parse_dates=True)
df_err = pd.read_csv('./out/' + csvfile + '_err.csv', index_col=0, parse_dates=True)
df_coverage = pd.read_csv('./out/' + csvfile + '_coverage.csv', index_col=0, parse_dates=True)

# ds = df_D.to_xarray()

# ds = xr.Dataset({'time': df_D})
ds = xr.Dataset()

ds["time"] = ("time", df_D.index)
ds["time"].attrs["long_name"] = "time of measurement"
ds["time"].attrs["standard_name"] = "time"
ds["time"].attrs["axis"] = "T"
ds["time"].attrs["cf_role"] = "timeseries_id"

ds["discharge"] = ("time", df_D['Discharge [Gt yr-1]'])
ds["discharge"].attrs["long_name"] = "Discharge"
ds["discharge"].attrs["standard_name"] = "land_ice_mass_tranport_due_to_calving_and_ice_front_melting"
ds["discharge"].attrs["units"] = "Gt yr-1"
ds["discharge"].attrs["coordinates"] = "time"

ds["err"] = ("time", df_err['Discharge Error [Gt yr-1]'])
ds["err"].attrs["long_name"] = "Error"
ds["err"].attrs["standard_name"] = "Uncertainty"
ds["err"].attrs["units"] = "Gt yr-1"
ds["err"].attrs["coordinates"] = "time"

ds["coverage"] = ("time", df_coverage['Coverage [unit]'])
ds["coverage"].attrs["long_name"] = "Coverage"
ds["coverage"].attrs["standard_name"] = "Coverage"
# ds["coverage"].attrs["units"] = "-"
ds["coverage"].attrs["coordinates"] = "time"

ds.attrs["featureType"] = "timeSeries"
ds.attrs["title"] = "Greenland discharge"
ds.attrs["summary"] = "Greenland discharge"
ds.attrs["keywords"] = "Greenland; Ice Discharge; Calving; Submarine Melt"
# ds.attrs["Conventions"] = "CF-1.8"
ds.attrs["source"] = "git commit: " + subprocess.check_output(["git", "describe", "--always"]).strip().decode('UTF-8')
# ds.attrs["comment"] = "TODO"
# ds.attrs["acknowledgment"] = "TODO"
# ds.attrs["license"] = "TODO"
# ds.attrs["date_created"] = datetime.datetime.now().strftime("%Y-%m-%d")
ds.attrs["creator_name"] = "Ken Mankoff"
ds.attrs["creator_email"] = "kdm@geus.dk"
ds.attrs["creator_url"] = "http://kenmankoff.com"
ds.attrs["institution"] = "GEUS"
# ds.attrs["time_coverage_start"] = "TODO"
# ds.attrs["time_coverage_end"] = "TODO"
# ds.attrs["time_coverage_resolution"] = "TODO"
ds.attrs["references"] = "10.22008/promice/ice_discharge"
ds.attrs["product_version"] = 2.0

# NOTE: Compression here does not save space
# comp = dict(zlib=True, complevel=5)
# encoding = {var: comp for var in ds.data_vars} # all
# encoding = {var: comp for var in ['time','coverage']} # some

ds.to_netcdf('./out/GIS.nc', mode='w')#, encoding=encoding)
#+END_SRC

#+RESULTS:

*** Region
#+BEGIN_SRC jupyter-python

csvfile = 'region'

df_D = pd.read_csv('./out/' + csvfile + '_D.csv', index_col=0, parse_dates=True)
df_err = pd.read_csv('./out/' + csvfile + '_err.csv', index_col=0, parse_dates=True)
df_coverage = pd.read_csv('./out/' + csvfile + '_coverage.csv', index_col=0, parse_dates=True)

ds = xr.Dataset()

ds["time"] = (("time"), df_D.index)
ds["time"].attrs["cf_role"] = "timeseries_id"
ds["time"].attrs["standard_name"] = "time"
# ds["time"].attrs["units"] = "day of year"
# ds["time"].attrs["calendar"] = "julian"
ds["time"].attrs["axis"] = "T"

ds["region"] = (("region"), df_D.columns)
ds["region"].attrs["long_name"] = "Region"
ds["region"].attrs["standard_name"] = "N/A"
ds["region"].attrs["comment"] = "Regions from Mouginot (2019)"

ds["discharge"] = (("region", "time"), df_D.T.values)
ds["discharge"].attrs["long_name"] = "Discharge"
ds["discharge"].attrs["standard_name"] = "land_ice_mass_tranport_due_to_calving_and_ice_front_melting"
ds["discharge"].attrs["units"] = "Gt yr-1"
ds["discharge"].attrs["coordinates"] = "time region"

ds["err"] = (("region", "time"), df_err.T.values)
ds["err"].attrs["long_name"] = "Error"
ds["err"].attrs["standard_name"] = "Uncertainty"
ds["err"].attrs["units"] = "Gt yr-1"
ds["err"].attrs["coordinates"] = "time region"

ds["coverage"] = (("region", "time"), df_coverage.T.values)
ds["coverage"].attrs["long_name"] = "Coverage"
ds["coverage"].attrs["standard_name"] = "Coverage"
# ds["coverage"].attrs["units"] = "-"
ds["coverage"].attrs["coordinates"] = "time region"

# ds["lat"] = (("station"), meta.loc['lat'].astype(np.float32))
# #ds["lat"].attrs["coordinates"] = "station"
# ds["lat"].attrs["long_name"] = "latitude"
# ds["lat"].attrs["standard_name"] = "latitude"
# ds["lat"].attrs["units"] = "degrees_north"
# ds["lat"].attrs["axis"] = "Y"

# ds["lon"] = (("station"), meta.loc['lon'].astype(np.float32))
# #ds["lon"].attrs["coordinates"] = "station"
# ds["lon"].attrs["long_name"] = "longitude"
# ds["lon"].attrs["standard_name"] = "longitude"
# ds["lon"].attrs["units"] = "degrees_east"
# ds["lon"].attrs["axis"] = "X"

# ds["alt"] = (("station"), meta.loc['elev'].astype(np.float32))
# ds["alt"].attrs["long_name"] = "height_above_mean_sea_level"
# ds["alt"].attrs["standard_name"] = "altitude"
# # ds["alt"].attrs["long_name"] = "height above mean sea level"
# # ds["alt"].attrs["standard_name"] = "height"
# ds["alt"].attrs["units"] = "m"
# ds["alt"].attrs["positive"] = "up"
# ds["alt"].attrs["axis"] = "Z"

ds.attrs["featureType"] = "timeSeries"
ds.attrs["title"] = "Greenland discharge"
ds.attrs["summary"] = "Greenland discharge per region"
ds.attrs["keywords"] = "Greenland; Ice Discharge; Calving; Submarine Melt"
# ds.attrs["Conventions"] = "CF-1.8"
ds.attrs["source"] = "git commit: " + subprocess.check_output(["git", "describe", "--always"]).strip().decode('UTF-8')
# ds.attrs["comment"] = "TODO"
# ds.attrs["acknowledgment"] = "TODO"
# ds.attrs["license"] = "TODO"
# ds.attrs["date_created"] = datetime.datetime.now().strftime("%Y-%m-%d")
ds.attrs["creator_name"] = "Ken Mankoff"
ds.attrs["creator_email"] = "kdm@geus.dk"
ds.attrs["creator_url"] = "http://kenmankoff.com"
ds.attrs["institution"] = "GEUS"
# ds.attrs["time_coverage_start"] = "TODO"
# ds.attrs["time_coverage_end"] = "TODO"
# ds.attrs["time_coverage_resolution"] = "TODO"
ds.attrs["references"] = "10.22008/promice/ice_discharge"
ds.attrs["product_version"] = 2.0

comp = dict(zlib=True, complevel=9)
encoding = {var: comp for var in ds.data_vars} # all

ds.to_netcdf('./out/region.nc', mode='w', encoding=encoding)
#+END_SRC

#+RESULTS:

*** Sectors
#+BEGIN_SRC jupyter-python

csvfile = 'sector'

df_D = pd.read_csv('./out/' + csvfile + '_D.csv', index_col=0, parse_dates=True)
df_err = pd.read_csv('./out/' + csvfile + '_err.csv', index_col=0, parse_dates=True)
df_coverage = pd.read_csv('./out/' + csvfile + '_coverage.csv', index_col=0, parse_dates=True)

ds = xr.Dataset()

ds["time"] = (("time"), df_D.index)
ds["time"].attrs["cf_role"] = "timeseries_id"
ds["time"].attrs["standard_name"] = "time"
# ds["time"].attrs["units"] = "day of year"
# ds["time"].attrs["calendar"] = "julian"
ds["time"].attrs["axis"] = "T"

ds["sector"] = (("sector"), df_D.columns)
ds["sector"].attrs["long_name"] = "Sector"
ds["sector"].attrs["standard_name"] = "N/A"
ds["sector"].attrs["comment"] = "Sectors from Mouginot (2019)"

ds["discharge"] = (("sector", "time"), df_D.T.values)
ds["discharge"].attrs["long_name"] = "Discharge"
ds["discharge"].attrs["standard_name"] = "land_ice_mass_tranport_due_to_calving_and_ice_front_melting"
ds["discharge"].attrs["units"] = "Gt yr-1"
ds["discharge"].attrs["coordinates"] = "time sector"

ds["err"] = (("sector", "time"), df_err.T.values)
ds["err"].attrs["long_name"] = "Error"
ds["err"].attrs["standard_name"] = "Uncertainty"
ds["err"].attrs["units"] = "Gt yr-1"
ds["err"].attrs["coordinates"] = "time sector"

ds["coverage"] = (("sector", "time"), df_coverage.T.values)
ds["coverage"].attrs["long_name"] = "Coverage"
ds["coverage"].attrs["standard_name"] = "Coverage"
# ds["coverage"].attrs["units"] = "-"
ds["coverage"].attrs["coordinates"] = "time sector"

# ds["lat"] = (("station"), meta.loc['lat'].astype(np.float32))
# #ds["lat"].attrs["coordinates"] = "station"
# ds["lat"].attrs["long_name"] = "latitude"
# ds["lat"].attrs["standard_name"] = "latitude"
# ds["lat"].attrs["units"] = "degrees_north"
# ds["lat"].attrs["axis"] = "Y"

# ds["lon"] = (("station"), meta.loc['lon'].astype(np.float32))
# #ds["lon"].attrs["coordinates"] = "station"
# ds["lon"].attrs["long_name"] = "longitude"
# ds["lon"].attrs["standard_name"] = "longitude"
# ds["lon"].attrs["units"] = "degrees_east"
# ds["lon"].attrs["axis"] = "X"

# ds["alt"] = (("station"), meta.loc['elev'].astype(np.float32))
# ds["alt"].attrs["long_name"] = "height_above_mean_sea_level"
# ds["alt"].attrs["standard_name"] = "altitude"
# # ds["alt"].attrs["long_name"] = "height above mean sea level"
# # ds["alt"].attrs["standard_name"] = "height"
# ds["alt"].attrs["units"] = "m"
# ds["alt"].attrs["positive"] = "up"
# ds["alt"].attrs["axis"] = "Z"

ds.attrs["featureType"] = "timeSeries"
ds.attrs["title"] = "Greenland discharge"
ds.attrs["summary"] = "Greenland discharge per sector"
ds.attrs["keywords"] = "Greenland; Ice Discharge; Calving; Submarine Melt"
# ds.attrs["Conventions"] = "CF-1.8"
ds.attrs["source"] = "git commit: " + subprocess.check_output(["git", "describe", "--always"]).strip().decode('UTF-8')
# ds.attrs["comment"] = "TODO"
# ds.attrs["acknowledgment"] = "TODO"
# ds.attrs["license"] = "TODO"
# ds.attrs["date_created"] = datetime.datetime.now().strftime("%Y-%m-%d")
ds.attrs["creator_name"] = "Ken Mankoff"
ds.attrs["creator_email"] = "kdm@geus.dk"
ds.attrs["creator_url"] = "http://kenmankoff.com"
ds.attrs["institution"] = "GEUS"
# ds.attrs["time_coverage_start"] = "TODO"
# ds.attrs["time_coverage_end"] = "TODO"
# ds.attrs["time_coverage_resolution"] = "TODO"
ds.attrs["references"] = "10.22008/promice/ice_discharge"
ds.attrs["product_version"] = 2.0

comp = dict(zlib=True, complevel=9)
encoding = {var: comp for var in ds.data_vars} # all

ds.to_netcdf('./out/sector.nc', mode='w', encoding=encoding)
#+END_SRC

#+RESULTS:

*** Gates

#+BEGIN_SRC jupyter-python

csvfile = 'gate'

df_D = pd.read_csv('./out/' + csvfile + '_D.csv', index_col=0, parse_dates=True)
df_err = pd.read_csv('./out/' + csvfile + '_err.csv', index_col=0, parse_dates=True)
df_coverage = pd.read_csv('./out/' + csvfile + '_coverage.csv', index_col=0, parse_dates=True)

meta = pd.read_csv("./out/gate_meta.csv")

ds = xr.Dataset()

ds["time"] = (("time"), df_D.index)
ds["time"].attrs["cf_role"] = "timeseries_id"
ds["time"].attrs["standard_name"] = "time"
# ds["time"].attrs["units"] = "day of year"
# ds["time"].attrs["calendar"] = "julian"
ds["time"].attrs["axis"] = "T"

ds["gate"] = (("gate"), df_D.columns.astype(np.int32))
ds["gate"].attrs["long_name"] = "Gate"
ds["gate"].attrs["standard_name"] = "N/A"

ds["discharge"] = (("gate", "time"), df_D.T.values.astype(np.float32))
ds["discharge"].attrs["long_name"] = "Discharge"
ds["discharge"].attrs["standard_name"] = "land_ice_mass_tranport_due_to_calving_and_ice_front_melting"
ds["discharge"].attrs["units"] = "Gt yr-1"
ds["discharge"].attrs["coordinates"] = "time gate"

ds["err"] = (("gate", "time"), df_err.T.values.astype(np.float32))
ds["err"].attrs["long_name"] = "Error"
ds["err"].attrs["standard_name"] = "Uncertainty"
ds["err"].attrs["units"] = "Gt yr-1"
ds["err"].attrs["coordinates"] = "time gate"

ds["coverage"] = (("gate", "time"), df_coverage.T.values.astype(np.float32))
ds["coverage"].attrs["long_name"] = "Coverage"
ds["coverage"].attrs["standard_name"] = "Coverage"
# ds["coverage"].attrs["units"] = "-"
ds["coverage"].attrs["coordinates"] = "time gate"

ds["mean_x"] = (("gate"), meta.mean_x.astype(np.int32))
ds["mean_x"].attrs["long_name"] = "Mean x coordinate of gate in EPSG:3413"
ds["mean_x"].attrs["standard_name"] = "Mean x"

ds["mean_y"] = (("gate"), meta.mean_y.astype(np.int32))
ds["mean_y"].attrs["long_name"] = "Mean y coordinate of gate in EPSG:3413"
ds["mean_y"].attrs["standard_name"] = "Mean y"

ds["mean_lon"] = (("gate"), meta.lon.astype(np.float32))
ds["mean_lon"].attrs["long_name"] = "Mean lon coordinate of gate"
ds["mean_lon"].attrs["standard_name"] = "Longitude"

ds["mean_lat"] = (("gate"), meta.lat.astype(np.float32))
ds["mean_lat"].attrs["long_name"] = "Mean lat coordinate of gate"
ds["mean_lat"].attrs["standard_name"] = "Latitude"

ds["sector"] = (("gate"), meta.sector.astype(np.int32))
ds["sector"].attrs["long_name"] = "Mouginot 2019 sector containing gate"

ds["region"] = (("gate"), meta.region)
ds["region"].attrs["long_name"] = "Mouginot 2019 region containing gate"

ds["Zwally_2012"] = (("gate"), meta.Zwally_2012)
ds["Zwally_2012"].attrs["long_name"] = "Zwally 2012 sector containing gate"

ds["name_Bjørk"] = (("gate"), meta.Bjork_2015)
ds["name_Bjørk"].attrs["long_name"] = "Nearest name from Bjørk (2015)"

ds["name_Mouginot"] = (("gate"), meta.Mouginot_2019)
ds["name_Mouginot"].attrs["long_name"] = "Nearest name from Mouginot (2019)"

ds["ID_Moon"] = (("gate"), meta.Moon_2008)
ds["ID_Moon"].attrs["long_name"] = "Moon 2008 glacier ID (a.k.a NSIDC 0642)"

ds["ID_Moon_dist"] = (("gate"), meta.Moon_2008_dist)
ds["ID_Moon_dist"].attrs["long_name"] = "Moon 2008 glacier ID (a.k.a NSIDC 0642) distance"

ds.attrs["featureType"] = "timeSeries"
ds.attrs["title"] = "Greenland discharge"
ds.attrs["summary"] = "Greenland discharge per gate"
ds.attrs["keywords"] = "Greenland; Ice Discharge; Calving; Submarine Melt"
# ds.attrs["Conventions"] = "CF-1.8"
ds.attrs["source"] = "git commit: " + subprocess.check_output(["git", "describe", "--always"]).strip().decode('UTF-8')
# ds.attrs["comment"] = "TODO"
# ds.attrs["acknowledgment"] = "TODO"
# ds.attrs["license"] = "TODO"
# ds.attrs["date_created"] = datetime.datetime.now().strftime("%Y-%m-%d")
ds.attrs["creator_name"] = "Ken Mankoff"
ds.attrs["creator_email"] = "kdm@geus.dk"
ds.attrs["creator_url"] = "http://kenmankoff.com"
ds.attrs["institution"] = "GEUS"
# ds.attrs["time_coverage_start"] = "TODO"
# ds.attrs["time_coverage_end"] = "TODO"
# ds.attrs["time_coverage_resolution"] = "TODO"
ds.attrs["references"] = "10.22008/promice/ice_discharge"
ds.attrs["product_version"] = 2.0

comp = dict(zlib=True, complevel=9)
encoding = {var: comp for var in ds.data_vars} # all

ds.to_netcdf('./out/gate.nc', mode='w', encoding=encoding)
#+END_SRC

#+RESULTS:


** Figures
:PROPERTIES:
:header-args:jupyter-python+: :tangle figures.py
:header-args:jupyter-python+: :session sob_figures
:END:
*** Overview
:PROPERTIES:
:header-args:jupyter-python+: :tangle no
:END:
**** Top contributors
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
import pandas as pd

# annual average
df = pd.read_csv('./out/sector_D.csv', index_col=0, parse_dates=True)\
       .resample('1D')\
       .mean()\
       .interpolate(method='time')\
       .resample('A')\
       .mean()\

top_few = df.iloc[-1].sort_values(ascending=False).head(8)
# names = {}
# for m in mouginot_names: names[m] = ""
# names["JAKOBSHAVN_ISBRAE"] = "Sermeq Kujalleq (Jakobshavn Isbræ)"
# names["KOGE_BUGT_C"] = "(Køge Bugt C)"
# names["ZACHARIAE_ISSTROM"] = "Zachariae Isstrøm"
# names["RINK_ISBRAE"] = 'Kangilliup Sermia (Rink Isbræ)',
# names["NIOGHALVFJERDSFJORDEN"] = "(Nioghalvfjerdsfjorden)"

meta = pd.read_csv("./out/gate_meta.csv")

out = pd.DataFrame(index=top_few.index, columns=["D","x","y"])
for name in out.index:
    out.loc[name]["D"] = top_few[name]
    out.loc[name]["x"] = meta[meta["Mouginot_2019"] == name]["mean_x"].values[0]
    out.loc[name]["y"] = meta[meta["Mouginot_2019"] == name]["mean_y"].values[0]

out.to_csv('./tmp/overview_D.csv')
out
#+END_SRC

#+RESULTS:
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)

**** Prep data

#+BEGIN_SRC bash :results verbatim
grass -c ./G/fig_overview
g.region -d
r.mask -r


###
### vel
###
r.mask mask_GIC@Mouginot_2019 --o
r.mapcalc "vel = vel_baseline@MEaSUREs.0478" --o
r.mask -r

r.mapcalc "vel2 = if(vel < 100, null(), vel)" --o
# r.mapcalc "vel2 = if(vel2 > max(vel2)*0.5, max(vel2)*0.5, vel2)" --o
# r.colors -g map=vel2 color=oranges

cat << EOF | r.colors map=vel2 rules=-
0 255:255:255
99 255:255:255
100 255:235:215
500 255:128:0
15000 255:128:0
nv 255:255:255
default 255:255:255
EOF

g.copy vector=sectors@Mouginot_2019,sectors --o
g.copy vector=regions@Mouginot_2019,regions --o
g.copy vector=gates_final@gates_vel_buf,gates --o


### get baseline discharge at each gate
v.in.ascii input=./tmp/overview_D.csv output=overview_D separator=, skip=1 x=2 y=3 --o


###
### Ocean Basemap
###
r.mask -i mask@BedMachine
g.region res=1000
r.relief input=bed@BedMachine output=ocean_relief zscale=30  --o
# r.colors map=bed@BedMachine color=srtm_plus
r.colors -ne map=bed@BedMachine color=water
r.shade shade=ocean_relief color=bed@BedMachine output=ocean_shade --o
g.region -d


r.mask -r 
g.region res=2500
r.relief input=bed@BedMachine output=land_relief zscale=30  --o
r.mapcalc "land_relief = land_relief" --o
# r.colors map=bed@BedMachine color=srtm_plus
# r.shade shade=land_relief color=bed@BedMachine output=land_shade --o
g.region -d




g.region -d
r.mask -r
g.copy mask_ice@BedMachine,ice --o
# r.mapcalc "ice = if(isnull(ice), 2, 1)" --o
cat << EOF | r.colors map=ice rules=-
# 2 0:0:0
1 255:255:255
EOF



r.mask -r
d.mon start=wx0
d.erase
d.rast land_relief
d.rast ocean_shade
# d.rast ocean_relief
# d.rast land_shade
d.rast ice
d.rast vel2


## now patch them all to there R,G,B channels so we can produce a single ps.map raster.

g.region res=1000
r.mapcalc --o <<EOF
ocean.r = if(isnull(ocean_shade), null(), r#ocean_shade)
ocean.g = if(isnull(ocean_shade), null(), g#ocean_shade)
ocean.b = if(isnull(ocean_shade), null(), b#ocean_shade)
land.r = if(isnull(land_relief), null(), r#land_relief)
land.g = if(isnull(land_relief), null(), g#land_relief)
land.b = if(isnull(land_relief), null(), b#land_relief)
ice.r = if(isnull(ice), null(), r#ice)
ice.g = if(isnull(ice), null(), g#ice)
ice.b = if(isnull(ice), null(), b#ice)
vel.r = if(isnull(vel2), null(), r#vel2)
vel.g = if(isnull(vel2), null(), g#vel2)
vel.b = if(isnull(vel2), null(), b#vel2)
EOF

r.patch -s input=vel.r,ice.r,ocean.r,land.r output=rr --o
r.patch -s input=vel.g,ice.g,ocean.g,land.g output=gg --o
r.patch -s input=vel.b,ice.b,ocean.b,land.b output=bb --o

r.colors map=rr,gg,bb color=grey

d.erase
d.rgb -n red=rr green=gg blue=bb


g.region res=1000
cat << EOF | ps.map input=- output=./figs/psmap/BASE.ps --o
border n
rgb rr gg bb
EOF
g.region -d
# convert ${CONVERTOPTS} -transparent white ./figs/psmap/vel.ps ./figs/psmap/vel.png



# gates at each of the top 7 dischargers
# for row in $(db.select -c table=overview_D | tr ' ' '_' | tac); do
g.region -d
r.mapcalc "vel3 = vel2" --o

# r.colors map=vel3 color=oranges
cat << EOF | r.colors map=vel3 rules=-
0 255:255:255
99 255:255:255
100 255:235:215
10000 255:128:0
20000 255:128:0
nv 255:255:255
default 255:255:255
EOF



mkdir -p ./figs/psmap
id=$(db.select -c sql='select cat from overview_D'|head -n1) # DEBUG
for id in $(db.select -c sql='select cat from overview_D'); do
  xy=$(db.select -c sql="select int_1,int_2 from overview_D where cat == '${id}'")
  x=$(echo ${xy}|cut -d"|" -f1)
  y=$(echo ${xy}|cut -d"|" -f2)
  g.region w=$x s=$y e=$(( $x + 1 )) n=$(( $y + 1))
  g.region w=w-15000 s=s-15000 e=e+15000 n=n+15000 res=200
  g.region save=${id} --o

  cat << EOF | ps.map input=- output=./figs/psmap/${id}.ps --o
border n
raster vel3
vareas gates
  color black
  end
EOF
  convert -trim ./figs/psmap/${id}.{ps,png}
done


# overview map w/ boxes
# db.select -c sql='select cat from overview_D'
# 1 through 8

g.region -d res=1000
cat << EOF | ps.map input=- output=./figs/psmap/BASE_boxes.ps --o
border n
rgb rr gg bb
region 1
  color black
  width 1
  end  
region 2
  color black
  width 1
  end  
region 3
  color black
  width 1
  end  
region 4
  color black
  width 1
  end  
region 5
  color black
  width 1
  end  
region 6
  color black
  width 1
  end  
region 7
  color black
  width 1
  end  
region 8
  color black
  width 1
  end  
EOF
g.region -d
#+END_SRC

**** ps.map overview
+ create named regions with
  + d.mon start=wx0
  + d.rast vel
  + d.rast gates color=red
  + zoom, then "set computational region extent from display"
  + then "g.region save=<name>"

#+BEGIN_SRC bash :results verbatim
g.mapset fig_overview
g.list type=region mapset=.
# g.remove -f type=region pattern=*
#+END_SRC


#+BEGIN_SRC PSMAP :tangle overview.psmap
border n

rgb rr gg bb

# raster vel2
#+END_SRC

**** ps.map inset

#+BEGIN_SRC PSMAP :tangle overview_inset.psmap
border n

raster vel3

vareas gates
  color black
  end

end
#+END_SRC

**** Run psmap

#+BEGIN_SRC bash :results verbatim
g.region -d res=5000 -pa
ps.map input=overview.psmap output=overview.ps --o; o overview.ps
# ps.map -e input=overview.psmap output=overview.eps --o; o overview.eps

region=$(g.list type=region mapset=.|head -n1) # DEBUG
for region in $(g.list type=region mapset=.); do
  g.region ${region}
  g.region res=100
  ps.map input=overview_inset.psmap output=${region}.ps --o; 
  # o ${region}.ps
  convert -trim -transparent white ${region}.ps ./figs/psmap/${region}.png
  rm ${region}.ps
  # o ./figs/psmap/${region}.png
done
#+END_SRC

**** Configure in Inkscape

Manually align and adjust in Inkscape, add text, boxes, etc. then...

#+BEGIN_SRC bash :results verbatim
inkscape -z ./figs/overview.svg -e ./figs/overview.png
#+END_SRC

*** Discharge Time Series - GIS
#+NAME: fig:discharge_ts
#+BEGIN_SRC jupyter-python :results raw drawer :display text/plain :eval no-export
import matplotlib.gridspec as gridspec
import numpy as np
import pandas as pd
from adjust_spines import adjust_spines as adj
import matplotlib.pyplot as plt
import datetime as dt

plt.close(1)

fig = plt.figure(1, figsize=(9,5)) # w,h
fig.clf()
grid = plt.GridSpec(2, 1, height_ratios=[1,5], hspace=0.1) # h, w

ax_D = fig.add_subplot(grid[1,:])
ax_coverage = fig.add_subplot(grid[0,:], sharex=ax_D)

adj(ax_D, ['left','bottom'])
adj(ax_coverage, ['left'])
ax_coverage.minorticks_off()
ax_coverage.tick_params(length=0, which='both', axis='x')

D = pd.read_csv("./out/GIS_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/GIS_err.csv", index_col=0, parse_dates=True)
coverage = pd.read_csv("./out/GIS_coverage.csv", index_col=0, parse_dates=True)

THRESH = coverage.values.flatten() < 0.5
D[THRESH] = np.nan
err[THRESH] = np.nan
coverage[THRESH] = np.nan

# Add t0 and t_end so that graph covers a nice time span
def pad_df(df):
    df = df.append(pd.DataFrame(index=np.array(['1986-01-01']).astype('datetime64[ns]')), sort=True)
    idx = str(df.index.year.max())+'-12-31'
    df = df.append(pd.DataFrame(index=np.array([idx]).astype('datetime64[ns]')), sort=True)
    df = df.sort_index()
    return df

D = pad_df(D)
err = pad_df(err)
coverage = pad_df(coverage)

MS=4
ax_D.errorbar(err.index, D.values, fmt='o', mfc='none', mec='k', ms=MS)
for i in np.arange(D.values.size):
    if np.isnan(D.values[i]): continue
    alpha = coverage.values[i][0]
    if alpha < 0: alpha = 0
    if alpha > 1: alpha = 1
    ax_D.errorbar(D.index[i], D.values[i],
                  yerr=err.values[i], ecolor='grey',
                  alpha=alpha,
                  marker='o', ms=MS, mfc='k', mec='k')

# Take annual average from daily interpolated rather than the existing samples.
D_day_year = D.resample('1D').mean().interpolate(method='time',limit_area='inside',axis=0).resample('A').mean()
err_day_year = err.resample('1D').mean().interpolate(method='time',limit_area='inside',axis=0).resample('A').mean()

# No annual average if few sample
num_obs = D.resample('Y').count().values
D_day_year[num_obs < 4] = np.nan
err_day_year[num_obs < 4] = np.nan

Z=99
D_day_year.plot(drawstyle='steps', linewidth=3, ax=ax_D, alpha=0.75, color='orange', zorder=Z)

ax_D.legend("", framealpha=0)
ax_D.set_xlabel('Time [Years]')
ax_D.set_ylabel('Discharge [Gt yr$^{-1}$]')

import matplotlib.dates as mdates

ax_D.xaxis.set_major_locator(mdates.YearLocator())
ax_D.minorticks_off()
ax_D.xaxis.set_tick_params(rotation=-90) #, ha="left", rotation_mode="anchor")
for tick in ax_D.xaxis.get_majorticklabels():
    tick.set_horizontalalignment("left")

ax_D.set_xlim(D.index[0], D.index[-1])

###
### Coverage
###

ax_coverage.scatter(coverage.index, coverage.values*100,
                    color='k',
                    marker='.',
                    alpha=0.25)
                  # linewidth=3,
ax_coverage.set_ylim(45,105)
ax_coverage.set_yticks([50,100])
ax_coverage.spines['left'].set_bounds(ax_coverage.get_ylim()[0],100)
ax_coverage.set_ylabel('Coverage [%]')
plt.setp(ax_coverage.get_xticklabels(), visible=False)

plt.savefig('./figs/discharge_ts.png', transparent=False, bbox_inches='tight', dpi=300)

disp = pd.DataFrame(index = D_day_year.index.year,
                    data = {'D' : D_day_year.values.flatten(), 
                            'err' : err_day_year.values.flatten()})
disp.index.name = 'Year'
disp
#+END_SRC

#+RESULTS: fig:discharge_ts
:RESULTS:
#+begin_example
               D        err
Year                       
1986         NaN        NaN
1987  447.571965  40.731675
1988  438.272793  39.562075
1989         NaN        NaN
1990  448.391882  41.448095
1991         NaN        NaN
1992         NaN        NaN
1993         NaN        NaN
1994  439.233822  40.221859
1995         NaN        NaN
1996         NaN        NaN
1997         NaN        NaN
1998  426.078395  38.710171
1999         NaN        NaN
2000  436.422819  39.234398
2001  431.464416  38.624944
2002  444.747109  39.908560
2003  457.373584  41.151188
2004  469.996108  42.460564
2005  480.294016  43.264098
2006  473.831618  42.907318
2007  467.318725  42.565083
2008  472.535644  43.198605
2009  476.667893  44.003825
2010  481.050419  44.338760
2011  486.817935  45.086304
2012  483.717250  44.916699
2013  492.594149  45.866201
2014  491.289392  45.932832
2015  494.338556  46.210351
2016  485.145596  45.459783
2017  496.170200  46.518489
2018  496.307744  46.639915
2019  503.011919  47.335262
2020  513.825813  48.205240
2021  517.570056  48.528812
2022  514.252681  48.109528
2023  500.465456  46.675900
#+end_example
: <Figure size 648x360 with 2 Axes>
:END:





*** Discharge Time Series - Regions
#+NAME: fig:discharge_ts_regions
#+BEGIN_SRC jupyter-python :results raw drawer :display text/plain :eval no-export
import matplotlib.gridspec as gridspec
import numpy as np
import pandas as pd
from adjust_spines import adjust_spines as adj
import matplotlib.pyplot as plt
import datetime as dt

from cycler import cycler
plt.rcParams['axes.prop_cycle'] = cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', \
                                                   '#9467bd', '#8c564b', '#e377c2', '#bcbd22', '#17becf'])

plt.close(1)

fig = plt.figure(1, figsize=(9,7)) # w,h
fig.clf()
# fig.set_tight_layout(True)
grid = plt.GridSpec(2, 1, height_ratios=[1,6], hspace=0.1) # h, w

ax_D = fig.add_subplot(grid[1,:])
ax_coverage = fig.add_subplot(grid[0,:], sharex=ax_D)

from adjust_spines import adjust_spines as adj
adj(ax_D, ['left','bottom'])
adj(ax_coverage, ['left'])
ax_coverage.minorticks_off()
ax_coverage.tick_params(length=0, which='both', axis='x')


D = pd.read_csv("./out/region_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/region_err.csv", index_col=0, parse_dates=True)
coverage = pd.read_csv("./out/region_coverage.csv", index_col=0, parse_dates=True)

THRESH = coverage < 0.5
D[THRESH] = np.nan
err[THRESH] = np.nan
coverage[THRESH] = np.nan

def pad_df(df):
    df = df.append(pd.DataFrame(index=np.array(['1986-01-01']).astype('datetime64[ns]')), sort=True)
    idx = str(df.index.year.max())+'-12-31'
    df = df.append(pd.DataFrame(index=np.array([idx]).astype('datetime64[ns]')), sort=True)
    df = df.sort_index()
    return df

D = pad_df(D)
err = pad_df(err)
coverage = pad_df(coverage)

### Take annual average from daily interpolated rather than the existing samples.
D_day_year = D.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()
err_day_year=err.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

# No annual average if few sample
num_obs = D.resample('Y').count().values
D_day_year[num_obs<=3] = np.nan
err_day_year[num_obs<=3] = np.nan

MS=4
Z=99
for r in D.columns:
    e = ax_D.errorbar(D[r].index, D[r].values, fmt='o', mfc='none', ms=MS)
    C = e.lines[0].get_color()
    D_day_year[r].plot(drawstyle='steps', linewidth=2, ax=ax_D,
                       color=C,
                       # color='orange'
                       alpha=0.75, zorder=Z)
    for i in np.arange(D.index.size):
        if np.isnan(D.iloc[i][r]): continue
        alpha = coverage.iloc[i][r]
        if alpha < 0: alpha = 0
        if alpha > 1: alpha = 1
        ax_D.errorbar(D.iloc[i].name, D.iloc[i][r],
                      yerr=err.iloc[i][r], ecolor='gray',
                      marker='o', ms=MS,
                      # mfc='k', mec='k',
                      color=C,
                      mfc=C, mec=C,
                      alpha=alpha)

    tx = pd.Timestamp(str(D[r].dropna().index[-1].year) + '-01-01') + dt.timedelta(days=380)
    ty = D_day_year[r].dropna().iloc[-1]
    # if r in ['CE', 'SW']: ty=ty-4
    # if r == 'NE': ty=ty+4
    # if r == 'NO': ty=ty-2
    ax_D.text(tx, ty, r, verticalalignment='center', horizontalalignment='left')

    # if r in ['CE','NE','SE']:
    ax_coverage.scatter(coverage.index, coverage[r]*100,
                        marker='.',
                        alpha=0.25,
                        color=C)

ax_coverage.set_ylabel('Coverage [%]')
ax_coverage.set_ylim(45,105)
ax_coverage.set_yticks([50,100])
ax_coverage.spines['left'].set_bounds(ax_coverage.get_ylim()[0],100)

import matplotlib.dates as mdates
ax_D.xaxis.set_major_locator(mdates.YearLocator())

# plt.legend()
ax_D.legend("", framealpha=0)
ax_D.set_xlabel('Time [Years]')
ax_D.set_ylabel('Discharge [Gt yr$^{-1}$]')
ax_D.set_xlim(D.index[0], D.index[-1])
ax_D.set_xticklabels(D.index.year.unique())
# ax_D.set_yscale('log')

plt.setp(ax_coverage.get_xticklabels(), visible=False)

ax_D.xaxis.set_tick_params(rotation=-90)
for tick in ax_D.xaxis.get_majorticklabels():
    tick.set_horizontalalignment("left")

plt.savefig('./figs/discharge_ts_regions.png', transparent=False, bbox_inches='tight', dpi=300)
# plt.savefig('./figs/discharge_ts_regions.pdf', transparent=True, bbox_inches='tight', dpi=300)

Err_pct = (err_day_year.values/D_day_year.values*100).round().astype(int).astype(str)
Err_pct[Err_pct.astype(float)<0] = 'NaN'
tbl = (D_day_year.round().fillna(value=0).astype(int).astype(str) + ' ('+Err_pct+')')
tbl.index = tbl.index.year.astype(str)
tbl.columns = [_ + ' (Err %)' for _ in tbl.columns]
tbl
#+END_SRC

#+RESULTS: fig:discharge_ts_regions
:RESULTS:
#+begin_example
     CE (Err %) CW (Err %) NE (Err %) NO (Err %) NW (Err %) SE (Err %)  \
1986     70 (9)     74 (8)     23 (8)    0 (NaN)    0 (NaN)    0 (NaN)   
1987     70 (9)     71 (8)     23 (8)     24 (7)     95 (9)    0 (NaN)   
1988     70 (9)     70 (8)     22 (8)     24 (7)    0 (NaN)    0 (NaN)   
1989     73 (9)     71 (8)     22 (8)     24 (7)    0 (NaN)    0 (NaN)   
1990    76 (10)     68 (8)     22 (8)     23 (7)    0 (NaN)    0 (NaN)   
1991    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)   
1992    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)   
1993    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)   
1994    72 (10)     68 (8)     24 (9)     25 (7)     96 (8)    0 (NaN)   
1995    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)   
1996    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)   
1997    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)   
1998     70 (9)     74 (8)     22 (8)     22 (7)     92 (9)   128 (10)   
1999     70 (9)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)   
2000     69 (9)     79 (8)     23 (8)    0 (NaN)     92 (9)   130 (10)   
2001     70 (9)     80 (8)    0 (NaN)    0 (NaN)     91 (8)   125 (10)   
2002     72 (9)     81 (8)    0 (NaN)    0 (NaN)     92 (9)   132 (10)   
2003     75 (9)     83 (8)    0 (NaN)    0 (NaN)     94 (9)   138 (10)   
2004     79 (9)     83 (8)    0 (NaN)    0 (NaN)     98 (9)   144 (10)   
2005     85 (9)     83 (8)    0 (NaN)    0 (NaN)     99 (9)   145 (10)   
2006     85 (9)     85 (8)     25 (8)    0 (NaN)     97 (9)   138 (10)   
2007     81 (9)     85 (8)    0 (NaN)     26 (7)     97 (9)   135 (10)   
2008     79 (9)     87 (8)    0 (NaN)    0 (NaN)     98 (9)   139 (10)   
2009     78 (9)     89 (8)     24 (8)    0 (NaN)    101 (9)   142 (10)   
2010     77 (9)     89 (8)    0 (NaN)    0 (NaN)    103 (9)   142 (10)   
2011     79 (9)     89 (8)    0 (NaN)    0 (NaN)    106 (9)   142 (10)   
2012     79 (9)     93 (9)     26 (8)     25 (7)    105 (9)   138 (10)   
2013     79 (9)     95 (9)     26 (8)     25 (7)    109 (9)   140 (11)   
2014     76 (9)     94 (9)     28 (8)     26 (7)    111 (9)   138 (11)   
2015     76 (9)     93 (9)     28 (8)     26 (7)    111 (9)   140 (11)   
2016     74 (9)     90 (8)     28 (8)     27 (7)    113 (9)   135 (11)   
2017     79 (9)     82 (8)     29 (8)     27 (7)    116 (9)   144 (11)   
2018     82 (9)     79 (8)     30 (9)     28 (8)    116 (9)   144 (11)   
2019     83 (9)     80 (8)     30 (9)     28 (8)    112 (9)   150 (11)   
2020     88 (9)     85 (8)     30 (9)     27 (8)    111 (9)   152 (11)   
2021     86 (9)     90 (8)     31 (9)     27 (8)    113 (9)   151 (11)   
2022     88 (9)     84 (9)     31 (9)     27 (7)    116 (9)   150 (11)   
2023     85 (9)     82 (9)     30 (9)     27 (7)    115 (9)   142 (11)   

     SW (Err %)  
1986    0 (NaN)  
1987    0 (NaN)  
1988    0 (NaN)  
1989    0 (NaN)  
1990    0 (NaN)  
1991    0 (NaN)  
1992    0 (NaN)  
1993    19 (10)  
1994    0 (NaN)  
1995    0 (NaN)  
1996    0 (NaN)  
1997    0 (NaN)  
1998    0 (NaN)  
1999    0 (NaN)  
2000    19 (10)  
2001    19 (10)  
2002    19 (10)  
2003    0 (NaN)  
2004    0 (NaN)  
2005    20 (10)  
2006    20 (10)  
2007    19 (10)  
2008    18 (10)  
2009    18 (10)  
2010    17 (10)  
2011    19 (10)  
2012    19 (10)  
2013    19 (10)  
2014    19 (10)  
2015    19 (10)  
2016    18 (10)  
2017    19 (10)  
2018    18 (10)  
2019    19 (10)  
2020    19 (10)  
2021    20 (10)  
2022    19 (10)  
2023    19 (10)  
#+end_example
: <Figure size 648x504 with 2 Axes>
:END:

*** Region & Catchment Contributions
:PROPERTIES:
:header-args:jupyter-python+: :tangle no
:END:
**** 2000 to present mean
:PROPERTIES:
:ID:       eca400fe-cffc-4e6b-8fc1-694945093adb
:END:
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
D = pd.read_csv("./out/GIS_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/GIS_err.csv", index_col=0, parse_dates=True)

D = D[D.index.year >= 2000]\
    .resample('1D',axis='rows')\
    .mean()\
    .interpolate(method='time',limit_area='inside')\
    .mean()

err = err[err.index.year >= 2000]\
      .resample('1D',axis='rows')\
      .mean()\
      .interpolate(method='time',limit_area='inside')\
      .mean()

print(D.values)
print(err.values)
#+END_SRC

#+RESULTS:
: [481.82975469]
: [44.45386272]




**** Discharge time series
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
D = pd.read_csv("./out/GIS_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/GIS_err.csv", index_col=0, parse_dates=True)

D = D.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()
err = err.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

df = pd.DataFrame(index=D.index)
df['D'] = D
df['err'] = err

print("Min: ", df.loc[df['D'].idxmin])
print("Max: ", df.loc[df['D'].idxmin])
df
#+END_SRC

#+RESULTS:
: Min:  D      427.319029
: err     39.061874
: Name: 1995-12-31 00:00:00, dtype: float64
: Max:  D      427.319029
: err     39.061874
: Name: 1995-12-31 00:00:00, dtype: float64
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)


**** Contribution from SE
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
D = pd.read_csv("./out/region_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/region_err.csv", index_col=0, parse_dates=True)

D = D.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()
err = err.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

print("D SE described:\n", D['SE'].describe())
print("\nD SE err percent:", (err['SE']/D['SE']*100).describe())

df = pd.DataFrame(index=D.index)
df['SE'] = D['SE']
df['SEerr'] = err['SE']
df
#+END_SRC

#+RESULTS:
#+begin_example
D SE described:
 count     38.000000
mean     138.291279
std        6.892419
min      124.989006
25%      132.422066
50%      138.057842
75%      143.363096
max      152.195128
Name: SE, dtype: float64

D SE err percent: count    38.000000
mean     10.397273
std       0.243655
min       9.990886
25%      10.202179
50%      10.329802
75%      10.526437
max      10.886265
Name: SE, dtype: float64
Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)
#+end_example

**** Contribution from SE relative to the total
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
D = pd.read_csv("./out/region_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/region_err.csv", index_col=0, parse_dates=True)

D = D.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()
err = err.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

D_SE = D['SE']
# D_rest = D.drop(columns='SE').sum(axis='columns')
D_rest = D.sum(axis='columns')

print((D_SE/D_rest*100).describe())
print("")
print(D_SE/D_rest*100)
#+END_SRC

#+RESULTS:
#+begin_example
count    38.000000
mean     29.713065
std       1.099440
min      27.808566
25%      29.031697
50%      29.640930
75%      30.371081
max      32.596791
dtype: float64

Date
1986-12-31    32.040417
1987-12-31    32.596791
1988-12-31    30.885145
1989-12-31    29.090778
1990-12-31    28.958664
1991-12-31    29.502650
1992-12-31    29.717096
1993-12-31    29.794237
1994-12-31    30.890164
1995-12-31    31.683188
1996-12-31    31.350933
1997-12-31    31.073897
1998-12-31    30.408797
1999-12-31    30.458090
2000-12-31    29.694343
2001-12-31    29.012003
2002-12-31    29.661837
2003-12-31    30.102408
2004-12-31    30.544283
2005-12-31    30.257933
2006-12-31    29.194009
2007-12-31    28.983158
2008-12-31    29.384475
2009-12-31    29.753981
2010-12-31    29.668176
2011-12-31    29.161677
2012-12-31    28.536150
2013-12-31    28.330343
2014-12-31    28.010865
2015-12-31    28.382860
2016-12-31    27.808566
2017-12-31    29.108359
2018-12-31    28.934484
2019-12-31    29.819273
2020-12-31    29.620024
2021-12-31    29.107293
2022-12-31    29.134331
2023-12-31    28.434808
Freq: A-DEC, dtype: float64
#+end_example


**** Contribution from others relative to the total
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
D = pd.read_csv("./out/region_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/region_err.csv", index_col=0, parse_dates=True)

D = D.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()
err = err.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

print("\nNO+NE+NW:", (D[['NO','NE','NW']].sum(axis='columns')).describe()[['min','max']])

# print("\nERR NO+NE+NW:", (err[['NO','NE','NW']].sum(axis='columns')).describe()[['mean']])

print("\nNO+NE+NW%:", (D[['NO','NE','NW']].sum(axis='columns')/D.sum(axis='columns')*100).describe()[['mean']])

print("\nNW increase:", D['NW'])
      
# D_SE = D['SE']
# # D_rest = D.drop(columns='SE').sum(axis='columns')
# D_rest = D.sum(axis='columns')

# print((D_SE/D_rest*100).describe())
# print("")
# print(D_SE/D_rest*100)
#+END_SRC

#+RESULTS:
#+begin_example

NO+NE+NW: min    136.428939
max    174.103273
dtype: float64

NO+NE+NW%: mean    32.58172
dtype: float64

NW increase: Date
1986-12-31     96.645465
1987-12-31     92.974927
1988-12-31     95.109558
1989-12-31    101.858613
1990-12-31    104.692036
1991-12-31    100.315951
1992-12-31     98.081768
1993-12-31     98.754362
1994-12-31     96.692112
1995-12-31     93.941137
1996-12-31     92.816277
1997-12-31     92.313659
1998-12-31     92.488797
1999-12-31     91.119894
2000-12-31     91.680503
2001-12-31     90.120946
2002-12-31     91.902165
2003-12-31     94.317583
2004-12-31     97.661136
2005-12-31     98.691659
2006-12-31     96.866300
2007-12-31     96.577331
2008-12-31     98.545629
2009-12-31    101.659798
2010-12-31    102.365247
2011-12-31    106.259923
2012-12-31    105.166248
2013-12-31    108.893707
2014-12-31    111.026920
2015-12-31    111.183305
2016-12-31    113.011913
2017-12-31    115.667132
2018-12-31    116.099060
2019-12-31    112.183245
2020-12-31    111.312978
2021-12-31    113.320830
2022-12-31    116.252923
2023-12-31    115.191811
Freq: A-DEC, Name: NW, dtype: float64
#+end_example

**** Sermeq Kujalleq (Jakobshavn Isbræ)
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
D = pd.read_csv("./out/sector_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/sector_err.csv", index_col=0, parse_dates=True)

D = D['JAKOBSHAVN_ISBRAE'].resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

err = err['JAKOBSHAVN_ISBRAE'].resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

print("Jakobshavn described:\n", D.describe())

df = pd.DataFrame(index=D.index)
df['Jako'] = D
df['err'] = err
df
#+END_SRC

#+RESULTS:
#+begin_example
Jakobshavn described:
 count    38.000000
mean     37.746250
std       8.683167
min      22.791587
25%      28.544254
50%      39.219407
75%      44.484836
max      52.157311
Name: JAKOBSHAVN_ISBRAE, dtype: float64
Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)
#+end_example

*** Discharge Time Series - Sectors
#+BEGIN_SRC jupyter-python :results raw drawer :display text/plain :eval no-export
import matplotlib.gridspec as gridspec
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from cycler import cycler
plt.rcParams['axes.prop_cycle'] = cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', \
                                                   '#9467bd', '#8c564b', '#e377c2', '#bcbd22', '#17becf'])

plt.close(1)

fig = plt.figure(1, figsize=(9,5)) # w,h
fig.clf()
# fig.set_tight_layout(True)
grid = plt.GridSpec(2, 1, height_ratios=[1,10], hspace=0.1) # h, w


ax_D = fig.add_subplot(grid[1,:])
ax_coverage = fig.add_subplot(grid[0,:], sharex=ax_D)

from adjust_spines import adjust_spines as adj
adj(ax_D, ['left','bottom'])
adj(ax_coverage, ['left'])
ax_coverage.minorticks_off()
ax_coverage.tick_params(length=0, which='both', axis='x')


D = pd.read_csv("./out/sector_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/sector_err.csv", index_col=0, parse_dates=True)
coverage = pd.read_csv("./out/sector_coverage.csv", index_col=0, parse_dates=True)

THRESH = coverage < 0.5
D[THRESH] = np.nan
err[THRESH] = np.nan
coverage[THRESH] = np.nan


def pad_df(df):
    df = df.append(pd.DataFrame(index=np.array(['1986-01-01']).astype('datetime64[ns]')), sort=True)
    idx = str(df.index.year.max())+'-12-31'
    df = df.append(pd.DataFrame(index=np.array([idx]).astype('datetime64[ns]')), sort=True)
    df = df.sort_index()
    return df

D = pad_df(D)
err = pad_df(err)
coverage = pad_df(coverage)

### Take annual average from daily interpolated rather than the existing samples.
D_day_year = D.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()
err_day_year=err.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()


# No annual average if few sample
num_obs = D.resample('Y').count()
D_day_year[num_obs<=3] = np.nan
err_day_year[num_obs<=3] = np.nan


# largest average for last year
D_sort = D.resample('Y', axis='rows')\
          .mean()\
          .iloc[-1]\
          .sort_values(ascending=False)

LABELS={}
# for k in D_sort.head(8).index: LABELS[k] = k
# Use the last       ^ glaciers

# Make legend pretty
LABELS['JAKOBSHAVN_ISBRAE'] = 'Sermeq Kujalleq (Jakobshavn Isbræ)'
LABELS['HELHEIMGLETSCHER'] = 'Helheim Gletsjer'
LABELS['KANGERLUSSUAQ'] = 'Kangerlussuaq Gletsjer'
LABELS['KOGE_BUGT_C'] = '(Køge Bugt C)'
LABELS['ZACHARIAE_ISSTROM'] = 'Zachariae Isstrøm'
LABELS['RINK_ISBRAE'] = 'Kangilliup Sermia (Rink Isbræ)'
LABELS['NIOGHALVFJERDSFJORDEN'] = '(Nioghalvfjerdsbrae)'
LABELS['PETERMANN_GLETSCHER'] ='Petermann Gletsjer'

SYMBOLS={}
SYMBOLS['JAKOBSHAVN_ISBRAE'] = 'o'
SYMBOLS['HELHEIMGLETSCHER'] = 's'
SYMBOLS['KANGERLUSSUAQ'] = 'v'
SYMBOLS['KOGE_BUGT_C'] = '^'
SYMBOLS['NIOGHALVFJERDSFJORDEN'] = 'v'
SYMBOLS['RINK_ISBRAE'] = 's'
SYMBOLS['ZACHARIAE_ISSTROM'] = 'o'
SYMBOLS['PETERMANN_GLETSCHER'] ='^'

MS=4
Z=99
for g in LABELS.keys(): # for each glacier

    # scatter of symbols
    e = ax_D.errorbar(D.loc[:,g].index,
                      D.loc[:,g].values,
                      label=LABELS[g],
                      fmt=SYMBOLS[g],
                      mfc='none',
                      ms=MS)

    # Annual average
    C = e.lines[0].get_color()
    D_day_year.loc[:,g].plot(drawstyle='steps', linewidth=2,
                             label='',
                             ax=ax_D,
                             alpha=0.75, color=C, zorder=Z)

    # Error bars, each one w/ custom opacity.
    # Also, fill symbols w/ same opacity.
    for i,idx in enumerate(D.loc[:,g].index):
        alpha = coverage.loc[:,g].values[i]
        if np.isnan(alpha): alpha = 0
        if alpha < 0: alpha = 0
        if alpha > 1: alpha = 1
        ax_D.errorbar(D.loc[:,g].index[i],
                      D.loc[:,g].values[i],
                      yerr=err.loc[:,g].values[i],
                      alpha=alpha,
                      label='',
                      marker=SYMBOLS[g],
                      ecolor='grey',
                      color = C,
                      mfc=C, mec=C,
                      ms=MS)


    # Coverage scatter on top axis
    ax_coverage.scatter(D.loc[:,g].index,
                        coverage.loc[:,g].values*100,
                        alpha=0.25,
                        marker=SYMBOLS[g],
                        facecolor='none',
                        s=10,
                        color=C)

# yl = ax_D.get_ylim()

ax_D.legend(fontsize=8, ncol=2, loc=(0.0, 0.82), fancybox=False, frameon=False)
ax_D.set_xlabel('Time [Years]')
ax_D.set_ylabel('Discharge [Gt yr$^{-1}$]')
ax_D.set_xlim(D.index[0], D.index[-1])


import matplotlib.dates as mdates
ax_D.xaxis.set_major_locator(mdates.YearLocator())
ax_D.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
ax_D.xaxis.set_tick_params(rotation=-90)
for tick in ax_D.xaxis.get_majorticklabels():
    tick.set_horizontalalignment("left")

ax_coverage.set_ylabel('Coverage [%]')
ax_coverage.set_ylim([45,105])
ax_coverage.set_yticks([50,100])
ax_coverage.spines['left'].set_bounds(ax_coverage.get_ylim()[0],100)
plt.setp(ax_coverage.get_xticklabels(), visible=False)

plt.savefig('./figs/discharge_ts_topfew.png', transparent=False, bbox_inches='tight', dpi=300)

Err_pct = (err_day_year / D_day_year*100).round().fillna(value=0).astype(int).astype(str)
Err_pct = Err_pct[list(LABELS.keys())]
tbl = D_day_year[list(LABELS.keys())].round().fillna(value=0).astype(int).astype(str) + ' (' + Err_pct+')'
tbl.index = tbl.index.year.fillna(value=0).astype(str)
tbl.columns = [_ + ' (%)' for _ in tbl.columns]
tbl
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
     JAKOBSHAVN_ISBRAE (%) HELHEIMGLETSCHER (%) KANGERLUSSUAQ (%)  \
1986                 0 (0)               32 (6)            18 (5)   
1987                 0 (0)               32 (6)            19 (5)   
1988               27 (10)               29 (6)            19 (5)   
1989               29 (10)               27 (6)            22 (4)   
1990               27 (10)               27 (6)            22 (5)   
1991                 0 (0)                0 (0)             0 (0)   
1992                 0 (0)                0 (0)             0 (0)   
1993                 0 (0)                0 (0)             0 (0)   
1994                27 (9)                0 (0)            19 (5)   
1995                 0 (0)                0 (0)             0 (0)   
1996                 0 (0)                0 (0)             0 (0)   
1997                 0 (0)                0 (0)             0 (0)   
1998                32 (9)               23 (8)            21 (5)   
1999                 0 (0)                0 (0)             0 (0)   
2000                36 (9)               23 (8)            21 (5)   
2001                38 (9)               23 (8)            22 (5)   
2002                39 (9)               26 (8)            24 (5)   
2003                41 (9)               28 (8)            26 (5)   
2004                42 (9)               29 (8)            29 (5)   
2005                43 (9)                0 (0)            35 (5)   
2006                44 (9)               28 (8)            35 (5)   
2007                44 (9)               27 (8)            31 (5)   
2008                45 (9)               27 (8)            29 (5)   
2009                46 (9)               28 (8)            27 (5)   
2010                47 (9)               28 (8)            26 (5)   
2011                47 (9)               27 (8)            28 (5)   
2012                52 (9)               26 (8)            28 (5)   
2013                52 (9)               26 (8)            28 (5)   
2014                50 (9)               25 (8)            26 (5)   
2015                49 (9)               28 (8)            25 (5)   
2016                46 (9)               27 (8)            24 (5)   
2017                39 (9)               31 (8)            26 (5)   
2018                36 (9)               29 (8)            28 (5)   
2019                39 (9)               32 (8)            28 (5)   
2020                42 (9)               30 (8)            28 (5)   
2021                48 (9)               30 (8)            27 (5)   
2022                42 (9)               31 (8)            29 (5)   
2023                40 (9)               30 (8)            27 (5)   

     KOGE_BUGT_C (%) ZACHARIAE_ISSTROM (%) RINK_ISBRAE (%)  \
1986          16 (6)                 0 (0)          13 (7)   
1987          16 (6)                 9 (9)          12 (7)   
1988           0 (0)                 9 (9)          12 (7)   
1989           0 (0)                10 (9)          13 (7)   
1990           0 (0)                10 (9)          12 (7)   
1991           0 (0)                 0 (0)           0 (0)   
1992           0 (0)                 0 (0)           0 (0)   
1993           0 (0)                 0 (0)           0 (0)   
1994           0 (0)                10 (9)           0 (0)   
1995           0 (0)                 0 (0)           0 (0)   
1996           0 (0)                 0 (0)           0 (0)   
1997           0 (0)                 0 (0)           0 (0)   
1998           0 (0)                 9 (9)           0 (0)   
1999           0 (0)                 9 (9)           0 (0)   
2000          15 (6)                10 (9)          13 (7)   
2001          15 (6)                 0 (0)          13 (7)   
2002           0 (0)                 0 (0)          13 (7)   
2003           0 (0)                 0 (0)           0 (0)   
2004          16 (6)                 0 (0)          13 (7)   
2005          16 (6)                 0 (0)          13 (7)   
2006          16 (6)                 0 (0)          13 (7)   
2007          15 (6)                11 (9)          13 (7)   
2008          17 (6)                 0 (0)          13 (7)   
2009          18 (6)                12 (9)          13 (7)   
2010          18 (6)                 0 (0)          13 (7)   
2011          17 (6)                12 (9)          13 (7)   
2012          17 (6)                13 (9)          13 (7)   
2013          16 (6)                13 (9)          12 (7)   
2014          17 (6)                14 (9)          12 (7)   
2015          17 (6)                14 (9)          13 (7)   
2016          14 (6)                15 (9)          13 (7)   
2017          16 (6)                15 (9)          13 (7)   
2018          17 (6)                16 (9)          12 (7)   
2019          16 (6)                16 (9)          12 (7)   
2020          17 (6)                16 (9)          12 (7)   
2021          17 (6)                16 (9)          12 (7)   
2022          16 (6)                17 (9)          12 (7)   
2023          13 (6)                16 (9)          12 (7)   

     NIOGHALVFJERDSFJORDEN (%) PETERMANN_GLETSCHER (%)  
1986                    12 (6)                   0 (0)  
1987                    12 (6)                  12 (4)  
1988                    12 (6)                  11 (4)  
1989                    11 (6)                  11 (4)  
1990                    12 (6)                  11 (4)  
1991                     0 (0)                   0 (0)  
1992                     0 (0)                   0 (0)  
1993                     0 (0)                   0 (0)  
1994                     0 (0)                  12 (4)  
1995                     0 (0)                   0 (0)  
1996                     0 (0)                   0 (0)  
1997                     0 (0)                   0 (0)  
1998                    11 (6)                  11 (4)  
1999                     0 (0)                   0 (0)  
2000                    12 (6)                  12 (4)  
2001                     0 (0)                   0 (0)  
2002                     0 (0)                   0 (0)  
2003                     0 (0)                   0 (0)  
2004                     0 (0)                   0 (0)  
2005                     0 (0)                   0 (0)  
2006                    12 (6)                   0 (0)  
2007                     0 (0)                  12 (4)  
2008                     0 (0)                   0 (0)  
2009                    12 (6)                   0 (0)  
2010                     0 (0)                  14 (4)  
2011                    12 (6)                   0 (0)  
2012                    12 (6)                  12 (4)  
2013                    12 (6)                  12 (4)  
2014                    13 (6)                  12 (4)  
2015                    13 (6)                  12 (4)  
2016                    13 (6)                  12 (4)  
2017                    13 (6)                  12 (4)  
2018                    13 (6)                  12 (4)  
2019                    14 (6)                  12 (4)  
2020                    13 (6)                  12 (4)  
2021                    13 (6)                  12 (4)  
2022                    13 (6)                  12 (4)  
2023                    13 (6)                  12 (4)  
#+end_example
: <Figure size 648x360 with 2 Axes>
:END:

:END:
:END:
:end:

*** Køge Bugt
:PROPERTIES:
:header-args:jupyter-python+: :tangle no
:END:

#+BEGIN_SRC jupyter-python :session koge_bugt :results drawer
import os
import numpy as np
import shapefile

import matplotlib.pyplot as plt
from grass_session import Session
from grass.pygrass.modules.shortcuts import general as g
from grass.pygrass.modules.shortcuts import raster as r
from grass.pygrass.modules.shortcuts import vector as v
from grass.pygrass.modules.shortcuts import display as d
from grass.script import array as garray
from grass.script import core as gcore

if 'bamber' not in locals():
    PERMANENT = Session()
    PERMANENT.open(gisdb="./", location="G", mapset="tmp_KogeBugt", create_opts="")
    
    x = garray.array("x@PERMANENT", null=np.nan)
    y = garray.array("y@PERMANENT", null=np.nan)
    vel = garray.array("vel_baseline@MEaSUREs.0478", null=np.nan)
    vx = garray.array("vx_baseline@MEaSUREs.0478", null=np.nan)
    vy = garray.array("vy_baseline@MEaSUREs.0478", null=np.nan)
    z_s = garray.array("surface@BedMachine", null=np.nan)
    z_b = garray.array("bed@BedMachine", null=np.nan)
    bamber = garray.array("thickness@Bamber_2013", null=np.nan)
    bamber[bamber == 0] = np.nan
    z_s[z_s == 0] = np.nan
    z_b[z_s == 0] = np.nan
    thick = z_s - z_b
    diff = thick - bamber
    gates = garray.array("gates_final@gates_vel_buf", null=np.nan)

    # v.out_ogr(input='gate_lines', output='./tmp/SHP/E2014_gates.shp', format='ESRI_Shapefile', overwrite=True)
    # gates_E2014 = shapefile.Reader("./tmp/SHP/E2014_gates.shp")
    PERMANENT.close()

# get numbers below by zooming in, then plt.xlim(), plt.ylim()    
#     a.set_xlim([160000, 200000])
#     a.set_ylim([-2750000, -2710000])

if 'x_koge' not in locals():
    idx_x0 = np.where(x[0,:] > 170000)[0][0]    
    idx_x1 = np.where(x[0,:] > 200000)[0][0]
    idx_y0 = np.where(y[:,0] < -2710000)[0][0]
    # idx_y1 = np.where(y[:,0] < -2750000)[0][0]
    idx_y1 = np.where(y[:,0] < -2735000)[0][0]
    vel_koge = vel[idx_y0:idx_y1, idx_x0:idx_x1]
    vx_koge = vx[idx_y0:idx_y1, idx_x0:idx_x1]
    vy_koge = vy[idx_y0:idx_y1, idx_x0:idx_x1]
    thick_koge = thick[idx_y0:idx_y1, idx_x0:idx_x1]
    bamber_koge = bamber[idx_y0:idx_y1, idx_x0:idx_x1]
    diff_koge = diff[idx_y0:idx_y1, idx_x0:idx_x1]
    x_koge = x[idx_y0:idx_y1, idx_x0:idx_x1]
    y_koge = y[idx_y0:idx_y1, idx_x0:idx_x1]

# plt.close(1)
plt.clf()
fig = plt.figure(1, figsize=(8,6)) # w,h
# get_current_fig_manager().window.move(0,0)
fig.clf()
fig.set_tight_layout(True)

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax3 = fig.add_subplot(223)
ax4 = fig.add_subplot(224)

# extent = [x.min(),x.max(),y.min(),y.max()]
extent = [x_koge.min(), x_koge.max(), y_koge.min(), y_koge.max()]

plt.cm.Blues.set_bad('gray', 0.3)
plt.cm.RdBu_r.set_bad('gray', 0.3)
plt.cm.viridis.set_bad('gray', 0.3)
im1 = ax1.imshow(np.log10(vel_koge), extent=extent)
im2 = ax2.imshow(thick_koge, extent=extent, cmap=plt.cm.Blues, vmin=0, vmax=1500)
im3 = ax3.imshow(bamber_koge, extent=extent, cmap=plt.cm.Blues, vmin=0, vmax=1500)
im4 = ax4.imshow(diff_koge, extent=extent, cmap=plt.cm.RdBu_r, vmin=-1500, vmax=1500)

label = ['a','b','c','d']  
for i,a in enumerate([ax1,ax2,ax3,ax4]):
    C = plt.cm.gray_r if a == ax1 else plt.cm.gray
    a.imshow(gates[idx_y0:idx_y1, idx_x0:idx_x1], extent=extent, cmap=C)
    C = 'w' if i <= 2 else 'k'
    a.text(0.03,0.88,label[i], transform=a.transAxes, color=C, fontsize=14)
    a.set_yticklabels([])
    a.set_xticklabels([])

from mpl_toolkits.axes_grid1 import make_axes_locatable
# for i,a in zip([im1,im2,im3,im4],[ax1,ax2,ax3,ax4]):
divider = make_axes_locatable(ax1); cax = divider.append_axes("right", size="5%", pad=0.05)
c = fig.colorbar(im1, cax=cax); c.set_label('log$_{10}$ Speed [m yr$^{-1}$]')
divider = make_axes_locatable(ax2); cax = divider.append_axes("right", size="5%", pad=0.05)
c = fig.colorbar(im2, cax=cax); c.set_label('Thickness [m]')
divider = make_axes_locatable(ax3); cax = divider.append_axes("right", size="5%", pad=0.05)
c = fig.colorbar(im3, cax=cax); c.set_label('Thickness [m]')
divider = make_axes_locatable(ax4); cax = divider.append_axes("right", size="5%", pad=0.05)
c = fig.colorbar(im4, cax=cax); c.set_label('$\Delta$ Thickness [m]')

plt.savefig('./figs/koge_bugt.png', transparent=True, bbox_inches='tight', dpi=300)
plt.savefig('./figs/koge_bugt.pdf', transparent=True, bbox_inches='tight', dpi=300)
#+END_SRC

*** Adjust Spines

http://matplotlib.org/examples/pylab_examples/spine_placement_demo.html

#+BEGIN_SRC python :tangle adjust_spines.py
def adjust_spines(ax,spines, offset=10):
    for loc, spine in ax.spines.items():
        if loc in spines:
            spine.set_position(('outward', offset)) # outward by 10 points
            #spine.set_smart_bounds(True)
        else:
            spine.set_color('none') # don't draw spine

        # turn off ticks where there is no spine
        if 'left' in spines:
            ax.yaxis.set_tick_params(length=5)
            ax.yaxis.set_tick_params(direction='out')
            ax.yaxis.set_ticks_position('left')
            ax.yaxis.set_label_position('left')
        elif 'right' in spines:
            ax.yaxis.set_tick_params(length=5)
            ax.yaxis.set_tick_params(direction='out')
            ax.yaxis.set_ticks_position('right')
            ax.yaxis.set_label_position('right')
        else: # no yaxis ticks
            ax.yaxis.set_ticks([])

        if 'bottom' in spines:
            ax.xaxis.set_ticks_position('bottom')
            ax.xaxis.set_tick_params(length=5)
            ax.xaxis.set_tick_params(direction='out')
            ax.xaxis.set_label_position('bottom')
        elif 'top' in spines:
            ax.xaxis.set_ticks_position('top')
            ax.xaxis.set_tick_params(length=5)
            ax.xaxis.set_tick_params(direction='out')
            ax.xaxis.set_label_position('top')
        else: # no xaxis ticks
            ax.xaxis.set_ticks([])


if __name__ == "__main__":
    import numpy as np            
    x = np.random.random(100)
    fig = plt.figure(100)
    fig.clf()
    ax = fig.add_axes([0.1,0.1,0.8,0.8])
    ax.plot(x)
    adjust_spines(ax,["left","bottom"])

#+END_SRC
#+RESULTS:

** Auto update

*** Local
#+BEGIN_SRC bash :tangle update.sh
<<MSGS_pretty_print>>

MSG_OK "Updating Sentinel velocity files..."
workingdir=$(pwd)
cd ${DATADIR}/Promice200m/

if [[ -e urls.txt ]]; then cp urls.txt urls.txt.last; fi
#curl https://dataverse.geus.dk/api/datasets/:persistentId?persistentId=doi:10.22008/promice/data/sentinel1icevelocity/greenlandicesheet | tr ',' '\n' | grep -E '"persistentId"' | cut -d'"' -f4 > urls.txt
curl https://dataverse.geus.dk/api/datasets/:persistentId?persistentId=doi:10.22008/FK2/ZEGVXU | tr ',' '\n' | grep -E '"persistentId"' | cut -d'"' -f4 > urls.txt

if cmp -s urls.txt urls.txt.last; then
  MSG_WARN "No new Sentinel1 files..."
  # exit 255
fi

# for PID in $(cat urls.txt); do
for PID in $(cat urls.txt | tail -n5); do
  wget --content-disposition --continue "https://dataverse.geus.dk/api/access/datafile/:persistentId?persistentId=${PID}"
done

MSG_OK "New Sentinel velocity files found..."
cd ${workingdir}

docker run -it --user $(id -u):$(id -g) --mount type=bind,src=${DATADIR},dst=/data --mount type=bind,src=$(pwd),dst=/home/user --env PARALLEL="--delay 0.1 -j -1" mankoff/ice_discharge:grass grass ./G/PERMANENT --exec ./update_worker.sh

cp ./tmp/dat_100_5000.csv ./tmp/dat_100_5000.csv.last

docker run -it --user $(id -u):$(id -g) --mount type=bind,src=${DATADIR},dst=/data --mount type=bind,src=$(pwd),dst=/home/user --env PARALLEL="--delay 0.1 -j -1" mankoff/ice_discharge:grass grass ./G/PERMANENT --exec ./export.sh

if cmp -s ./tmp/dat_100_5000.csv ./tmp/dat_100_5000.csv.last; then 
  MSG_ERR "No change"
  exit 255
fi
#+END_SRC

#+BEGIN_SRC bash :tangle update_worker.sh
<<MSGS_pretty_print>>
<<GRASS_config>>
<<sentinel1_import>>
<<MEaSURES_0766_import>>

MAPSET=gates_vel_buf
<<sentinel1_effective_velocity>>
<<MEaSUREs_0766_effective_velocity>>
#+END_SRC
*** Upload

# python -m pip install --upgrade git+https://github.com/aussda/pyDataverse.git@3b040ff23b665ec2650bebcf4bd5478de6881af0

#+BEGIN_SRC jupyter-python :tangle upload.py
from pyDataverse.api import NativeApi
import os
import json

import subprocess
hash = subprocess.check_output(["git", "describe", "--always"]).strip().decode('utf-8')
hash = subprocess.check_output(["git", "describe", "--always", "--dirty='*'"]).strip().decode('utf-8')
assert("*" not in hash)

import secret
api_token = secret.dataverse_api_token

base_url = 'https://dataverse.geus.dk/'
api = NativeApi(base_url, api_token) # establish connection

# get dataverse metadata
identifier = 'doi:10.22008/promice/data/ice_discharge/d/v02'
resp = api.get_dataset(identifier)
files = resp.json()['data']['latestVersion']['files']
for f in files:
    persistentId = f['dataFile']['persistentId']
    description = f['dataFile']['description']
    filename = f['dataFile']['filename']
    fileId = f['dataFile']['id']
    print(filename)

    assert(os.path.isfile("./out/"+filename))

    description = description.split(".")[0] + ". "
    description = description + "Git hash: " + hash
    
    if 'content' in locals(): del(content)
    if filename[-3:] == ".nc": content = "application/x-netcdf"
    if filename[-3:] == "csv": content = "text/csv"
    if filename[-3:] == "txt": content = "text/plain"
    json_dict={"description":description, 
               "directoryLabel":".", 
               "forceReplace":True, 
               "filename":filename, 
               "label":filename, 
               "contentType":content}

    json_str = json.dumps(json_dict)
    d = api.replace_datafile(persistentId, "./out/"+filename, json_str)
  
    if d.json()["status"] == "ERROR": 
        print(d.content)
        print("\n")
        continue

    # need to update filenames after uploading because of DataVerse bug
    # https://github.com/IQSS/dataverse/issues/7223
    file_id = d.json()['data']['files'][0]['dataFile']['id']
    d2 = api.update_datafile_metadata(file_id, json_str=json_str, is_filepid=False)

#resp = api.publish_dataset(identifier, "major")
#+END_SRC


** Docker
*** GRASS
:PROPERTIES:
:header-args:docker: :eval no
:END:
**** Dockerfile

#+BEGIN_SRC docker :tangle docker/grass/Dockerfile :mkdirp docker/grass
FROM ubuntu:20.04

LABEL authors="Ken Mankoff"
LABEL maintainer="kdm@geus.dk"

# system environment
ENV DEBIAN_FRONTEND noninteractive

RUN apt-get -y update && apt-get install -y --no-install-recommends --no-install-suggests \
      bc \
      bsdmainutils \
      datamash \
      gdal-bin \
      grass \
      netcdf-bin \
      parallel \
      proj-bin \
      proj-data \
      zip \
  && apt-get autoremove -y \
  && apt-get clean -y \ 
  && rm -rf /var/lib/apt/lists/*

RUN echo LANG="en_US.UTF-8" > /etc/default/locale

ENV LANGUAGE en_US.UTF-8
ENV LANG C
ENV LC_ALL C
ENV LC_CTYPE C

ENV SHELL /bin/bash

# create a user
RUN useradd --create-home user && chmod a+rwx /home/user
ENV HOME /home/user
WORKDIR /home/user

RUN mkdir -p /data
ENV DATADIR /data

# switch the user
USER user

CMD ["/usr/bin/grass", "--version"]
#+END_SRC

**** Build
#+BEGIN_SRC bash
# docker build -f Dockerfile_grass -t ice_discharge_grass .
cd docker/grass
docker build -t ice_discharge_grass .
docker run -it ice_discharge_grass # run it
#+END_SRC

**** Test

#+BEGIN_SRC bash
container_args ?= run -it --cpus 7 --user $(shell id -u):$(shell id -g) --mount type=bind,src=$${DATADIR},dst=/data --mount type=bind,src=$(shell pwd),dst=/work --env PARALLEL="--delay 0.1" ice_discharge_grass
#+END_SRC

**** Deploy

#+BEGIN_SRC bash
# docker tag local-image:tagname new-repo:tagname
docker tag ice_discharge_grass mankoff/ice_discharge:grass
docker push mankoff/ice_discharge:grass
#+END_SRC


*** Python
:PROPERTIES:
:header-args:docker: :eval no
:END:

**** Dockerfile and supporting files

#+BEGIN_SRC docker :tangle docker/conda/Dockerfile :mkdirp docker/conda
FROM continuumio/miniconda3

RUN conda install \
  curl \
  cython \
  ipython \
  jupyter \
  matplotlib \
  numpy \
  pandas \
  pip \
  scipy \
  statsmodels \
  tabulate \
  xarray \
  && conda clean -a \
  && pip install --no-cache-dir \
  cfchecker \
  cfunits \
  grass-session \
  nc-time-axis \
  pyshp \
  semver \
  uncertainties \
  git+https://github.com/aussda/pyDataverse.git@3b040ff23b665ec2650bebcf4bd5478de6881af0

# create a user
RUN useradd --create-home user && chmod a+rwx /home/user
ENV HOME /home/user
WORKDIR /home/user

RUN mkdir -p /data
ENV DATADIR /data

# switch the user
USER user


# create a user
# RUN useradd -m -U user

# RUN chmod a+rwx /home/user
# ENV HOME /home/user
# RUN mkdir -p /data /work
# WORKDIR /work

# switch the user
# USER user

# RUN mkdir -p /data /work
# WORKDIR /work

# The code to run when container is started:
# ENTRYPOINT ["conda", "run", "-n", "ice_discharge", "python3"]

# For interactive shell
# RUN conda init bash
# RUN echo "conda activate ice_discharge" >> /root/.bashrc
#+END_SRC

**** Build
#+BEGIN_SRC bash
cd docker/conda
docker build -t ice_discharge_conda .
docker tag ice_discharge_conda:latest mankoff/ice_discharge:conda
docker run -it --mount type=bind,src=$(pwd),dst=/work mankoff/ice_discharge:conda python -c 'import pandas as pd; print(pd)'
#+END_SRC

**** Deploy

#+BEGIN_SRC bash
# docker tag local-image:tagname new-repo:tagname
docker tag ice_discharge_conda mankoff/ice_discharge:conda
docker push mankoff/ice_discharge:conda
#+END_SRC

**** enviroment.yml

It is more reproducible to use the Docker image =mankoff/ice_discharge:conda=, but for record-keeping sake, here is the Python environmnet.

#+BEGIN_SRC bash :results verbatim
docker run mankoff/ice_discharge:conda conda env export -n base
#+END_SRC

#+RESULTS:


** Emacs batch config

#+BEGIN_SRC emacs-lisp :results none :tangle emacs.el
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

(package-initialize)
;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq package-enable-at-startup nil)

(defvar use-package-verbose t)
(require 'use-package)
(setq use-package-always-ensure t)
(setq use-package-always-defer nil)
(use-package diminish)
(require 'bind-key)   


(setenv "PATH" (concat "/home/ice/miniconda3/bin:" (getenv "PATH")))
(setq exec-path (split-string (getenv "PATH") ":"))

(use-package org
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(;(emacs-lisp. t)   
     (shell . t)
     (calc . t)
     (python . t)
     (jupyter . t)
     ))

  (setq org-confirm-babel-evaluate nil) ;; don't ask to eval code
  (setq org-src-fontify-natively t)
  (setq org-export-use-babel t)
  (setq org-adapt-indentation nil)
  (setq org-edit-src-content-indentation 0)
  (setq org-src-preserve-indentation t))

(use-package jupyter
  :after org
  :init 
  ;;(add-hook 'org-mode-hook (lambda () (jupyter-org-interaction-mode)))
  :config 
  (setq jupyter-org-resource-directory "~/tmp/ob-jupyter-figs/")
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  :commands (jupyter-repl-history-previous jupyter-repl-history-next)
  :bind (:map jupyter-repl-mode-map
              ("C-n" . jupyter-repl-history-next)
              ("C-p" . jupyter-repl-history-previous))
  :custom-face
  (jupyter-repl-input-prompt ((t (:foreground "#000000"))))
  (jupyter-repl-output-prompt ((t (:foreground "#000000"))))
  (jupyter-repl-traceback ((t (:background "#FFFFFF"))))
)
#+END_SRC

* Supplementary Material                                :noexport:
:PROPERTIES:
:header-args:jupyter-python+: :tangle no
:END:
** Errors by gate sorted by total D, err, err %
**** Top by Discharge
#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/org :eval no-export
import pandas as pd
import numpy as np

err_gate = pd.read_csv('./tmp/err_gate.csv', index_col=0)
err_gate.loc['GIS'] = np.nan
err_gate.dropna(inplace=True)
err_gate.rename(columns = {'D':'D [Gt]', 
                           'E':'Error [Gt]',
                           'E%':'Error [%]'}, inplace=True)
 
err_gate.sort_values('D [Gt]', inplace=True, ascending=False)
err_gate = err_gate.iloc[:25]
err_gate
#+END_SRC

#+RESULTS:
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)

**** Top by Error [Gt]
#+BEGIN_SRC jupyter-python :results value :session discharge :display text/org :eval no-export
import pandas as pd
err_gate = pd.read_csv('./tmp/err_gate.csv', index_col=0)
err_gate.loc['GIS'] = np.nan
err_gate.dropna(inplace=True)
err_gate.rename(columns = {'D':'D [Gt]', 
                           'E':'Error [Gt]',
                           'E%':'Error [%]',
                           'Ew':'Error Weighted',
                           'Ew%':'Error Weighted %'}, inplace=True)

err_gate.sort_values('Error [Gt]', inplace=True, ascending=False)
err_gate = err_gate.iloc[:25]
err_gate
#+END_SRC

#+RESULTS:
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)


**** Top by Error [%]
#+BEGIN_SRC jupyter-python :results value :session discharge :display text/org :eval no-export
import pandas as pd
err_gate = pd.read_csv('./tmp/err_gate.csv', index_col=0)
err_gate.loc['GIS'] = np.nan
err_gate.dropna(inplace=True)
err_gate.rename(columns = {'D':'D [Gt]', 
                           'E':'Error [Gt]',
                           'E%':'Error [%]',
                           'Ew':'Error Weighted',
                           'Ew%':'Error Weighted %'}, inplace=True)

err_gate.sort_values('Error [%]', inplace=True, ascending=False)
err_gate = err_gate.iloc[:25]
err_gate
#+END_SRC

#+RESULTS:
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)

**** Bottom by Error [%]
#+BEGIN_SRC jupyter-python :results value :session discharge :display text/org :eval no-export
import pandas as pd
err_gate = pd.read_csv('./tmp/err_gate.csv', index_col=0)
err_gate.loc['GIS'] = np.nan
err_gate.dropna(inplace=True)
err_gate.rename(columns = {'D':'D [Gt]', 
                           'E':'Error [Gt]',
                           'E%':'Error [%]',
                           'Ew':'Error Weighted',
                           'Ew%':'Error Weighted %'}, inplace=True)

err_gate.sort_values('Error [%]', inplace=True, ascending=True)
err_gate = err_gate.iloc[:25]
err_gate
#+END_SRC

#+RESULTS:
: Warning (jupyter): :execute-result did not return requested mimetype(s): (:text/org)


** Annual averages from observations or linear interpolation
Compute the annual average for all GIS and some other glaciers using two methods, and compare the differences
+ Method 1: Annual average from observations
+ Method 2: Annual average after linearly interpolating observations to daily resolution

NOTE - do this with the "rawest" velocity product prior to any interpolation.

#+BEGIN_SRC jupyter-python :session avgmethod :exports both :results raw drawer :display text/org
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import datetime as dt

if 'th' not in locals():
    <<load_data>>
    <<adjust_thickness>>
    <<adjust_thickness_fit>>

# What is D where velocity is directly observed, no velocity filling?
D = (fill*vel).apply(lambda c: c * (th['fit'].values * 200), axis=0) * 917 / 1E12

ann = pd.DataFrame(index = D.resample("A", axis='columns').mean().columns)
ann['obs'] = D.sum(axis='rows').resample('A').mean().values
ann['daily'] = np.nan
for y in np.arange(1985,2018):
    ann.loc[ann.index.year == y, 'daily'] \
        = D\
        .T[D.columns.year == y]\
        .T\
        .sum(axis='rows')\
        .resample('1D')\
        .mean()\
        .interpolate(method="time")\
        .resample("A")\
        .mean()\
        .values
    
ann['diff'] = ann['obs'] - ann['daily']
ann['diff [%]'] = 100 - ann['daily']/ann['obs']*100

print(ann.describe())

ann
#+END_SRC

** Køge Bugt Y2K
#+BEGIN_SRC jupyter-python :session kb_y2k :exports both :results raw drawer :display text/org
D = pd.read_csv("./out/sector_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/sector_err.csv", index_col=0, parse_dates=True)

S = "KOGE_BUGT_C"
D = D[S].resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

err = err[S].resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

print("Køge Bugt C described:\n", D.describe())

df = pd.DataFrame(index=D.index)
df['KB'] = D
df['err'] = err
df
#+END_SRC

* QA / QC / tests                                       :noexport:
** Files used in this work                              :noexport:
*** MEaSUREs
**** 0478
***** File List

#+NAME: QC_filelist_NSIDC_0478
#+BEGIN_SRC bash :results verbatim :eval no-export
find ${DATADIR}/MEaSUREs/NSIDC-0478.002 | sed "s:^${DATADIR}::" | LC_ALL=C sort
#+END_SRC

#+RESULTS: QC_filelist_NSIDC_0478
#+begin_example
/MEaSUREs/NSIDC-0478.002
/MEaSUREs/NSIDC-0478.002/2000.09.03
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2000.09.03/index.html
/MEaSUREs/NSIDC-0478.002/2005.12.13
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2005.12.13/index.html
/MEaSUREs/NSIDC-0478.002/2006.12.18
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2006.12.18/index.html
/MEaSUREs/NSIDC-0478.002/2007.09.07
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2007.09.07/index.html
/MEaSUREs/NSIDC-0478.002/2008.09.15
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2008.09.15/index.html
/MEaSUREs/NSIDC-0478.002/2009.09.02
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2009.09.02/index.html
/MEaSUREs/NSIDC-0478.002/2012.11.10
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2012.11.10/index.html
/MEaSUREs/NSIDC-0478.002/2014.09.01
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2014.09.01/index.html
/MEaSUREs/NSIDC-0478.002/2015.09.01
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2015.09.01/index.html
/MEaSUREs/NSIDC-0478.002/2016.09.01
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2016.09.01/index.html
/MEaSUREs/NSIDC-0478.002/2017.09.01
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2017.09.01/index.html
/MEaSUREs/NSIDC-0478.002/index.html
#+end_example


***** File Metadata

#+NAME: QC_gdalinfo_NSIDC_0478
#+BEGIN_SRC bash :results verbatim :eval no-export
somefile=$(find ${DATADIR}/MEaSUREs/NSIDC-0478.002 -name "*.tif"  | LC_ALL=C sort | grep ".*mosaic200.*vv.*" | head -n1)
md5sum ${somefile}
echo ""
gdalinfo -mm ${somefile}
#+END_SRC

#+RESULTS: QC_gdalinfo_NSIDC_0478
#+begin_example
9bf8fcf0c4add78ed54c4a35b444bdc3  /mnt/data/kdm/data/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_vv_v02.1.tif

Driver: GTiff/GeoTIFF
Files: /mnt/data/kdm/data/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_vv_v02.1.tif
Size is 7585, 13700
Coordinate System is:
PROJCRS["unnamed",
    BASEGEOGCRS["WGS 84",
        DATUM["World Geodetic System 1984",
            ELLIPSOID["WGS 84",6378137,298.257223563,
                LENGTHUNIT["metre",1]]],
        PRIMEM["Greenwich",0,
            ANGLEUNIT["degree",0.0174532925199433]],
        ID["EPSG",4326]],
    CONVERSION["Polar Stereographic (variant B)",
        METHOD["Polar Stereographic (variant B)",
            ID["EPSG",9829]],
        PARAMETER["Latitude of standard parallel",70,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8832]],
        PARAMETER["Longitude of origin",-45,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8833]],
        PARAMETER["False easting",0,
            LENGTHUNIT["metre",1],
            ID["EPSG",8806]],
        PARAMETER["False northing",0,
            LENGTHUNIT["metre",1],
            ID["EPSG",8807]]],
    CS[Cartesian,2],
        AXIS["(E)",south,
            MERIDIAN[90,
                ANGLEUNIT["degree",0.0174532925199433,
                    ID["EPSG",9122]]],
            ORDER[1],
            LENGTHUNIT["metre",1]],
        AXIS["(N)",south,
            MERIDIAN[180,
                ANGLEUNIT["degree",0.0174532925199433,
                    ID["EPSG",9122]]],
            ORDER[2],
            LENGTHUNIT["metre",1]]]
Data axis to CRS axis mapping: 1,2
Origin = (-659100.000000000000000,-639100.000000000000000)
Pixel Size = (200.000000000000000,-200.000000000000000)
Metadata:
  AREA_OR_POINT=Area
Image Structure Metadata:
  INTERLEAVE=BAND
Corner Coordinates:
Upper Left  ( -659100.000, -639100.000) ( 90d52'57.45"W, 81d32'23.19"N)
Lower Left  ( -659100.000,-3379100.000) ( 56d 2'13.47"W, 58d58'10.19"N)
Upper Right (  857900.000, -639100.000) (  8d18'55.49"E, 80d 8'52.35"N)
Lower Right (  857900.000,-3379100.000) ( 30d45'16.18"W, 58d35'44.75"N)
Center      (   99400.000,-2009100.000) ( 42d10' 3.39"W, 71d35' 4.30"N)
Band 1 Block=7585x1 Type=Float32, ColorInterp=Gray
    Computed Min/Max=0.002,18831.568
  NoData Value=-1
#+end_example


***** md5sum hashes of all data

#+NAME: QC_md5sum_NSIDC_0478
#+BEGIN_SRC bash :results table :eval no-export
cd ${DATADIR}/MEaSUREs/NSIDC-0478.002
# awk 'NR % 5 == 0' input > output # print every 5th line
# head -n2 # top two files
find . -type f | LC_ALL=C sort | parallel --keep-order "md5sum {}"
#+END_SRC

#+RESULTS: QC_md5sum_NSIDC_0478
| e6867a11fe4f5512b3bbc2c98e898b68 | ./2000.09.03/greenland_vel_mosaic500_2000_2001_browse_v02.1.jpg |
| 5ea53ca6a21c442579c306ad7238de17 | ./2000.09.03/greenland_vel_mosaic500_2000_2001_ex_v02.1.tif     |
| ff11d930cd3f0756bb824921842e6cca | ./2000.09.03/greenland_vel_mosaic500_2000_2001_ey_v02.1.tif     |
| 73a9d1b70b038157693715f3a523e35d | ./2000.09.03/greenland_vel_mosaic500_2000_2001_v02.1.xml        |
| ca9145a87fa424fe8abeb32052267e33 | ./2000.09.03/greenland_vel_mosaic500_2000_2001_vv_v02.1.tif     |
| dc4e91af90f43097f6a4f4ba9597910c | ./2000.09.03/greenland_vel_mosaic500_2000_2001_vx_v02.1.tif     |
| 1d6954709642cec561dc91b90ac7f60f | ./2000.09.03/greenland_vel_mosaic500_2000_2001_vy_v02.1.tif     |
| c84107bba5052e9df4d7ec8701118307 | ./2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.prj           |
| 8e6039ab0f15c9126516065fc287f607 | ./2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.shp           |
| 640c87cc6ce1af1dacb7f66419ecf197 | ./2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.shx           |
| 7b2371d700693f5b3ae689fcfe730cdd | ./2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.xml           |
| 6c490801f24c473c70106891689aeb7c | ./2000.09.03/index.html                                         |
| 64d246573c12172be2219930ac1e7eda | ./2005.12.13/greenland_vel_mosaic500_2005_2006_browse_v02.1.jpg |
| bb97aa565833a16397581e8de241a812 | ./2005.12.13/greenland_vel_mosaic500_2005_2006_ex_v02.1.tif     |
| 8caba334c0b82f1266bc51370909b4f6 | ./2005.12.13/greenland_vel_mosaic500_2005_2006_ey_v02.1.tif     |
| e2e99719ddb1f48213942b5cbcc41925 | ./2005.12.13/greenland_vel_mosaic500_2005_2006_v02.1.xml        |
| 259b6cf64eb6c0c04bcbc06ba325f3d8 | ./2005.12.13/greenland_vel_mosaic500_2005_2006_vv_v02.1.tif     |
| 03ad1862e1ed6ec439130d9a92817560 | ./2005.12.13/greenland_vel_mosaic500_2005_2006_vx_v02.1.tif     |
| 92135c8aa6ce1ce3cc56d63d008358fa | ./2005.12.13/greenland_vel_mosaic500_2005_2006_vy_v02.1.tif     |
| 47cd89de9cfa4778653c0c83719c6105 | ./2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.prj           |
| 53c6479e54c23fe0e2d1957f9fafeb4f | ./2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.shp           |
| d6e80a79eaa6535ebf68803e951a7f50 | ./2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.shx           |
| 35791a242f3cdf1b6142cbbcaa33fee6 | ./2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.xml           |
| bc591589f36039d9f12559a2e7ae4478 | ./2005.12.13/index.html                                         |
| 7d22aa4b7e7bb2222b32d9dff4b6e983 | ./2006.12.18/greenland_vel_mosaic500_2006_2007_browse_v02.1.jpg |
| 5284edf84ebbf582dd3e1fdb8c0a75a2 | ./2006.12.18/greenland_vel_mosaic500_2006_2007_ex_v02.1.tif     |
| 72018561e3234b6e7327ee99f6165fc4 | ./2006.12.18/greenland_vel_mosaic500_2006_2007_ey_v02.1.tif     |
| 8216f1e6e5cd3347308a6dc33b576aac | ./2006.12.18/greenland_vel_mosaic500_2006_2007_v02.1.xml        |
| 7c6ea53e512f5ad44f8e847b29cc5ed6 | ./2006.12.18/greenland_vel_mosaic500_2006_2007_vv_v02.1.tif     |
| b7eb89b5ebd1a9a964aadead2d785460 | ./2006.12.18/greenland_vel_mosaic500_2006_2007_vx_v02.1.tif     |
| ccc099a8bd54b18ca42274fa3b579404 | ./2006.12.18/greenland_vel_mosaic500_2006_2007_vy_v02.1.tif     |
| 36cfad6bdd621148c9f35c3dbd6591ae | ./2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.prj           |
| a92b357d325733c3aaf5311190b7c314 | ./2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.shp           |
| 735fbcc0fcf628874d88b1b6eb1b7676 | ./2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.shx           |
| 26437e169a4c192a6c4b2d5bac3b5cf0 | ./2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.xml           |
| 180c52fe59cd8182f7c447a00549cbb0 | ./2006.12.18/index.html                                         |
| 9bb4a95fec1ffcfe9a0cd78be3787c2d | ./2007.09.07/greenland_vel_mosaic500_2007_2008_browse_v02.1.jpg |
| c44c35a30e1005bc80100377d92c5e0f | ./2007.09.07/greenland_vel_mosaic500_2007_2008_ex_v02.1.tif     |
| 7ebe65a72c1ec39f2e4cacf0a1974a06 | ./2007.09.07/greenland_vel_mosaic500_2007_2008_ey_v02.1.tif     |
| 87c00a4679d0101301155970220c5258 | ./2007.09.07/greenland_vel_mosaic500_2007_2008_v02.1.xml        |
| ba1f857fa37d4283900da6c8765872d2 | ./2007.09.07/greenland_vel_mosaic500_2007_2008_vv_v02.1.tif     |
| b54034263d8097659d47a923cacf42c1 | ./2007.09.07/greenland_vel_mosaic500_2007_2008_vx_v02.1.tif     |
| 68e11a41d9812827fa3f24a94542d0fd | ./2007.09.07/greenland_vel_mosaic500_2007_2008_vy_v02.1.tif     |
| 9a1ec4e17ef3e1f9f47d14c7a5fd5e86 | ./2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.prj           |
| 3aca53c07b1e34aaae7db97ea312c505 | ./2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.shp           |
| f96c1c94232309994639fd42b78a7339 | ./2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.shx           |
| 676dec0bddf08e07f7a1f01e1c5c94ba | ./2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.xml           |
| b830d806fe5b6363d66d3f0b959672e4 | ./2007.09.07/index.html                                         |
| 36a762e907dbda8829f6869112a1a9d5 | ./2008.09.15/greenland_vel_mosaic500_2008_2009_browse_v02.1.jpg |
| 0a01a2050ca4c0792129755ceca795aa | ./2008.09.15/greenland_vel_mosaic500_2008_2009_ex_v02.1.tif     |
| 94ea8fbabb89f1dfc1fcbaa88ad39796 | ./2008.09.15/greenland_vel_mosaic500_2008_2009_ey_v02.1.tif     |
| c43daa03a92e971e4bd7f7587011ab7f | ./2008.09.15/greenland_vel_mosaic500_2008_2009_v02.1.xml        |
| 018d7bcef3cff89e039484b8a35458eb | ./2008.09.15/greenland_vel_mosaic500_2008_2009_vv_v02.1.tif     |
| 166c6c1f647214ca1e7fc49fe90757a9 | ./2008.09.15/greenland_vel_mosaic500_2008_2009_vx_v02.1.tif     |
| 504b14bde498b6363c408442772a50be | ./2008.09.15/greenland_vel_mosaic500_2008_2009_vy_v02.1.tif     |
| bd3c23e4319c726575e0812067e968c3 | ./2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.prj           |
| fe32ee188b6eebde9e326724ae482152 | ./2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.shp           |
| 8bbdc422f66c7f84b4962b2724927d8d | ./2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.shx           |
| 9c4aca08efd481d81e9131f2f40b1755 | ./2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.xml           |
| 90c9a7175ffe4538f2c56d589ad7867a | ./2008.09.15/index.html                                         |
| ac9d007f4c045d34d305fa7fed5517d6 | ./2009.09.02/greenland_vel_mosaic500_2009_2010_browse_v02.1.jpg |
| 6f467702bf41bdc8055c19b04d87f873 | ./2009.09.02/greenland_vel_mosaic500_2009_2010_ex_v02.1.tif     |
| 42888c41f7207c0654f8e80453e82c6a | ./2009.09.02/greenland_vel_mosaic500_2009_2010_ey_v02.1.tif     |
| 4fee3d32a4558553040da6075e1a93bb | ./2009.09.02/greenland_vel_mosaic500_2009_2010_v02.1.xml        |
| 743829d41ea07969345b6c768303b0e6 | ./2009.09.02/greenland_vel_mosaic500_2009_2010_vv_v02.1.tif     |
| af0583eb16c6d31cb8ceaeb64a3d6acd | ./2009.09.02/greenland_vel_mosaic500_2009_2010_vx_v02.1.tif     |
| 5abb91da20cbbdfe196e4a8bb5cc3e90 | ./2009.09.02/greenland_vel_mosaic500_2009_2010_vy_v02.1.tif     |
| a317e41c220f2f56216750d5b1d9a9c6 | ./2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.prj           |
| 4c73eb0870a52aa74a395eb1ae650b9c | ./2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.shp           |
| 35568d07793ddcc4e93e5089ab4af9df | ./2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.shx           |
| fe7f6ecba95baf148130a0d191898237 | ./2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.xml           |
| a2f6fff835f44a5b40dca3c0c8a02c84 | ./2009.09.02/index.html                                         |
| cc34a28ba7a906fdbba4b003d3540a83 | ./2012.11.10/greenland_vel_mosaic500_2012_2013_browse_v02.1.jpg |
| 1e08376f4b552e82cb275b225d9a1e5b | ./2012.11.10/greenland_vel_mosaic500_2012_2013_ex_v02.1.tif     |
| 996d97a3ee004397d2185d37ddd5ebfe | ./2012.11.10/greenland_vel_mosaic500_2012_2013_ey_v02.1.tif     |
| fd82349e7193e754b21968bfd0846353 | ./2012.11.10/greenland_vel_mosaic500_2012_2013_v02.1.xml        |
| ca4fc877f5763218db73a19cd6c95a6a | ./2012.11.10/greenland_vel_mosaic500_2012_2013_vv_v02.1.tif     |
| ef668984eea41219fc3128ab83c2db32 | ./2012.11.10/greenland_vel_mosaic500_2012_2013_vx_v02.1.tif     |
| 0905c136d52a61e48fef38a6bafb72f0 | ./2012.11.10/greenland_vel_mosaic500_2012_2013_vy_v02.1.tif     |
| 095b0fc251b7ea2c6c15c28d2b9119a6 | ./2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.prj           |
| ce934db526d861877d2d81ed15192332 | ./2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.shp           |
| f0400a26b83b90f241f62fcb362d1ac9 | ./2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.shx           |
| 4a93e5ec8f254ea59da65ffd43c360a6 | ./2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.xml           |
| d2895fc6da45cfe32ee9aaf97d58d651 | ./2012.11.10/index.html                                         |
| 6d7f97224c4f318f984d8b0012be194b | ./2014.09.01/greenland_vel_mosaic200_2014_2015_browse_v02.1.jpg |
| 8529ea4957a4d98c15c6459985cbbac1 | ./2014.09.01/greenland_vel_mosaic200_2014_2015_ex_v02.1.tif     |
| dfcd41f9be8618d272562a0228183c0f | ./2014.09.01/greenland_vel_mosaic200_2014_2015_ey_v02.1.tif     |
| 065db101e178e62ac4589ec7a18f3b8f | ./2014.09.01/greenland_vel_mosaic200_2014_2015_v02.1.xml        |
| 9bf8fcf0c4add78ed54c4a35b444bdc3 | ./2014.09.01/greenland_vel_mosaic200_2014_2015_vv_v02.1.tif     |
| b39158d4fa66121a23543b1cf84eb967 | ./2014.09.01/greenland_vel_mosaic200_2014_2015_vx_v02.1.tif     |
| aadfd0763da9acb5604caa1e3e2a4906 | ./2014.09.01/greenland_vel_mosaic200_2014_2015_vy_v02.1.tif     |
| 48058d4bfba2526b66f74d9e093eaf6b | ./2014.09.01/greenland_vel_mosaic500_2014_2015_browse_v02.1.jpg |
| fa297f954f247cb5e8104c63ddb80def | ./2014.09.01/greenland_vel_mosaic500_2014_2015_ex_v02.1.tif     |
| 5beaf898560f0b53b06e02c00c570680 | ./2014.09.01/greenland_vel_mosaic500_2014_2015_ey_v02.1.tif     |
| c5f0562045c4c30cda5bfaba55269a37 | ./2014.09.01/greenland_vel_mosaic500_2014_2015_v02.1.xml        |
| 0a32de5018bc8779441678b78c0050a8 | ./2014.09.01/greenland_vel_mosaic500_2014_2015_vv_v02.1.tif     |
| 5d9fa64901b201e485b87dd421be0d6b | ./2014.09.01/greenland_vel_mosaic500_2014_2015_vx_v02.1.tif     |
| 1059e370d6b42df96fd096c047d598b7 | ./2014.09.01/greenland_vel_mosaic500_2014_2015_vy_v02.1.tif     |
| 8bed0f9b98bf18e6b230f1763d2d0a85 | ./2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.prj           |
| e3e424bcf9662294c816f097176795e6 | ./2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.shp           |
| 9b736f353dc7dd85fa41404595cdc070 | ./2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.shx           |
| 2b8cc13c69f6e36f7d47d99d9224d1d1 | ./2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.xml           |
| 8a7598d0456c497da68d43d0bb5abf27 | ./2014.09.01/index.html                                         |
| 2cbe77ad0dc94962dd40d91b9d7bc1b9 | ./2015.09.01/greenland_vel_mosaic200_2015_2016_browse_v02.1.jpg |
| e9e3d01d630533d870d552da023a66ba | ./2015.09.01/greenland_vel_mosaic200_2015_2016_ex_v02.1.tif     |
| 1d1b5b0efcdf24218e9f7d75b6750a3d | ./2015.09.01/greenland_vel_mosaic200_2015_2016_ey_v02.1.tif     |
| 6fcbded660bff6d6663fba9f1c9753d3 | ./2015.09.01/greenland_vel_mosaic200_2015_2016_v02.1.xml        |
| c4e31ad76bf8c774d2d2717ee1298a36 | ./2015.09.01/greenland_vel_mosaic200_2015_2016_vv_v02.1.tif     |
| 48bfa5266b6ecf5d4939c306f665ce47 | ./2015.09.01/greenland_vel_mosaic200_2015_2016_vx_v02.1.tif     |
| f68a5bbc76bcbb11b3cfe7a979d64651 | ./2015.09.01/greenland_vel_mosaic200_2015_2016_vy_v02.1.tif     |
| 476cac9fe27f28218ad3bd40a06a8278 | ./2015.09.01/greenland_vel_mosaic500_2015_2016_browse_v02.1.jpg |
| e88ca627886afdb8435205a7b1c3f483 | ./2015.09.01/greenland_vel_mosaic500_2015_2016_ex_v02.1.tif     |
| b91a3cdede19b30f8268c56af97a1401 | ./2015.09.01/greenland_vel_mosaic500_2015_2016_ey_v02.1.tif     |
| 29814600e8360652bad1a92dbb5c12b1 | ./2015.09.01/greenland_vel_mosaic500_2015_2016_v02.1.xml        |
| b56ca5d8e3fabe640802ef10cac98c05 | ./2015.09.01/greenland_vel_mosaic500_2015_2016_vv_v02.1.tif     |
| 94fac5a60e8d74d5daef331437725a2a | ./2015.09.01/greenland_vel_mosaic500_2015_2016_vx_v02.1.tif     |
| 7e62f18ca9a76646329a5c9de0774c70 | ./2015.09.01/greenland_vel_mosaic500_2015_2016_vy_v02.1.tif     |
| c56deac0f504fb790a0d41580ed3b93f | ./2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.prj           |
| 7dbe778bdcfa579fc06c38aaea44ca0b | ./2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.shp           |
| 8c46c7d794b1b41a61c8a768000ddb92 | ./2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.shx           |
| 017ceccd7054a6a5ac467573ec89717b | ./2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.xml           |
| 79a3fcebe989537046a415346ffdde20 | ./2015.09.01/index.html                                         |
| 0aef551d3da1ba45837130be98bf9ee7 | ./2016.09.01/greenland_vel_mosaic200_2016_2017_browse_v02.1.jpg |
| 8cecafd27346f730c02d0c887d608d39 | ./2016.09.01/greenland_vel_mosaic200_2016_2017_ex_v02.1.tif     |
| 56355df21064d121305ead513682222d | ./2016.09.01/greenland_vel_mosaic200_2016_2017_ey_v02.1.tif     |
| ace1b23a7a5c74ba25e1457c830b410f | ./2016.09.01/greenland_vel_mosaic200_2016_2017_v02.1.xml        |
| 0532b20cddc74867a770c5b306c442ec | ./2016.09.01/greenland_vel_mosaic200_2016_2017_vv_v02.1.tif     |
| 522dd0173fad38c99f0a6c896be48914 | ./2016.09.01/greenland_vel_mosaic200_2016_2017_vx_v02.1.tif     |
| 7964dca90e3d5b48fb8e39f0160aa705 | ./2016.09.01/greenland_vel_mosaic200_2016_2017_vy_v02.1.tif     |
| 1d5721a981065aa92b3f1a9b02691f40 | ./2016.09.01/greenland_vel_mosaic500_2016_2017_browse_v02.1.jpg |
| 9bf87cf955a0ef2e1fedab5bbb5e49c0 | ./2016.09.01/greenland_vel_mosaic500_2016_2017_ex_v02.1.tif     |
| f5ba497d91161e2c92e5c6c6333e9dd9 | ./2016.09.01/greenland_vel_mosaic500_2016_2017_ey_v02.1.tif     |
| 3d613e5b8cddfaad13a0bd4226185afc | ./2016.09.01/greenland_vel_mosaic500_2016_2017_v02.1.xml        |
| 7dbfed1d27cb7f53425042170e9f612b | ./2016.09.01/greenland_vel_mosaic500_2016_2017_vv_v02.1.tif     |
| 9e66bb5b796781e50c63ac084268c07f | ./2016.09.01/greenland_vel_mosaic500_2016_2017_vx_v02.1.tif     |
| d13679a8fedfdb88e6ea2bfb1c79c523 | ./2016.09.01/greenland_vel_mosaic500_2016_2017_vy_v02.1.tif     |
| 16acfc18fc991cc3627426695ab78d32 | ./2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.prj           |
| 0314c3b53b2f894bc049468080da81df | ./2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.shp           |
| 0ffbae03976b6d3832b183521c7197ab | ./2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.shx           |
| 4bb7af95ad3aa0a51d36ed87a0f6b894 | ./2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.xml           |
| 0bad82ec7e07e857f60585d6a2142942 | ./2016.09.01/index.html                                         |
| ab274d74bd6a7cbd39d41989b91b2bcf | ./2017.09.01/greenland_vel_mosaic200_2017_2018_browse_v02.1.jpg |
| fdf36e5a01118dd4e54996665d13c170 | ./2017.09.01/greenland_vel_mosaic200_2017_2018_ex_v02.1.tif     |
| 1b1c7ffae2ea5e2d0b28f0428549c1e2 | ./2017.09.01/greenland_vel_mosaic200_2017_2018_ey_v02.1.tif     |
| 598d5f3645bb378f89e53e2c216ce35d | ./2017.09.01/greenland_vel_mosaic200_2017_2018_v02.1.xml        |
| 00651d98489def32128f3175e6ce67a1 | ./2017.09.01/greenland_vel_mosaic200_2017_2018_vv_v02.1.tif     |
| 6cdb1a1651c843ca9a8d06e069a0cf34 | ./2017.09.01/greenland_vel_mosaic200_2017_2018_vx_v02.1.tif     |
| 1facbb34e2e58b657b8b7f2a4188dde2 | ./2017.09.01/greenland_vel_mosaic200_2017_2018_vy_v02.1.tif     |
| cdf3f2674515176a734df5a7b6f0f297 | ./2017.09.01/greenland_vel_mosaic500_2017_2018_browse_v02.1.jpg |
| 9837baeee2a7e7a12b4c49ac88198d47 | ./2017.09.01/greenland_vel_mosaic500_2017_2018_ex_v02.1.tif     |
| e825dc3f37c4bb36833b073195885a06 | ./2017.09.01/greenland_vel_mosaic500_2017_2018_ey_v02.1.tif     |
| 1c621f7082212eef4c0d189fc9af841a | ./2017.09.01/greenland_vel_mosaic500_2017_2018_v02.1.xml        |
| 59ffa5696a35920d3b8242d81a47421a | ./2017.09.01/greenland_vel_mosaic500_2017_2018_vv_v02.1.tif     |
| 56be38d07feb7a57fe44e1aa4c864a21 | ./2017.09.01/greenland_vel_mosaic500_2017_2018_vx_v02.1.tif     |
| 4027678341666a9cefde6752dfe2d3c1 | ./2017.09.01/greenland_vel_mosaic500_2017_2018_vy_v02.1.tif     |
| e95ef0a9bb8affd130037299b82bbda5 | ./2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.prj           |
| 952ff8d38c6a7104d15085f665026779 | ./2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.shp           |
| 40bb5405e925c999e34e7b07c78058f5 | ./2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.shx           |
| b4bc3cacacbba2428e706734b8a96b09 | ./2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.xml           |
| 3cd2b258aff255cef29d328239ac278f | ./2017.09.01/index.html                                         |
| 729a44ed155a753fdf9d25631ca81df6 | ./index.html                                                    |


**** 0646
***** List of times, and count of folders at that time

#+NAME: QC_times_NSIDC_0646
#+BEGIN_SRC bash :results table :eval no-export
find ${DATADIR}/MEaSUREs/NSIDC-0646.003/ -type f -name "*vx_v03.0.tif" | rev | cut -d"_" -f3 | rev | LC_ALL=C sort | uniq -c
#+END_SRC

#+RESULTS: QC_times_NSIDC_0646
| 27 | 1985-03 |
| 36 | 1985-04 |
| 41 | 1985-05 |
| 44 | 1985-06 |
| 45 | 1985-07 |
| 49 | 1985-08 |
| 45 | 1985-09 |
| 35 | 1986-04 |
| 39 | 1986-05 |
| 37 | 1986-06 |
| 39 | 1986-07 |
| 43 | 1986-08 |
| 37 | 1986-09 |
|  9 | 1986-10 |
|  4 | 1987-03 |
| 43 | 1987-04 |
| 47 | 1987-05 |
| 44 | 1987-06 |
| 49 | 1987-07 |
| 46 | 1987-08 |
| 43 | 1987-09 |
| 21 | 1987-10 |
|  6 | 1988-03 |
| 42 | 1988-04 |
| 47 | 1988-05 |
| 41 | 1988-06 |
| 42 | 1988-07 |
| 42 | 1988-08 |
| 39 | 1988-09 |
| 16 | 1988-10 |
| 26 | 1989-03 |
| 48 | 1989-04 |
| 43 | 1989-05 |
| 42 | 1989-06 |
| 38 | 1989-07 |
| 41 | 1989-08 |
| 40 | 1989-09 |
|  6 | 1989-10 |
| 31 | 1990-03 |
| 49 | 1990-04 |
| 45 | 1990-05 |
| 43 | 1990-06 |
| 38 | 1990-07 |
| 38 | 1990-08 |
| 33 | 1990-09 |
| 21 | 1990-10 |
|  3 | 1991-06 |
|  2 | 1992-06 |
| 12 | 1992-07 |
| 11 | 1992-08 |
|  5 | 1992-09 |
|  4 | 1992-10 |
|  2 | 1993-03 |
| 12 | 1993-04 |
|  7 | 1993-05 |
|  5 | 1993-06 |
|  2 | 1993-07 |
|  6 | 1993-08 |
|  1 | 1993-09 |
| 42 | 1994-05 |
| 48 | 1994-06 |
| 42 | 1994-07 |
| 46 | 1994-08 |
| 41 | 1994-09 |
|  3 | 1995-04 |
|  1 | 1995-05 |
|  1 | 1995-06 |
| 10 | 1995-07 |
|  2 | 1995-08 |
|  1 | 1995-09 |
|  1 | 1995-10 |
|  6 | 1996-04 |
|  6 | 1996-05 |
| 12 | 1996-06 |
|  9 | 1996-07 |
|  4 | 1996-08 |
|  3 | 1996-09 |
|  1 | 1996-10 |
|  1 | 1997-03 |
|  5 | 1997-04 |
|  3 | 1997-05 |
|  6 | 1997-06 |
|  2 | 1997-07 |
| 11 | 1997-09 |
| 23 | 1997-10 |
| 30 | 1998-03 |
| 54 | 1998-04 |
| 52 | 1998-05 |
| 44 | 1998-06 |
| 45 | 1998-07 |
| 51 | 1998-08 |
| 47 | 1998-09 |
| 16 | 1998-10 |
| 42 | 1999-07 |
| 55 | 1999-08 |
| 56 | 1999-09 |
| 42 | 1999-10 |
|  8 | 1999-11 |
|  2 | 1999-12 |
| 22 | 2000-02 |
| 55 | 2000-03 |
| 54 | 2000-04 |
| 56 | 2000-05 |
| 71 | 2000-06 |
| 61 | 2000-07 |
| 65 | 2000-08 |
| 56 | 2000-09 |
| 27 | 2000-10 |
|  1 | 2000-11 |
| 49 | 2001-03 |
| 64 | 2001-04 |
| 60 | 2001-05 |
| 63 | 2001-06 |
| 64 | 2001-07 |
| 53 | 2001-08 |
| 50 | 2001-09 |
| 43 | 2001-10 |
|  5 | 2001-11 |
|  3 | 2002-01 |
|  5 | 2002-02 |
| 54 | 2002-03 |
| 62 | 2002-04 |
| 56 | 2002-05 |
| 66 | 2002-06 |
| 64 | 2002-07 |
| 55 | 2002-08 |
| 33 | 2002-09 |
| 12 | 2002-10 |
|  6 | 2003-02 |
| 34 | 2003-03 |
| 62 | 2003-04 |
| 61 | 2003-05 |
| 57 | 2003-06 |
| 48 | 2003-07 |
| 52 | 2003-08 |
| 44 | 2003-09 |
|  2 | 2003-10 |
| 26 | 2004-03 |
| 55 | 2004-04 |
| 59 | 2004-05 |
| 71 | 2004-06 |
| 71 | 2004-07 |
| 66 | 2004-08 |
| 56 | 2004-09 |
| 10 | 2004-10 |
| 19 | 2005-03 |
| 59 | 2005-04 |
| 54 | 2005-05 |
| 65 | 2005-06 |
| 62 | 2005-07 |
| 56 | 2005-08 |
| 56 | 2005-09 |
| 21 | 2005-10 |
| 39 | 2006-03 |
| 59 | 2006-04 |
| 56 | 2006-05 |
| 73 | 2006-06 |
| 73 | 2006-07 |
| 65 | 2006-08 |
| 56 | 2006-09 |
| 20 | 2006-10 |
|  2 | 2006-11 |
| 65 | 2007-03 |
| 68 | 2007-04 |
| 67 | 2007-05 |
| 72 | 2007-06 |
| 70 | 2007-07 |
| 66 | 2007-08 |
| 66 | 2007-09 |
| 19 | 2007-10 |
| 14 | 2008-03 |
| 60 | 2008-04 |
| 56 | 2008-05 |
| 68 | 2008-06 |
| 72 | 2008-07 |
| 59 | 2008-08 |
| 50 | 2008-09 |
| 15 | 2008-10 |
|  1 | 2008-11 |
|  2 | 2009-01 |
|  1 | 2009-02 |
| 35 | 2009-03 |
| 51 | 2009-04 |
| 59 | 2009-05 |
| 69 | 2009-06 |
| 72 | 2009-07 |
| 69 | 2009-08 |
| 57 | 2009-09 |
| 12 | 2009-10 |
| 26 | 2010-03 |
| 58 | 2010-04 |
| 62 | 2010-05 |
| 69 | 2010-06 |
| 72 | 2010-07 |
| 65 | 2010-08 |
| 51 | 2010-09 |
| 15 | 2010-10 |
| 31 | 2011-03 |
| 49 | 2011-04 |
| 58 | 2011-05 |
| 67 | 2011-06 |
| 70 | 2011-07 |
| 70 | 2011-08 |
| 55 | 2011-09 |
| 19 | 2011-10 |
|  2 | 2012-01 |
| 19 | 2012-03 |
| 53 | 2012-04 |
| 64 | 2012-05 |
| 73 | 2012-06 |
| 73 | 2012-07 |
| 73 | 2012-08 |
| 58 | 2012-09 |
| 20 | 2012-10 |
|  4 | 2013-02 |
| 62 | 2013-03 |
| 72 | 2013-04 |
| 72 | 2013-05 |
| 73 | 2013-06 |
| 71 | 2013-07 |
| 71 | 2013-08 |
| 72 | 2013-09 |
| 47 | 2013-10 |
| 23 | 2013-11 |
| 11 | 2013-12 |
| 13 | 2014-01 |
| 42 | 2014-02 |
| 65 | 2014-03 |
| 67 | 2014-04 |
| 70 | 2014-05 |
| 73 | 2014-06 |
| 73 | 2014-07 |
| 73 | 2014-08 |
| 73 | 2014-09 |
| 48 | 2014-10 |
| 26 | 2014-11 |
| 14 | 2014-12 |
| 15 | 2015-01 |
| 50 | 2015-02 |
| 71 | 2015-03 |
| 70 | 2015-04 |
| 73 | 2015-05 |
| 73 | 2015-06 |
| 73 | 2015-07 |
| 73 | 2015-08 |
| 73 | 2015-09 |
| 68 | 2015-10 |
| 25 | 2015-11 |
|  9 | 2015-12 |
|  5 | 2016-01 |
| 53 | 2016-02 |
| 73 | 2016-03 |
| 74 | 2016-04 |
| 74 | 2016-05 |
| 74 | 2016-06 |
| 74 | 2016-07 |
| 74 | 2016-08 |
| 72 | 2016-09 |
| 61 | 2016-10 |
| 25 | 2016-11 |
| 12 | 2016-12 |
| 17 | 2017-01 |
| 50 | 2017-02 |
| 70 | 2017-03 |
| 71 | 2017-04 |
| 69 | 2017-05 |
| 69 | 2017-06 |
| 69 | 2017-07 |
| 71 | 2017-08 |
| 69 | 2017-09 |
| 64 | 2017-10 |
| 32 | 2017-11 |
| 11 | 2017-12 |
| 21 | 2018-01 |
| 52 | 2018-02 |
| 69 | 2018-03 |
| 69 | 2018-04 |
| 69 | 2018-05 |
| 63 | 2018-06 |
| 66 | 2018-07 |
| 67 | 2018-08 |
| 65 | 2018-09 |
| 64 | 2018-10 |
| 24 | 2018-11 |
|  6 | 2018-12 |
| 14 | 2019-01 |
| 59 | 2019-02 |
| 69 | 2019-03 |
| 66 | 2019-04 |
| 64 | 2019-05 |
| 69 | 2019-06 |
| 69 | 2019-07 |
| 69 | 2019-08 |
| 69 | 2019-09 |
| 65 | 2019-10 |
| 36 | 2019-11 |
|  4 | 2019-12 |
| 16 | 2020-01 |
| 57 | 2020-02 |
| 71 | 2020-03 |
| 70 | 2020-04 |
| 66 | 2020-05 |
| 65 | 2020-06 |
| 66 | 2020-07 |
| 67 | 2020-08 |
| 70 | 2020-09 |
| 62 | 2020-10 |
| 17 | 2020-11 |
|  8 | 2020-12 |
| 17 | 2021-01 |
| 46 | 2021-02 |
| 71 | 2021-03 |
| 71 | 2021-04 |
| 70 | 2021-05 |
| 70 | 2021-06 |
| 67 | 2021-07 |
| 70 | 2021-08 |
| 70 | 2021-09 |
| 64 | 2021-10 |
| 28 | 2021-11 |

**** 0731
***** File List
Subset to vx

#+BEGIN_SRC bash :results verbatim :eval no-export
(cd ${DATADIR}/MEaSUREs/NSIDC-0731.005; find -name "*vx*.tif"| LC_ALL=C sort)
#+END_SRC

#+RESULTS:
#+begin_example
./2014.12.01/GL_vel_mosaic_Monthly_01Dec14_31Dec14_vx_v05.0.tif
./2015.01.01/GL_vel_mosaic_Monthly_01Jan15_31Jan15_vx_v05.0.tif
./2015.02.01/GL_vel_mosaic_Monthly_01Feb15_28Feb15_vx_v05.0.tif
./2015.03.01/GL_vel_mosaic_Monthly_01Mar15_31Mar15_vx_v05.0.tif
./2015.04.01/GL_vel_mosaic_Monthly_01Apr15_30Apr15_vx_v05.0.tif
./2015.05.01/GL_vel_mosaic_Monthly_01May15_31May15_vx_v05.0.tif
./2015.06.01/GL_vel_mosaic_Monthly_01Jun15_30Jun15_vx_v05.0.tif
./2015.07.01/GL_vel_mosaic_Monthly_01Jul15_31Jul15_vx_v05.0.tif
./2015.08.01/GL_vel_mosaic_Monthly_01Aug15_31Aug15_vx_v05.0.tif
./2015.09.01/GL_vel_mosaic_Monthly_01Sep15_30Sep15_vx_v05.0.tif
./2015.10.01/GL_vel_mosaic_Monthly_01Oct15_31Oct15_vx_v05.0.tif
./2015.11.01/GL_vel_mosaic_Monthly_01Nov15_30Nov15_vx_v05.0.tif
./2015.12.01/GL_vel_mosaic_Monthly_01Dec15_31Dec15_vx_v05.0.tif
./2016.01.01/GL_vel_mosaic_Monthly_01Jan16_31Jan16_vx_v05.0.tif
./2016.02.01/GL_vel_mosaic_Monthly_01Feb16_29Feb16_vx_v05.0.tif
./2016.03.01/GL_vel_mosaic_Monthly_01Mar16_31Mar16_vx_v05.0.tif
./2016.04.01/GL_vel_mosaic_Monthly_01Apr16_30Apr16_vx_v05.0.tif
./2016.05.01/GL_vel_mosaic_Monthly_01May16_31May16_vx_v05.0.tif
./2016.06.01/GL_vel_mosaic_Monthly_01Jun16_30Jun16_vx_v05.0.tif
./2016.07.01/GL_vel_mosaic_Monthly_01Jul16_31Jul16_vx_v05.0.tif
./2016.08.01/GL_vel_mosaic_Monthly_01Aug16_31Aug16_vx_v05.0.tif
./2016.09.01/GL_vel_mosaic_Monthly_01Sep16_30Sep16_vx_v05.0.tif
./2016.10.01/GL_vel_mosaic_Monthly_01Oct16_31Oct16_vx_v05.0.tif
./2016.11.01/GL_vel_mosaic_Monthly_01Nov16_30Nov16_vx_v05.0.tif
./2016.12.01/GL_vel_mosaic_Monthly_01Dec16_31Dec16_vx_v05.0.tif
./2017.01.01/GL_vel_mosaic_Monthly_01Jan17_31Jan17_vx_v05.0.tif
./2017.02.01/GL_vel_mosaic_Monthly_01Feb17_28Feb17_vx_v05.0.tif
./2017.03.01/GL_vel_mosaic_Monthly_01Mar17_31Mar17_vx_v05.0.tif
./2017.04.01/GL_vel_mosaic_Monthly_01Apr17_30Apr17_vx_v05.0.tif
./2017.05.01/GL_vel_mosaic_Monthly_01May17_31May17_vx_v05.0.tif
./2017.06.01/GL_vel_mosaic_Monthly_01Jun17_30Jun17_vx_v05.0.tif
./2017.07.01/GL_vel_mosaic_Monthly_01Jul17_31Jul17_vx_v05.0.tif
./2017.08.01/GL_vel_mosaic_Monthly_01Aug17_31Aug17_vx_v05.0.tif
./2017.09.01/GL_vel_mosaic_Monthly_01Sep17_30Sep17_vx_v05.0.tif
./2017.10.01/GL_vel_mosaic_Monthly_01Oct17_31Oct17_vx_v05.0.tif
./2017.11.01/GL_vel_mosaic_Monthly_01Nov17_30Nov17_vx_v05.0.tif
./2017.12.01/GL_vel_mosaic_Monthly_01Dec17_31Dec17_vx_v05.0.tif
./2018.01.01/GL_vel_mosaic_Monthly_01Jan18_31Jan18_vx_v05.0.tif
./2018.02.01/GL_vel_mosaic_Monthly_01Feb18_28Feb18_vx_v05.0.tif
./2018.03.01/GL_vel_mosaic_Monthly_01Mar18_31Mar18_vx_v05.0.tif
./2018.04.01/GL_vel_mosaic_Monthly_01Apr18_30Apr18_vx_v05.0.tif
./2018.05.01/GL_vel_mosaic_Monthly_01May18_31May18_vx_v05.0.tif
./2018.06.01/GL_vel_mosaic_Monthly_01Jun18_30Jun18_vx_v05.0.tif
./2018.07.01/GL_vel_mosaic_Monthly_01Jul18_31Jul18_vx_v05.0.tif
./2018.08.01/GL_vel_mosaic_Monthly_01Aug18_31Aug18_vx_v05.0.tif
./2018.09.01/GL_vel_mosaic_Monthly_01Sep18_30Sep18_vx_v05.0.tif
./2018.10.01/GL_vel_mosaic_Monthly_01Oct18_31Oct18_vx_v05.0.tif
./2018.11.01/GL_vel_mosaic_Monthly_01Nov18_30Nov18_vx_v05.0.tif
./2018.12.01/GL_vel_mosaic_Monthly_01Dec18_31Dec18_vx_v05.0.tif
./2019.01.01/GL_vel_mosaic_Monthly_01Jan19_31Jan19_vx_v05.0.tif
./2019.02.01/GL_vel_mosaic_Monthly_01Feb19_28Feb19_vx_v05.0.tif
./2019.03.01/GL_vel_mosaic_Monthly_01Mar19_31Mar19_vx_v05.0.tif
./2019.04.01/GL_vel_mosaic_Monthly_01Apr19_30Apr19_vx_v05.0.tif
./2019.05.01/GL_vel_mosaic_Monthly_01May19_31May19_vx_v05.0.tif
./2019.06.01/GL_vel_mosaic_Monthly_01Jun19_30Jun19_vx_v05.0.tif
./2019.07.01/GL_vel_mosaic_Monthly_01Jul19_31Jul19_vx_v05.0.tif
./2019.08.01/GL_vel_mosaic_Monthly_01Aug19_31Aug19_vx_v05.0.tif
./2019.09.01/GL_vel_mosaic_Monthly_01Sep19_30Sep19_vx_v05.0.tif
./2019.10.01/GL_vel_mosaic_Monthly_01Oct19_31Oct19_vx_v05.0.tif
./2019.11.01/GL_vel_mosaic_Monthly_01Nov19_30Nov19_vx_v05.0.tif
./2019.12.01/GL_vel_mosaic_Monthly_01Dec19_31Dec19_vx_v05.0.tif
./2020.01.01/GL_vel_mosaic_Monthly_01Jan20_31Jan20_vx_v05.0.tif
./2020.02.01/GL_vel_mosaic_Monthly_01Feb20_29Feb20_vx_v05.0.tif
./2020.03.01/GL_vel_mosaic_Monthly_01Mar20_31Mar20_vx_v05.0.tif
./2020.04.01/GL_vel_mosaic_Monthly_01Apr20_30Apr20_vx_v05.0.tif
./2020.05.01/GL_vel_mosaic_Monthly_01May20_31May20_vx_v05.0.tif
./2020.06.01/GL_vel_mosaic_Monthly_01Jun20_30Jun20_vx_v05.0.tif
./2020.07.01/GL_vel_mosaic_Monthly_01Jul20_31Jul20_vx_v05.0.tif
./2020.08.01/GL_vel_mosaic_Monthly_01Aug20_31Aug20_vx_v05.0.tif
./2020.09.01/GL_vel_mosaic_Monthly_01Sep20_30Sep20_vx_v05.0.tif
./2020.10.01/GL_vel_mosaic_Monthly_01Oct20_31Oct20_vx_v05.0.tif
./2020.11.01/GL_vel_mosaic_Monthly_01Nov20_30Nov20_vx_v05.0.tif
./2020.12.01/GL_vel_mosaic_Monthly_01Dec20_31Dec20_vx_v05.0.tif
./2021.01.01/GL_vel_mosaic_Monthly_01Jan21_31Jan21_vx_v05.0.tif
./2021.02.01/GL_vel_mosaic_Monthly_01Feb21_28Feb21_vx_v05.0.tif
./2021.03.01/GL_vel_mosaic_Monthly_01Mar21_31Mar21_vx_v05.0.tif
./2021.04.01/GL_vel_mosaic_Monthly_01Apr21_30Apr21_vx_v05.0.tif
./2021.05.01/GL_vel_mosaic_Monthly_01May21_31May21_vx_v05.0.tif
./2021.06.01/GL_vel_mosaic_Monthly_01Jun21_30Jun21_vx_v05.0.tif
./2021.07.01/GL_vel_mosaic_Monthly_01Jul21_31Jul21_vx_v05.0.tif
./2021.08.01/GL_vel_mosaic_Monthly_01Aug21_31Aug21_vx_v05.0.tif
./2021.09.01/GL_vel_mosaic_Monthly_01Sep21_30Sep21_vx_v05.0.tif
./2021.10.01/GL_vel_mosaic_Monthly_01Oct21_31Oct21_vx_v05.0.tif
./2021.11.01/GL_vel_mosaic_Monthly_01Nov21_30Nov21_vx_v05.0.tif
./2021.12.01/GL_vel_mosaic_Monthly_01Dec21_31Dec21_vx_v05.0.tif
./2022.01.01/GL_vel_mosaic_Monthly_01Jan22_31Jan22_vx_v05.0.tif
./2022.02.01/GL_vel_mosaic_Monthly_01Feb22_28Feb22_vx_v05.0.tif
./2022.03.01/GL_vel_mosaic_Monthly_01Mar22_31Mar22_vx_v05.0.tif
./2022.04.01/GL_vel_mosaic_Monthly_01Apr22_30Apr22_vx_v05.0.tif
./2022.05.01/GL_vel_mosaic_Monthly_01May22_31May22_vx_v05.0.tif
./2022.06.01/GL_vel_mosaic_Monthly_01Jun22_30Jun22_vx_v05.0.tif
./2022.07.01/GL_vel_mosaic_Monthly_01Jul22_31Jul22_vx_v05.0.tif
./2022.08.01/GL_vel_mosaic_Monthly_01Aug22_31Aug22_vx_v05.0.tif
./2022.09.01/GL_vel_mosaic_Monthly_01Sep22_30Sep22_vx_v05.0.tif
./2022.10.01/GL_vel_mosaic_Monthly_01Oct22_31Oct22_vx_v05.0.tif
./2022.11.01/GL_vel_mosaic_Monthly_01Nov22_30Nov22_vx_v05.0.tif
#+end_example

***** File Metadata

#+NAME: QC_gdalinfo_NSIDC_0731
#+BEGIN_SRC bash :results verbatim :eval no-export
somefile=$(find ${DATADIR}/MEaSUREs/NSIDC-0731.005 -name "*vx*.tif" | LC_ALL=C sort | head -n1)
md5sum ${somefile}
echo ""
gdalinfo -mm ${somefile}
#+END_SRC

#+RESULTS: QC_gdalinfo_NSIDC_0731
#+begin_example
33e6afb888f11a8fc61f2e59c89ea657  /mnt/data/kdm/data/MEaSUREs/NSIDC-0731.005/2014.12.01/GL_vel_mosaic_Monthly_01Dec14_31Dec14_vx_v05.0.tif

Driver: GTiff/GeoTIFF
Files: /mnt/data/kdm/data/MEaSUREs/NSIDC-0731.005/2014.12.01/GL_vel_mosaic_Monthly_01Dec14_31Dec14_vx_v05.0.tif
Size is 7585, 13700
Coordinate System is:
PROJCRS["WGS 84 / NSIDC Sea Ice Polar Stereographic North",
    BASEGEOGCRS["WGS 84",
        DATUM["World Geodetic System 1984",
            ELLIPSOID["WGS 84",6378137,298.257223563,
                LENGTHUNIT["metre",1]]],
        PRIMEM["Greenwich",0,
            ANGLEUNIT["degree",0.0174532925199433]],
        ID["EPSG",4326]],
    CONVERSION["US NSIDC Sea Ice polar stereographic north",
        METHOD["Polar Stereographic (variant B)",
            ID["EPSG",9829]],
        PARAMETER["Latitude of standard parallel",70,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8832]],
        PARAMETER["Longitude of origin",-45,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8833]],
        PARAMETER["False easting",0,
            LENGTHUNIT["metre",1],
            ID["EPSG",8806]],
        PARAMETER["False northing",0,
            LENGTHUNIT["metre",1],
            ID["EPSG",8807]]],
    CS[Cartesian,2],
        AXIS["easting (X)",south,
            MERIDIAN[45,
                ANGLEUNIT["degree",0.0174532925199433]],
            ORDER[1],
            LENGTHUNIT["metre",1]],
        AXIS["northing (Y)",south,
            MERIDIAN[135,
                ANGLEUNIT["degree",0.0174532925199433]],
            ORDER[2],
            LENGTHUNIT["metre",1]],
    USAGE[
        SCOPE["unknown"],
        AREA["World - N hemisphere - north of 60°N"],
        BBOX[60,-180,90,180]],
    ID["EPSG",3413]]
Data axis to CRS axis mapping: 1,2
Origin = (-659100.000000000000000,-639100.000000000000000)
Pixel Size = (200.000000000000000,-200.000000000000000)
Metadata:
  AREA_OR_POINT=Area
Image Structure Metadata:
  COMPRESSION=DEFLATE
  INTERLEAVE=BAND
Corner Coordinates:
Upper Left  ( -659100.000, -639100.000) ( 90d52'57.45"W, 81d32'23.19"N)
Lower Left  ( -659100.000,-3379100.000) ( 56d 2'13.47"W, 58d58'10.19"N)
Upper Right (  857900.000, -639100.000) (  8d18'55.49"E, 80d 8'52.35"N)
Lower Right (  857900.000,-3379100.000) ( 30d45'16.18"W, 58d35'44.75"N)
Center      (   99400.000,-2009100.000) ( 42d10' 3.39"W, 71d35' 4.30"N)
Band 1 Block=512x512 Type=Float32, ColorInterp=Gray
  Min=-17040.822 Max=8270.726   Computed Min/Max=-17040.822,8270.726
  Minimum=-17040.822, Maximum=8270.726, Mean=-69.922, StdDev=332.203
  NoData Value=-2000000000
  Overviews: 3792x6850, 1896x3425, 948x1712, 474x856, 237x428
  Metadata:
    STATISTICS_MAXIMUM=8270.7255859375
    STATISTICS_MEAN=-69.922317558065
    STATISTICS_MINIMUM=-17040.822265625
    STATISTICS_STDDEV=332.20318780299
    STATISTICS_VALID_PERCENT=3.612
#+end_example

***** md5sum hashes of all data

#+NAME: QC_md5sum_NSIDC_0731
#+BEGIN_SRC bash :results table :eval no-export
cd ${DATADIR}/MEaSUREs/NSIDC-0731.005
# awk 'NR % 5 == 0' input > output # print every 5th line
# head -n2 # top two files
find . -type f -name "*vx*.tif" | LC_ALL=C sort | tail -n16| parallel --keep-order "md5sum {}"
#+END_SRC

#+RESULTS: QC_md5sum_NSIDC_0731
| 13039c11df27ca9f337221fe88bd2394 | ./2021.08.01/GL_vel_mosaic_Monthly_01Aug21_31Aug21_vx_v05.0.tif |
| 55fc5cc6eeadd35b3e550ca99b10aa0b | ./2021.09.01/GL_vel_mosaic_Monthly_01Sep21_30Sep21_vx_v05.0.tif |
| 1a5c03d0c868aafa7b72ed85cc498dd1 | ./2021.10.01/GL_vel_mosaic_Monthly_01Oct21_31Oct21_vx_v05.0.tif |
| b024338814172429bf53d769b58f93b0 | ./2021.11.01/GL_vel_mosaic_Monthly_01Nov21_30Nov21_vx_v05.0.tif |
| 57fbeb606692bc436193862e757684c9 | ./2021.12.01/GL_vel_mosaic_Monthly_01Dec21_31Dec21_vx_v05.0.tif |
| 2059149ebf1434f506e0a63400c9161e | ./2022.01.01/GL_vel_mosaic_Monthly_01Jan22_31Jan22_vx_v05.0.tif |
| a16a0f0ca27201348dad60853361cd32 | ./2022.02.01/GL_vel_mosaic_Monthly_01Feb22_28Feb22_vx_v05.0.tif |
| 4ec84ba26bf9c50a5b7c06ffc6a8e916 | ./2022.03.01/GL_vel_mosaic_Monthly_01Mar22_31Mar22_vx_v05.0.tif |
| 916f01f2946dc516adfd6c3efe009a95 | ./2022.04.01/GL_vel_mosaic_Monthly_01Apr22_30Apr22_vx_v05.0.tif |
| b6cc0dcc40964bea458e7e0fa696aeb9 | ./2022.05.01/GL_vel_mosaic_Monthly_01May22_31May22_vx_v05.0.tif |
| abe3dc0370f5f6f483128e722861980b | ./2022.06.01/GL_vel_mosaic_Monthly_01Jun22_30Jun22_vx_v05.0.tif |
| 1d459b95bbbc9106d26a3d1caa5f16eb | ./2022.07.01/GL_vel_mosaic_Monthly_01Jul22_31Jul22_vx_v05.0.tif |
| fc81cc7ac5bc8f48dc6495df316cc529 | ./2022.08.01/GL_vel_mosaic_Monthly_01Aug22_31Aug22_vx_v05.0.tif |
| 3e82d61042b74a18d47ef88d1156d99f | ./2022.09.01/GL_vel_mosaic_Monthly_01Sep22_30Sep22_vx_v05.0.tif |
| eb464f88c91336997da72319f44bfae5 | ./2022.10.01/GL_vel_mosaic_Monthly_01Oct22_31Oct22_vx_v05.0.tif |
| 32c77418957e3a16badd0ef39baa0f3d | ./2022.11.01/GL_vel_mosaic_Monthly_01Nov22_30Nov22_vx_v05.0.tif |

*** Sentinel 1
***** File List

#+BEGIN_SRC bash :results verbatim :eval no-export
(cd ${DATADIR}/Promice200m; find . -name "*.nc" | LC_ALL=C sort)
#+END_SRC

#+RESULTS:
#+begin_example
./IV_ROTR_20160105_20160128.nc
./IV_ROTR_20160117_20160209.nc
./IV_ROTR_20160128_20160221.nc
./IV_ROTR_20160210_20160304.nc
./IV_ROTR_20160222_20160316.nc
./IV_ROTR_20160304_20160328.nc
./IV_ROTR_20160317_20160409.nc
./IV_ROTR_20160329_20160421.nc
./IV_ROTR_20160410_20160503.nc
./IV_ROTR_20160422_20160515.nc
./IV_ROTR_20160504_20160527.nc
./IV_ROTR_20160516_20160608.nc
./IV_ROTR_20160528_20160614.nc
./IV_ROTR_20160624_20160713.nc
./IV_ROTR_20160703_20160726.nc
./IV_ROTR_20160716_20160807.nc
./IV_ROTR_20160728_20160819.nc
./IV_ROTR_20160808_20160831.nc
./IV_ROTR_20160820_20160912.nc
./IV_ROTR_20160901_20160924.nc
./IV_ROTR_20160913_20161006.nc
./IV_ROTR_20160925_20161018.nc
./IV_ROTR_20161006_20161030.nc
./IV_ROTR_20161018_20161111.nc
./IV_ROTR_20161030_20161123.nc
./IV_ROTR_20161111_20161205.nc
./IV_ROTR_20161123_20161217.nc
./IV_ROTR_20161205_20161229.nc
./IV_ROTR_20161217_20170110.nc
./IV_ROTR_20161229_20170111.nc
./IV_ROTR_20170110_20170203.nc
./IV_ROTR_20170112_20170215.nc
./IV_ROTR_20170122_20170227.nc
./IV_ROTR_20170215_20170311.nc
./IV_ROTR_20170227_20170323.nc
./IV_ROTR_20170311_20170404.nc
./IV_ROTR_20170323_20170416.nc
./IV_ROTR_20170404_20170428.nc
./IV_ROTR_20170416_20170509.nc
./IV_ROTR_20170428_20170522.nc
./IV_ROTR_20170510_20170603.nc
./IV_ROTR_20170522_20170615.nc
./IV_ROTR_20170603_20170627.nc
./IV_ROTR_20170615_20170709.nc
./IV_ROTR_20170627_20170721.nc
./IV_ROTR_20170709_20170802.nc
./IV_ROTR_20170721_20170814.nc
./IV_ROTR_20170802_20170826.nc
./IV_ROTR_20170814_20170907.nc
./IV_ROTR_20170828_20170919.nc
./IV_ROTR_20170907_20171001.nc
./IV_ROTR_20170919_20171013.nc
./IV_ROTR_20171001_20171025.nc
./IV_ROTR_20171013_20171106.nc
./IV_ROTR_20171025_20171118.nc
./IV_ROTR_20171106_20171130.nc
./IV_ROTR_20171118_20171212.nc
./IV_ROTR_20181231_20190124.nc
./IV_ROTR_20190112_20190205.nc
./IV_ROTR_20190124_20190217.nc
./IV_ROTR_20190205_20190301.nc
./IV_ROTR_20190217_20190313.nc
./IV_ROTR_20190301_20190325.nc
./IV_ROTR_20190313_20190406.nc
./IV_ROTR_20190325_20190417.nc
./IV_ROTR_20190406_20190430.nc
./IV_ROTR_20190418_20190512.nc
./IV_ROTR_20190430_20190524.nc
./IV_ROTR_20190512_20190605.nc
./IV_ROTR_20190524_20190617.nc
./IV_ROTR_20190605_20190629.nc
./IV_ROTR_20190617_20190711.nc
./IV_ROTR_20190629_20190723.nc
./IV_ROTR_20190711_20190804.nc
./IV_ROTR_20190723_20190816.nc
./IV_ROTR_20190804_20190828.nc
./IV_ROTR_20190816_20190909.nc
./IV_ROTR_20190828_20190921.nc
./IV_ROTR_20190909_20191003.nc
./IV_ROTR_20190921_20191015.nc
./IV_ROTR_20191003_20191027.nc
./IV_ROTR_20191015_20191108.nc
./IV_ROTR_20191027_20191120.nc
./IV_ROTR_20191108_20191202.nc
./IV_ROTR_20191120_20191214.nc
./IV_ROTR_20191202_20191226.nc
./IV_ROTR_20191214_20200107.nc
./IV_ROTR_20191226_20200119.nc
./IV_ROTR_20200107_20200131.nc
./IV_ROTR_20200119_20200212.nc
./IV_ROTR_20200131_20200224.nc
./IV_ROTR_20200212_20200307.nc
./IV_ROTR_20200224_20200319.nc
./IV_ROTR_20200307_20200331.nc
./IV_ROTR_20200319_20200412.nc
./IV_ROTR_20200331_20200424.nc
./IV_ROTR_20200412_20200506.nc
./IV_ROTR_20200424_20200518.nc
./IV_ROTR_20200506_20200530.nc
./IV_ROTR_20200518_20200611.nc
./IV_ROTR_20200530_20200623.nc
./IV_ROTR_20200611_20200705.nc
./IV_ROTR_20200623_20200717.nc
./IV_ROTR_20200705_20200729.nc
./IV_ROTR_20200717_20200810.nc
./IV_ROTR_20200729_20200822.nc
./IV_ROTR_20200810_20200903.nc
./IV_ROTR_20200822_20200915.nc
./IV_ROTR_20200903_20200927.nc
./IV_ROTR_20200915_20201009.nc
./IV_ROTR_20200927_20201021.nc
./IV_ROTR_20201009_20201102.nc
./IV_ROTR_20201021_20201114.nc
./IV_ROTR_20201102_20201126.nc
./IV_ROTR_20201114_20201208.nc
./IV_ROTR_20201126_20201220.nc
./IV_ROTR_20201208_20210101.nc
./IV_ROTR_20201220_20210113.nc
./IV_ROTR_20210101_20210125.nc
./IV_ROTR_20210113_20210206.nc
./IV_ROTR_20210125_20210218.nc
./IV_ROTR_20210206_20210302.nc
./IV_ROTR_20210218_20210314.nc
./IV_ROTR_20210302_20210326.nc
./IV_ROTR_20210314_20210407.nc
./IV_ROTR_20210326_20210419.nc
./IV_ROTR_20210407_20210427.nc
./IV_ROTR_20210419_20210513.nc
./IV_ROTR_20210506_20210525.nc
./IV_ROTR_20210513_20210606.nc
./IV_ROTR_20210525_20210618.nc
./IV_ROTR_20210606_20210630.nc
./IV_ROTR_20210618_20210712.nc
./IV_ROTR_20210630_20210724.nc
./IV_ROTR_20210712_20210805.nc
./IV_ROTR_20210724_20210817.nc
./IV_ROTR_20210805_20210829.nc
./IV_ROTR_20210817_20210910.nc
./IV_ROTR_20210829_20210922.nc
./IV_ROTR_20210910_20211004.nc
./IV_ROTR_20210922_20211016.nc
./IV_ROTR_20211004_20211028.nc
./IV_ROTR_20211016_20211109.nc
./IV_ROTR_20211028_20211121.nc
./IV_ROTR_20211109_20211203.nc
./IV_ROTR_20211121_20211215.nc
./IV_ROTR_20211203_20211227.nc
./IV_ROTR_20211215_20220108.nc
./IV_ROTR_20211228_20220120.nc
./IV_ROTR_20220109_20220201.nc
./IV_ROTR_20220121_20220213.nc
./IV_ROTR_20220201_20220225.nc
./IV_ROTR_20220213_20220309.nc
./IV_ROTR_20220225_20220321.nc
./IV_ROTR_20220309_20220402.nc
./IV_ROTR_20220322_20220414.nc
./IV_ROTR_20220403_20220426.nc
./IV_ROTR_20220415_20220508.nc
./IV_ROTR_20220427_20220520.nc
./IV_ROTR_20220509_20220601.nc
./IV_ROTR_20220521_20220613.nc
./IV_ROTR_20220602_20220625.nc
./IV_ROTR_20220614_20220707.nc
./IV_ROTR_20220626_20220719.nc
./IV_ROTR_20220708_20220731.nc
./IV_ROTR_20220720_20220812.nc
./IV_ROTR_20220801_20220824.nc
./IV_ROTR_20220813_20220905.nc
./IV_ROTR_20220825_20220917.nc
./IV_ROTR_20220906_20220929.nc
./IV_ROTR_20220918_20221011.nc
./IV_ROTR_20220930_20221023.nc
./IV_ROTR_20221012_20221104.nc
./IV_ROTR_20221024_20221116.nc
./IV_ROTR_20221105_20221128.nc
./IV_ROTR_20221117_20221210.nc
./IV_ROTR_20221129_20221222.nc
./IV_ROTR_20221211_20230103.nc
./IV_ROTR_20221223_20230115.nc
./IV_ROTR_20230104_20230127.nc
./IV_ROTR_20230115_20230208.nc
./IV_ROTR_20230128_20230220.nc
./IV_ROTR_20230208_20230304.nc
./IV_ROTR_20230220_20230316.nc
./IV_ROTR_20230304_20230328.nc
./IV_ROTR_20230318_20230409.nc
./IV_ROTR_20230330_20230421.nc
./IV_ROTR_20230410_20230503.nc
./IV_ROTR_20230422_20230515.nc
./IV_ROTR_20230504_20230527.nc
./IV_ROTR_20230516_20230608.nc
./IV_ROTR_20230528_20230620.nc
./IV_ROTR_20230609_20230702.nc
./IV_ROTR_20230621_20230714.nc
./IV_ROTR_20230703_20230726.nc
./IV_ROTR_20230715_20230807.nc
./IV_ROTR_20230727_20230819.nc
./IV_ROTR_20230808_20230831.nc
./IV_ROTR_20230820_20230912.nc
./IV_ROTR_20230901_20230924.nc
./IV_ROTR_20230913_20231006.nc
./IV_ROTR_20231112_20231205.nc
./IV_ROTR_20231124_20231217.nc
./IV_ROTR_20231206_20231229.nc
./IV_ROTR_20231219_20240110.nc
./IV_ROTR_20231231_20240122.nc
./IV_ROTR_20240110_20240203.nc
./IV_ROTR_20240122_20240215.nc
./IV_ROTR_20240203_20240227.nc
./IV_ROTR_20240216_20240310.nc
./IV_ROTR_20240227_20240322.nc
./IV_ROTR_20240312_20240403.nc
./IV_ROTR_20240323_20240415.nc
./IV_ROTR_20240404_20240427.nc
#+end_example

***** File Metadata

#+NAME: QC_ncdump_Sentinel1
#+BEGIN_SRC bash :results verbatim :eval no-export
somefile=$(find ${DATADIR}/Promice200m/ -name "*.nc" | LC_ALL=C sort | head -n1)
# md5sum ${somefile}
echo ""
ncdump -chs ${somefile}
#+END_SRC

#+RESULTS: QC_ncdump_Sentinel1
#+begin_example

netcdf IV_ROTR_20160105_20160128 {
dimensions:
	y = 13500 ;
	x = 7500 ;
	time = UNLIMITED ; // (1 currently)
	bnds = 2 ;
variables:
	char crs ;
		crs:grid_mapping_name = "polar_stereographic" ;
		crs:standard_parallel = 70. ;
		crs:longitude_of_prime_meridian = 0. ;
		crs:straight_vertical_longitude_from_pole = -45. ;
		crs:semi_major_axis = 6378137. ;
		crs:inverse_flattening = 298.257223563 ;
		crs:latitude_of_projection_origin = 90. ;
		crs:false_easting = 0. ;
		crs:false_northing = 0. ;
		crs:_Storage = "contiguous" ;
	double y(y) ;
		y:units = "m" ;
		y:axis = "Y" ;
		y:long_name = "y coordinate of projection" ;
		y:standard_name = "projection_y_coordinate" ;
		y:_Storage = "contiguous" ;
		y:_Endianness = "little" ;
	double x(x) ;
		x:units = "m" ;
		x:axis = "X" ;
		x:long_name = "x coordinate of projection" ;
		x:standard_name = "projection_x_coordinate" ;
		x:_Storage = "contiguous" ;
		x:_Endianness = "little" ;
	double time(time) ;
		time:standard_name = "time" ;
		time:units = "days since 1990-1-1 0:0:0" ;
		time:long_name = "Midpoint time of acquisitons used" ;
		time:bounds = "time_bnds" ;
		time:calendar = "standard" ;
		time:_Storage = "chunked" ;
		time:_ChunkSizes = 512 ;
		time:_Endianness = "little" ;
	double time_bnds(time, bnds) ;
		time_bnds:units = "days since 1990-1-1 0:0:0" ;
		time_bnds:_Storage = "chunked" ;
		time_bnds:_ChunkSizes = 1, 2 ;
		time_bnds:_Endianness = "little" ;
	float land_ice_surface_easting_velocity(time, y, x) ;
		land_ice_surface_easting_velocity:_FillValue = 1.e+20f ;
		land_ice_surface_easting_velocity:units = "m/day" ;
		land_ice_surface_easting_velocity:description = "easting ice velocity" ;
		land_ice_surface_easting_velocity:grid_mapping = "crs" ;
		land_ice_surface_easting_velocity:coordinates = "time y x" ;
		land_ice_surface_easting_velocity:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_easting_velocity:missing_value = 1.e+20f ;
		land_ice_surface_easting_velocity:long_name = "easting ice velocity" ;
		land_ice_surface_easting_velocity:standard_name = "land_ice_surface_x_velocity" ;
		land_ice_surface_easting_velocity:_Storage = "chunked" ;
		land_ice_surface_easting_velocity:_ChunkSizes = 1, 1350, 750 ;
		land_ice_surface_easting_velocity:_Shuffle = "true" ;
		land_ice_surface_easting_velocity:_DeflateLevel = 4 ;
		land_ice_surface_easting_velocity:_Endianness = "little" ;
	float land_ice_surface_northing_velocity(time, y, x) ;
		land_ice_surface_northing_velocity:_FillValue = 1.e+20f ;
		land_ice_surface_northing_velocity:units = "m/day" ;
		land_ice_surface_northing_velocity:description = "northing ice velocity" ;
		land_ice_surface_northing_velocity:grid_mapping = "crs" ;
		land_ice_surface_northing_velocity:coordinates = "time y x" ;
		land_ice_surface_northing_velocity:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_northing_velocity:missing_value = 1.e+20f ;
		land_ice_surface_northing_velocity:long_name = "northing ice velocity" ;
		land_ice_surface_northing_velocity:standard_name = "land_ice_surface_y_velocity" ;
		land_ice_surface_northing_velocity:_Storage = "chunked" ;
		land_ice_surface_northing_velocity:_ChunkSizes = 1, 1350, 750 ;
		land_ice_surface_northing_velocity:_Shuffle = "true" ;
		land_ice_surface_northing_velocity:_DeflateLevel = 4 ;
		land_ice_surface_northing_velocity:_Endianness = "little" ;
	float land_ice_surface_vertical_velocity(time, y, x) ;
		land_ice_surface_vertical_velocity:_FillValue = 1.e+20f ;
		land_ice_surface_vertical_velocity:units = "m/day" ;
		land_ice_surface_vertical_velocity:standard_name = "land_ice_surface_vertical_velocity" ;
		land_ice_surface_vertical_velocity:grid_mapping = "crs" ;
		land_ice_surface_vertical_velocity:coordinates = "time y x" ;
		land_ice_surface_vertical_velocity:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_vertical_velocity:missing_value = 1.e+20f ;
		land_ice_surface_vertical_velocity:description = "vertical velocity derived assuming surface parallel flow" ;
		land_ice_surface_vertical_velocity:long_name = "vertical velocity derived assuming surface parallel flow" ;
		land_ice_surface_vertical_velocity:_Storage = "chunked" ;
		land_ice_surface_vertical_velocity:_ChunkSizes = 1, 1350, 750 ;
		land_ice_surface_vertical_velocity:_Shuffle = "true" ;
		land_ice_surface_vertical_velocity:_DeflateLevel = 4 ;
		land_ice_surface_vertical_velocity:_Endianness = "little" ;
	float land_ice_surface_velocity_magnitude(time, y, x) ;
		land_ice_surface_velocity_magnitude:_FillValue = 1.e+20f ;
		land_ice_surface_velocity_magnitude:units = "m/day" ;
		land_ice_surface_velocity_magnitude:description = "magnitude of horizontal ice velocity" ;
		land_ice_surface_velocity_magnitude:standard_name = "land_ice_surface_velocity_magnitude" ;
		land_ice_surface_velocity_magnitude:grid_mapping = "crs" ;
		land_ice_surface_velocity_magnitude:coordinates = "time y x" ;
		land_ice_surface_velocity_magnitude:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_velocity_magnitude:missing_value = 1.e+20f ;
		land_ice_surface_velocity_magnitude:long_name = "magnitude of horizontal ice velocity" ;
		land_ice_surface_velocity_magnitude:_Storage = "chunked" ;
		land_ice_surface_velocity_magnitude:_ChunkSizes = 1, 1350, 750 ;
		land_ice_surface_velocity_magnitude:_Shuffle = "true" ;
		land_ice_surface_velocity_magnitude:_DeflateLevel = 4 ;
		land_ice_surface_velocity_magnitude:_Endianness = "little" ;
	float land_ice_surface_easting_velocity_std(time, y, x) ;
		land_ice_surface_easting_velocity_std:_FillValue = 1.e+20f ;
		land_ice_surface_easting_velocity_std:units = "m/day" ;
		land_ice_surface_easting_velocity_std:description = "easting ice velocity error estimate " ;
		land_ice_surface_easting_velocity_std:grid_mapping = "crs" ;
		land_ice_surface_easting_velocity_std:coordinates = "time y x" ;
		land_ice_surface_easting_velocity_std:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_easting_velocity_std:missing_value = 1.e+20f ;
		land_ice_surface_easting_velocity_std:long_name = "easting ice velocity error estimate " ;
		land_ice_surface_easting_velocity_std:standard_name = "land_ice_surface_x_velocity standard_error" ;
		land_ice_surface_easting_velocity_std:_Storage = "chunked" ;
		land_ice_surface_easting_velocity_std:_ChunkSizes = 1, 1350, 750 ;
		land_ice_surface_easting_velocity_std:_Shuffle = "true" ;
		land_ice_surface_easting_velocity_std:_DeflateLevel = 4 ;
		land_ice_surface_easting_velocity_std:_Endianness = "little" ;
	float land_ice_surface_northing_velocity_std(time, y, x) ;
		land_ice_surface_northing_velocity_std:_FillValue = 1.e+20f ;
		land_ice_surface_northing_velocity_std:units = "m/day" ;
		land_ice_surface_northing_velocity_std:description = "northing ice velocity error estimate" ;
		land_ice_surface_northing_velocity_std:grid_mapping = "crs" ;
		land_ice_surface_northing_velocity_std:coordinates = "time y x" ;
		land_ice_surface_northing_velocity_std:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_northing_velocity_std:missing_value = 1.e+20f ;
		land_ice_surface_northing_velocity_std:long_name = "northing ice velocity error estimate" ;
		land_ice_surface_northing_velocity_std:standard_name = "land_ice_surface_y_velocity standard_error" ;
		land_ice_surface_northing_velocity_std:_Storage = "chunked" ;
		land_ice_surface_northing_velocity_std:_ChunkSizes = 1, 1350, 750 ;
		land_ice_surface_northing_velocity_std:_Shuffle = "true" ;
		land_ice_surface_northing_velocity_std:_DeflateLevel = 4 ;
		land_ice_surface_northing_velocity_std:_Endianness = "little" ;
	float land_ice_surface_velocity_magnitude_std(time, y, x) ;
		land_ice_surface_velocity_magnitude_std:_FillValue = 1.e+20f ;
		land_ice_surface_velocity_magnitude_std:units = "m/day" ;
		land_ice_surface_velocity_magnitude_std:description = "horizontal ice velocity error magnitude estimate" ;
		land_ice_surface_velocity_magnitude_std:standard_name = "land_ice_surface_velocity_magnitude_std" ;
		land_ice_surface_velocity_magnitude_std:grid_mapping = "crs" ;
		land_ice_surface_velocity_magnitude_std:coordinates = "time y x" ;
		land_ice_surface_velocity_magnitude_std:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_velocity_magnitude_std:missing_value = 1.e+20f ;
		land_ice_surface_velocity_magnitude_std:long_name = "horizontal ice velocity error magnitude estimate" ;
		land_ice_surface_velocity_magnitude_std:_Storage = "chunked" ;
		land_ice_surface_velocity_magnitude_std:_ChunkSizes = 1, 1350, 750 ;
		land_ice_surface_velocity_magnitude_std:_Shuffle = "true" ;
		land_ice_surface_velocity_magnitude_std:_DeflateLevel = 4 ;
		land_ice_surface_velocity_magnitude_std:_Endianness = "little" ;

// global attributes:
		:Conventions = "CF-1.5" ;
		:time_coverage_start = "2016-01-05" ;
		:time_coverage_end = "2016-01-28" ;
		:sensors_used = "Sentinel-1A" ;
		:institution = "GEUS" ;
		:methods_used = "Offset-tracking" ;
		:calibration_method = "None" ;
		:title = "Greenland Ice Velocity from 2016-01-05 to 2016-01-28" ;
		:summary = "Greenland Ice Velocity from Sentinel-1 offset tracking for the period 2016-01-05 to 2016-01-28" ;
		:product_version = "1.0" ;
		:_NCProperties = "version=2,netcdf=4.7.3,hdf5=1.10.4" ;
		:_SuperblockVersion = 0 ;
		:_IsNetcdf4 = 1 ;
		:_Format = "netCDF-4" ;
}
#+end_example


***** md5sum Hashes

#+NAME: QC_md5sum_Sentinel1
#+BEGIN_SRC bash :results table :eval no-export
cd ${DATADIR}/Promice200m/
# awk 'NR % 5 == 0' input > output # print every 5th line
# head -n2 # top two files
find . -type f -name "*.nc" | LC_ALL=C sort | tail -n16 | parallel --keep-order "md5sum {}"
#+END_SRC

#+RESULTS: QC_md5sum_Sentinel1
| 1d1820690bdb6b371d6122c1745ee9ec | ./IV_ROTR_20230820_20230912.nc |
| 9ec88464222f9eeb58e59ea96d986f08 | ./IV_ROTR_20230901_20230924.nc |
| 975d0f6e26307f3745fe25fbcd410abf | ./IV_ROTR_20230913_20231006.nc |
| 0d46ad29011aab6ce6139a280d61c8c7 | ./IV_ROTR_20231112_20231205.nc |
| 08c8ebb7577cd620cce69a2a1ada68a4 | ./IV_ROTR_20231124_20231217.nc |
| e585ab8fc1c4b91818e154409d3b1462 | ./IV_ROTR_20231206_20231229.nc |
| b782880c44727ff016634443466dcc1c | ./IV_ROTR_20231219_20240110.nc |
| 04c9db07f804e7854ebe8192d3218916 | ./IV_ROTR_20231231_20240122.nc |
| 391143d180be9f75707be545215a8b0e | ./IV_ROTR_20240110_20240203.nc |
| 96476272ad489da1b308c77385f16a14 | ./IV_ROTR_20240122_20240215.nc |
| 7ab22147d23e1475fe81cf799b8f8c79 | ./IV_ROTR_20240203_20240227.nc |
| 2edf695e9cf100abe8509107eee56174 | ./IV_ROTR_20240216_20240310.nc |
| 134968c7e1946c42270af6eab46f3c14 | ./IV_ROTR_20240227_20240322.nc |
| db4d3ce7a49a410200efc6d3d9e545da | ./IV_ROTR_20240312_20240403.nc |
| 08ef95e7312dc20b137f4f5d13b0ff0d | ./IV_ROTR_20240323_20240415.nc |
| 9a9f2ff68ef0d6db242b813a19af3f99 | ./IV_ROTR_20240404_20240427.nc |

** Results
*** GIS
#+BEGIN_SRC bash :results table :eval no-export
FILE=./out/GIS_D.csv
cat ${FILE}
#+END_SRC

#+RESULTS:

*** Regions
#+BEGIN_SRC bash :results table :eval no-export
FILE=./out/region_D.csv
cat ${FILE}
#+END_SRC

#+RESULTS:

*** Some arbitrary glaciers
#+BEGIN_SRC bash :results table :eval no-export
FILE=./out/sector_D.csv

# GLLIST='Date|ACADEMY|SERMEQ_KUJ|BOWDOIN|BUGT|HELH|STORE|KANGER|ZACH|RINK|NIOGHALV|PETERMANN'
GLLIST='Date|JAKOBSH|HELH|STORE|ZACH' # |RINK'

# head -n1 ${FILE} \
#   | tr ',' '\n' \
#   | cat -n \
#   | grep -E ${GLLIST}

COLS=$(\
head -n1 <(cat ${FILE}) \
  | tr ',' '\n' \
  | cat -n \
  | grep -E ${GLLIST} \
  | cut -d$'\t' -f1 
)

cut -d, -f$(echo $COLS|tr ' ' ',') <(cat ${FILE})
#+END_SRC

#+RESULTS:


* Meta                                                  :noexport:

This document probably uses code - python, octave, and/or R. Below I provide the version of the software(s) used to create this document in order to support the goal of reproducibility. 

*** Os installed
#+BEGIN_SRC bash :results table :eval no-export :exports results
for tool in gdal-bin parallel sed netcdf-bin proj-bin nco bash grass-core; do dpkg -l | grep "ii  ${tool} " | sed 's/\ \ */\ /g' | cut -d" " -f2,3; done| sort
#+END_SRC

#+RESULTS:
| bash       | 4.4.18-2ubuntu1.3    |
| gdal-bin   | 3.0.4+dfsg-1~bionic0 |
| grass-core | 7.8.6-1~bionic1      |
| nco        | 4.7.2-1              |
| netcdf-bin | 1:4.6.0-2build1      |
| parallel   | 20161222-1           |
| proj-bin   | 7.0.0-1~bionic0      |
| sed        | 4.4-2                |

*** Org Mode
#+BEGIN_SRC elisp :exports both :eval no-export
(org-version nil t)
#+END_SRC

#+RESULTS:
: Org mode version 9.5 (9.5-g0a86ad @ /home/tmb_operational/.emacs.d/elpa/org-9.5/)

*** Python

#+BEGIN_SRC bash :cmdline -i :results verbatim :exports both :eval no-export
docker run mankoff/ice_discharge:conda conda env export --no-builds --name base

# replicate this env outside of Docker with:
#  conda env create --name ice_discharge -f environment.yml 

# . /home/kdm/local/miniconda3/etc/profile.d/conda.sh
# conda env export --no-builds --name ice_discharge | tee environment.yml
#+END_SRC

#+RESULTS:
#+begin_example
name: base
channels:
  - defaults
dependencies:
  - _libgcc_mutex=0.1
  - _openmp_mutex=4.5
  - argon2-cffi=21.3.0
  - argon2-cffi-bindings=21.2.0
  - asttokens=2.0.5
  - attrs=21.4.0
  - backcall=0.2.0
  - beautifulsoup4=4.11.1
  - blas=1.0
  - bleach=4.1.0
  - bottleneck=1.3.4
  - brotli=1.0.9
  - brotlipy=0.7.0
  - c-ares=1.18.1
  - ca-certificates=2022.4.26
  - certifi=2022.6.15
  - cffi=1.15.0
  - charset-normalizer=2.0.4
  - colorama=0.4.4
  - conda=4.13.0
  - conda-content-trust=0.1.1
  - conda-package-handling=1.8.1
  - cryptography=36.0.0
  - curl=7.82.0
  - cycler=0.11.0
  - cython=0.29.28
  - dbus=1.13.18
  - debugpy=1.5.1
  - decorator=5.1.1
  - defusedxml=0.7.1
  - entrypoints=0.4
  - executing=0.8.3
  - expat=2.4.4
  - fontconfig=2.13.1
  - fonttools=4.25.0
  - freetype=2.11.0
  - giflib=5.2.1
  - glib=2.69.1
  - gst-plugins-base=1.14.0
  - gstreamer=1.14.0
  - icu=58.2
  - idna=3.3
  - intel-openmp=2021.4.0
  - ipykernel=6.9.1
  - ipython=8.3.0
  - ipython_genutils=0.2.0
  - ipywidgets=7.6.5
  - jedi=0.18.1
  - jinja2=3.0.3
  - jpeg=9e
  - jsonschema=4.4.0
  - jupyter=1.0.0
  - jupyter_client=7.2.2
  - jupyter_console=6.4.3
  - jupyter_core=4.10.0
  - jupyterlab_pygments=0.1.2
  - jupyterlab_widgets=1.0.0
  - kiwisolver=1.4.2
  - krb5=1.19.2
  - lcms2=2.12
  - ld_impl_linux-64=2.35.1
  - libcurl=7.82.0
  - libedit=3.1.20210910
  - libev=4.33
  - libffi=3.3
  - libgcc-ng=9.3.0
  - libgfortran-ng=7.5.0
  - libgfortran4=7.5.0
  - libgomp=9.3.0
  - libnghttp2=1.46.0
  - libpng=1.6.37
  - libsodium=1.0.18
  - libssh2=1.10.0
  - libstdcxx-ng=9.3.0
  - libtiff=4.2.0
  - libuuid=1.0.3
  - libwebp=1.2.2
  - libwebp-base=1.2.2
  - libxcb=1.15
  - libxml2=2.9.14
  - lz4-c=1.9.3
  - markupsafe=2.1.1
  - matplotlib=3.5.1
  - matplotlib-base=3.5.1
  - matplotlib-inline=0.1.2
  - mistune=0.8.4
  - mkl=2021.4.0
  - mkl-service=2.4.0
  - mkl_fft=1.3.1
  - mkl_random=1.2.2
  - munkres=1.1.4
  - nbclient=0.5.13
  - nbconvert=6.4.4
  - nbformat=5.3.0
  - ncurses=6.3
  - nest-asyncio=1.5.5
  - notebook=6.4.11
  - numexpr=2.8.1
  - numpy=1.22.3
  - numpy-base=1.22.3
  - openssl=1.1.1o
  - packaging=21.3
  - pandas=1.4.2
  - pandocfilters=1.5.0
  - parso=0.8.3
  - patsy=0.5.2
  - pcre=8.45
  - pexpect=4.8.0
  - pickleshare=0.7.5
  - pillow=9.0.1
  - pip=21.2.4
  - prometheus_client=0.13.1
  - prompt-toolkit=3.0.20
  - prompt_toolkit=3.0.20
  - ptyprocess=0.7.0
  - pure_eval=0.2.2
  - pycosat=0.6.3
  - pycparser=2.21
  - pygments=2.11.2
  - pyopenssl=22.0.0
  - pyparsing=3.0.4
  - pyqt=5.9.2
  - pyrsistent=0.18.0
  - pysocks=1.7.1
  - python=3.9.12
  - python-dateutil=2.8.2
  - python-fastjsonschema=2.15.1
  - pytz=2022.1
  - pyzmq=22.3.0
  - qt=5.9.7
  - qtconsole=5.3.0
  - qtpy=2.0.1
  - readline=8.1.2
  - requests=2.27.1
  - ruamel_yaml=0.15.100
  - scipy=1.7.3
  - send2trash=1.8.0
  - setuptools=61.2.0
  - sip=4.19.13
  - six=1.16.0
  - soupsieve=2.3.1
  - sqlite=3.38.2
  - stack_data=0.2.0
  - statsmodels=0.13.2
  - tabulate=0.8.9
  - terminado=0.13.1
  - testpath=0.6.0
  - tk=8.6.11
  - tornado=6.1
  - tqdm=4.63.0
  - traitlets=5.1.1
  - typing-extensions=4.1.1
  - typing_extensions=4.1.1
  - tzdata=2022a
  - urllib3=1.26.8
  - wcwidth=0.2.5
  - webencodings=0.5.1
  - wheel=0.37.1
  - widgetsnbextension=3.5.2
  - xarray=0.20.1
  - xz=5.2.5
  - yaml=0.2.5
  - zeromq=4.3.4
  - zlib=1.2.12
  - zstd=1.5.2
  - pip:
    - cfchecker==4.1.0
    - cftime==1.6.0
    - cfunits==3.3.4
    - future==0.18.2
    - grass-session==0.5
    - nc-time-axis==1.4.1
    - netcdf4==1.5.8
    - pydataverse==0.2.1
    - pyshp==2.3.0
    - semver==2.13.0
    - uncertainties==3.1.7
prefix: /opt/conda
#+end_example

* LaTeX Setup                                           :noexport:
#+NAME: copernicus-latex-setup
#+BEGIN_SRC elisp :results none :eval no-export
(add-to-list 'org-latex-classes
               `("copernicus"
                 "\\documentclass{copernicus}
               [NO-DEFAULT-PACKAGES]
               [NO-PACKAGES]
               [NO-EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
               )

;; (org-add-link-type
;;  "citet"  (lambda (key) (org-open-file cby-references-file t nil key))
;;  (lambda (path desc format)
;;    (cond
;;     ((eq format 'latex) (format "\\citet{%s}" path))
;;     ((eq format 'ascii) (format "%s" desc))
;;     )))
;; (org-add-link-type
;;  "citep"  (lambda (key) (org-open-file cby-references-file t nil key))
;;  (lambda (path desc format)
;;    (cond
;;     ((eq format 'latex) (format "\\citep{%s}" path))
;;     ((eq format 'ascii) (format "%s" desc))
;;     )))

(setq-local org-latex-title-command "")
#+END_SRC

