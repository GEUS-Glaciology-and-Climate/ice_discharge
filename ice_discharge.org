#+Latex_Class: copernicus
#+AUTHOR: 
#+LaTeX_CLASS_OPTIONS: [essd, manuscript]
#+Options: toc:nil ^:t {}:t

#+PROPERTY: header-args: :comments both
#+PROPERTY: header-args:org :eval no
#+PROPERTY: header-args:PSMAP :eval no
#+PROPERTY: header-args:elisp :eval no :tangle no
#+PROPERTY: header-args:bash :eval no :noweb yes
#+PROPERTY: header-args:jupyter-python :eval no :noweb yes :kernel ice_discharge
#+PROPERTY: header-args: :session ice_discharge

#+MACRO: JAKO @@latex:Sermeq Kujalleq@@
#+EXCLUDE_TAGS: noexport

#+BEGIN_EXPORT LaTeX
\title{Greenland Ice Sheet solid ice discharge from 1986 through March 2020}
\Author[1]{Kenneth D.}{Mankoff}
\Author[1]{Anne}{Solgaard}
\Author[1]{William}{Colgan}
\Author[1]{Andreas P.}{Ahlstrøm}
\Author[2]{Shfaqat Abbas}{Khan}
\Author[1]{Robert S.}{Fausto}
\affil[1]{Department of Glaciology and Climate, Geological Survey of Denmark and Greenland (GEUS), Copenhagen, Denmark}
\affil[2]{DTU Space, National Space Institute, Department of Geodesy, Technical University of Denmark, Kgs. Lyngby, Denmark}
\runningtitle{Greenland ice sheet solid ice discharge}
\runningauthor{K. D. Mankoff \textit{et al.}}
\correspondence{Ken Mankoff (kdm@geus.dk)}

\received{}
\pubdiscuss{}
\revised{}
\accepted{}
\published{}
%% These dates will be inserted by ACPD
\firstpage{1}
\maketitle

\newcommand{\textcite}[1]{\citet{#1}}
\newcommand{\autocite}[1]{\citep{#1}}
#+END_EXPORT


#+BEGIN_abstract
We present a 1986 through March 2020 estimate of Greenland Ice Sheet ice discharge. Our data include all discharging ice that flows faster than 100 m yr^{-1} and are generated through an automatic and adaptable method, as opposed to conventional handpicked gates. We position gates near the present-year termini and estimate problematic bed topography (ice thickness) values where necessary. In addition to using annual time-varying ice thickness, our time series uses velocity maps that begin with sparse spatial and temporal coverage and end with near-complete spatial coverage and twelve-day updates to velocity. The 2010 through 2019 average ice discharge through the flux gates is ~487 \(\pm\)49 Gt yr^{-1}. The 10 % uncertainty stems primarily from uncertain ice bed location (ice thickness). We attribute the ~50 Gt yr^{-1} differences among our results and previous studies to our use of updated bed topography from BedMachine v3. Discharge is approximately steady from 1986 to 2000, increases sharply from 2000 to 2005, and then is approximately steady again. However, regional and glacier variability is more pronounced, with recent decreases at most major glaciers and in all but one region offset by increases in the northwest region through 2017, and in the southeast from 2017 through March 2020. As part of the journal's living archive option and our goal to make an operational product, all input data, code, and results from this study will be updated as needed (when new input data are available, as new features are added, or to fix bugs) and made available at doi:10.22008/promice/data/ice_discharge citep:GEUS_discharge_paper and at http://github.com/mankoff/ice_discharge.
#+END_abstract

# For 2000 to present mean see LINK: id:eca400fe-cffc-4e6b-8fc1-694945093adb

* Table of Contents                               :toc_2:noexport:
- [[#about-this-document][About This Document]]
  - [[#workflow][Workflow]]
- [[#summary][Summary]]
- [[#new-in-this-version][New in this version]]
- [[#introduction][Introduction]]
- [[#input-data][Input data]]
- [[#methods][Methods]]
  - [[#terminology][Terminology]]
  - [[#gate-location][Gate location]]
  - [[#thickness][Thickness]]
  - [[#missing-or-invalid-data][Missing or invalid data]]
  - [[#discharge][Discharge]]
- [[#results][Results]]
  - [[#gates][Gates]]
  - [[#discharge-1][Discharge]]
- [[#discussion][Discussion]]
  - [[#comparison-with-past-studies][Comparison with past studies]]
- [[#data-availability][Data availability]]
- [[#conclusions][Conclusions]]
- [[#other][Other]]
- [[#references][References]]
- [[#figures][Figures]]
  - [[#overview][Overview]]
  - [[#heatmap][Heatmap]]
  - [[#ice-thickness-v-velocity-2d-histogram-color--count][Ice Thickness v. Velocity 2D Histogram: Color = count]]
  - [[#discharge-time-series][Discharge Time Series]]
  - [[#discharge-time-series-regions][Discharge Time Series: Regions]]
  - [[#discharge-time-series-top-few][Discharge Time Series: Top Few]]
- [[#appendix][Appendix]]
  - [[#errors-and-uncertainties][Errors and uncertainties]]
  - [[#velocity-versus-thickness][Velocity versus thickness]]
  - [[#køge-bugt-bed-change-between-citetbamber_2013_bed-and-citetmorlighem_2017_bedmachine][Køge Bugt bed change between citet:bamber_2013_bed and citet:morlighem_2017_bedmachine]]
  - [[#sentinel-1-ice-velocity-maps][Sentinel-1 ice velocity maps]]
  - [[#software][Software]]
- [[#code][Code]]
  - [[#makefile][Makefile]]
  - [[#misc-helper][Misc Helper]]
  - [[#import-data][Import Data]]
  - [[#find-gates][Find Gates]]
  - [[#effective-velocity][Effective Velocity]]
  - [[#export-all-data-to-csv][Export all data to CSV]]
  - [[#compute-errors][Compute Errors]]
  - [[#raw-data-to-discharge-product][Raw data to discharge product]]
  - [[#csv-to-netcdf][CSV to NetCDF]]
  - [[#figures-1][Figures]]
- [[#supplementary-material][Supplementary Material]]
  - [[#errors-by-gate-sorted-by-total-d-err-err-][Errors by gate sorted by total D, err, err %]]
  - [[#annual-averages-from-observations-or-linear-interpolation][Annual averages from observations or linear interpolation]]
  - [[#køge-bugt-y2k][Køge Bugt Y2K]]
- [[#qa--qc--tests][QA / QC / tests]]
  - [[#files-used-in-this-work][Files used in this work]]
  - [[#results-1][Results]]
- [[#meta][Meta]]
- [[#latex-setup][LaTeX Setup]]

* About This Document                                   :noexport:

This document is an Emacs Org Mode plain-text file with code and text embedded. If you are viewing:

+ A DOC or PDF file, then it was generated by exporting from Org. Not all of the Org parts (code, results, comments, etc.) were exported. The Org source file is available upon request, and may be embedded in the PDF. Most non-Apple PDF viewers provide easy access to embedded or attached files.
 
+ A file with a =org= extension in something other than Emacs, then you are seeing the canonical version and the full source, but without any syntax highlighting, document structure, or the ability to execute the code blocks.

+ An =Org= file within Emacs, then this is the canonical version. You should be able to fully interact and reproduce the contents of this document, although it may require 3rd-party applications (Python, etc.) and a similar Emacs configuration. This is available upon request.

** Workflow

To recreate this work
+ See the hacking.org file

After updates, re-run make, and then...
+ Run the =workflow-update= block below
  + Cleaning all result blocks with =C-u C-c C-v k= or (org-babel-remove-result-one-or-many), then
  + Executing all blocks (without =:eval no=) using =C-c C-v C-b= or (org-babel-execute-buffer)
+ Review and commit changes
+ Re-run the =workflow-update= so that exported files have the right git commit
  + Review changes - there should be NONE
+ Push updates
  + =git push=
  + Upload data to dataverse

# WARNING: infinite recursion if not ":eval no"
#+header: :eval no
#+name: workflow-update
#+BEGIN_SRC emacs-lisp :results none :eval no :results none :exports none
(progn
  (require 'notifications)
  (toc-org-insert-toc)

  ;; remove #+results: blocks
  (org-babel-map-src-blocks nil (if (org-babel-where-is-src-block-result) 
				    (org-babel-insert-result "" '("replace"))))
  (save-buffer) ;; can now inspect "missing" results w/ git wdiff
  (org-babel-execute-buffer) ;; this make take a few whiles
  (save-buffer)
  (org-babel-tangle)
  (org-latex-export-to-latex)
  (notifications-notify
   :title "workflow-update done"
   :timeout 5000
   :transient t))
#+END_SRC



* Summary                                               :noexport:

# A short summary [...] 500-character (incl. spaces) non-technical text that may be used to promote your work to a broader audience. It should highlight your main conclusions and results, and what the implications are. If possible, please also summarize briefly why you did the research and how you did it.

We have produced an open and reproducible estimate of Greenland ice sheet solid ice discharge from 1986 through 2019. Our results show three modes at the total ice-sheet scale: Steady discharge from 1986 through 2000, increasing discharge from 2000 through 2005, steady discharge from 2005 through 2019. The behavior of individual sectors and glaciers is more complicated. This work was done to provide a 100% reproducible estimate to help constrain mass balance and sea level rise estimates. 

* New in this version

The data have been updated approximately every 12 days since the last version of the paper citep:mankoff_2020_solid was released. Every change is versioned with unique DOIs and posted on the new GEUS data portal at http://dataverse01.geus.dk/ or doi:10.22008/promice/data/ice_discharge. The git commit for this version of the paper is \input{|"git describe --always --dirty='*'"}.

# In this version the NSIDC 0478 ice velocity data citep:NSIDC_0478 have been updated from v2 to v2.1. These data are used for the baseline velocity and gate selection. Therefore the gate locations, number of gates, and number of gate pixels have all changed. Overall there are ~3 % fewer pixels, but only eight fewer gates, and some of the gate reduction is due to combining two gates on the same glacier that had a 1-pixel gap in the previous version. The effect of these changes is < 2.5 % of the estimated discharge. In this version there are now src_bash[:eval yes]{tail -n +2 tmp/dat_100_5000.csv | wc -l} {{{results(=5829=)}}} pixels and src_bash[:eval yes]{cut -d"," -f8 tmp/dat_100_5000.csv | tail -n +2 | sort | uniq | wc -l} {{{results(=267=)}}} gates. Many gates remain the same pixel for pixel, but some do not meet the same inclusion criteria applied to these new baseline data, while some glaciers are included in this version that were not in the previous version. Many gates are also a few pixels narrower.

The NSIDC 0646 ice velocity data citep:NSIDC_0646 have been updated from v2 to v3 with no significant changes. The early portion of the record has 1 less velocity map per month and ~1 Gt (~0.2 %) less discharge per year.

# This update increases coverage and discharge in the 1980s by ~25 to 40 Gt yr^{-1} (~6 to 10 %) due to higher velocity estimates than the previous product that covered that time period with annual averages citep:mouginot_2018_1972to1990,mouginot_2018_1991to2000. This change highlights that ice-sheet-wide differences between velocity products can be nontrivial (c.f. citet:millan_2019_mapping). The time series has also been extended through both the updated NSIDC 0646 data and src_bash[:eval yes]{ls ${DATADIR}/Sentinel1/Sentinel1_IV_maps|grep -E "IV_201[8|9]"|wc -l} {{{results(=61=)}}} Sentinel 1 velocity maps from 2018 through the present (src_bash[:eval yes]{date --iso} {{{results(=2020-09-21=)}}}). We have also added src_bash[:eval yes]{ls ${DATADIR}/MEaSUREs/NSIDC-0731.001/|grep greenland_vel_mosaic|wc -l} {{{results(=48=)}}} additional MEaSUREs (citet:NSIDC_0731,joughin_2010_greenland,joughin_2018_greenland; hereafter NSIDC 0731) monthly average velocity maps from 2014-12-01 through 2018-11-30.

# We have updated the time series graphics (Figures [[fig:discharge_ts]], [[fig:discharge_ts_regions]], and [[fig:discharge_ts_topfew]]) in the following manner: Any observation (gate, region, or ice sheet wide) where coverage is < 50 % is discarded from the graphic (low-coverage data are still included in the downloadable data), and annual average is only computed if there are three or more samples in a year. 

# Finally, the Supplemental includes significantly more meta-data about the input data used in this work to aid in both reproducibility by third parties, and in tracking the impact of additional and updated input data on future versions of this work.

# Results show a continued steady total discharge. The contributions from the central west (CW) region continue to decrease, while the central east (CE) region continues to increase, and CE and CW are now approximately tied for the third-largest discharging region. The top three individual contributing glaciers remain dynamic - Sermeq Kujalleq (English: Jakobshavn Glacier; Danish: Jakobshavn Isbræ) continued its rapid discharge decline in 2017 and 2018, returning to approximately its discharge from year 2000, but increased discharge slightly in 2019. For some time in 2018 and all data points so far in 2020 (i.e., though March) Helheim was the top Greenlandic glacier contributing to sea-level rise, although not with statistical significance (error bars still overlap).

* Introduction

The mass of the Greenland Ice Sheet is decreasing (e.g. citet:fettweis_2017_reconstructions,van-den-broeke_2017_greenland,wiese_2016_jpl,khan_2016_geodetic). Most ice sheet mass loss -- as iceberg discharge, submarine melting, and meltwater runoff -- enters the fjords and coastal seas, and therefore ice sheet mass loss directly contributes to sea-level rise citep:wcrp_2018,moon_2018_rising,nerem_2018_climate,chen_2017_increasing. Greenland's total ice loss can be estimated through a variety of independent methods, for example direct mass change estimates from GRACE citep:wiese_2016_jpl or by using satellite altimetry to estimate surface elevation change, which is then converted into mass change (using a firn model, e.g., citet:khan_2016_geodetic). However, partitioning the mass loss between ice discharge (D) and surface mass balance (SMB) remains challenging (cf. citet:rignot_2008_mass and citet:enderlin_2014_improved). Correctly assessing mass loss, as well as the attribution of this loss (SMB or D), is critical to understanding the process-level response of the Greenland Ice Sheet to climate change and thus improving models of future ice sheet changes and associated sea-level rise citep:moon_2018_rising.

The total mass of an ice sheet, or a drainage basin, changes if the mass gain (SMB inputs, primarily snowfall) is not balanced by the mass loss (D and SMB outputs, the latter generally meltwater runoff). This change is typically termed ice sheet mass balance (MB) and the formal expression for this rate of change in mass is (e.g., citet:cuffey_2010_the-physics),

#+NAME: eq:dMdt
\begin{equation}
\frac{\mathrm{d}M}{\mathrm{d}t} = \rho \int_A b \, \mathrm{d}A - \int_g Q \, \mathrm{d}g,
\end{equation}

where \(\rho\) is the average density of ice, \(b\) is an area mass balance, and \(Q\) is the discharge flux. The left-hand side of the equation is the rate of change of mass, the first term on the right-hand side is the area \(A\) integrated surface mass balance (SMB), and the second term is the discharge \(D\) mass flow rate that drains through gate \(g\). Equation [[eq:dMdt]] is often simplified to

#+NAME: eq:MB
\begin{equation}
MB = SMB - D
\end{equation}

where \(MB\) is the mass balance, and referred to as the "input--output" method (e.g., citet:khan_2015_greenland). Virtually all studies agree on the trend of Greenland mass balance, but large discrepancies persist in both the magnitude and attribution. Magnitude discrepancies include, for example, citet:kjeldsen_2015_spatial reporting a mass imbalance of -250 \(\pm\) 21 Gt yr^{-1} during 2003 to 2010, citet:ewert_2012_volume reporting -181 \(\pm\) 28 Gt yr^{-1} during 2003 to 2008, and citet:rignot_2008_mass reporting a mass imbalance of -265 \(\pm\) 19 Gt yr^{-1} during 2004 to 2008. Some of these differences may be due to different ice sheet area masks used in the studies. Attribution discrepancies include, for example, citet:enderlin_2014_improved attributing the majority (64 %) of mass loss to changes in SMB during the 2005 to 2009 period but citet:rignot_2008_mass attributing the majority (85 %) of mass loss to changes in D during the 2004 to 2008 period.

# Rignot 2008: TMB (2004-2007) = (231+293+265+267)/4 = 264 Gt yr-1  # Table 1
# Enderlin 2014: TMB (2005-2009) = 265 \pm 18 Gt yr-1 # text in Section 3
# Kjeldsen 2015: TMB (2003-2010) = 186 \pm 18.9 Gt yr-1 # Table 1

#+BEGIN_SRC jupyter-python :session tmp :exports none :results raw drawer
from uncertainties import unumpy
import numpy as np
np.mean(unumpy.uarray([231,293,265,267], [40,39,39,38]))
#+END_SRC

# error %
# Rignot: 19.5/264*100 = 7.38636363636
# Enderlin: 18/265*100 = 6.79245283019
# Kjeldsen: 19/186*100 = 10.2150537634

# When ice-sheet wide MB does agree between two independent studies, there may be spatially and/or temporally compensating errors underlying this outward agreement. Spatial discrepancies include, for example, citet:enderlin_2014_improved and citet:king_2018_seasonal. Temporal discrepancies include, for example, ???. A substantial portion of underlying spatial and temporal discrepancies may be associated with sampling bias. Underlying sampling discrepancy includes, for example, demonstrating agreement between satellite gravimetry derived mass loss estimates that sample Greenland peripheral glaciers and an input-output assessment that does not sample these disproportionately high mass loss glaciers citep:xu_2016_improved,noel_2017_greenland.


Discharge may be calculated through several methods, including mass flow rate through gates (e.g. citet:enderlin_2014_improved,king_2018_seasonal,mouginot_2019_forty), or solving as a residual from independent mass balance terms (e.g. citet:kjaer_2012_aerial,kjeldsen_2015_spatial). The gate method that we use in this study incorporates ice thickness and an estimated vertical profile from the observed surface velocity to calculate the discharge. A typical formulation of discharge across a gate \(D_g\) is,

#+NAME: eq:Q
\begin{equation}
D_g = \rho \, V \, H \, w,
\end{equation}

where \(\rho\) is the average density of ice, \(V\) is depth-average gate-perpendicular velocity, \(H\) is the ice thickness, and \(w\) is the gate width. Uncertainties in \(V\) and \(H\) naturally influence the estimated discharge. At fast-flowing outlet glaciers, \(V\) is typically assumed to be equal at all ice depths, and observed surface velocities can be directly translated into depth-averaged velocities (as in citet:enderlin_2014_improved,king_2018_seasonal). To minimize uncertainty from SMB or basal mass balance corrections downstream of a flux gate, the gate should be at the grounding line of the outlet glacier. Unfortunately, uncertainty in bed elevation (translating to ice thickness uncertainty) increases toward the grounding line.

Conventional methods of gate selection involve handpicking gate locations, generally as linear features (e.g., citet:enderlin_2014_improved) or visually approximating ice-orthogonal gates at one point in time (e.g., citet:king_2018_seasonal). Manual gate definition is suboptimal. For example, the largest discharging glaciers draw from an upstream radially diffusing region that may not easily be represented by a single linear gate. Approximately flow-orthogonal curved gates may not be flow orthogonal on the multidecade timescale due to changing flow directions. Manual gate selection makes it difficult to update gate locations, corresponding with glacier termini retreat or advance, in a systematic and reproducible fashion. We therefore adopt an algorithmic approach to generate gates based on a range of criteria.

Here, we present a discharge dataset based on gates selected in a reproducible fashion by a new algorithm. Relative to previous studies, we employ ice velocity observation over a longer period with higher temporal frequency and denser spatial coverage. We use ice velocity from 1986 through 2019 including twelve-day velocities for the last ~500 days of the time series, and discharge at 200 m pixel resolution capturing all ice flowing faster than 100 m yr^{-1} that crosses glacier termini into fjords.

* Input data

Historically, discharge gates were selected along well-constrained flight lines of airborne radar data citep:enderlin_2014_improved. Recent advances in ice thickness estimates through NASA Operation IceBridge citep:millan_2018_vulnerability, NASA Oceans Melting Greenland (OMG; citet:fenty_2016_oceans), fjord bathymetry citep:tinto_2015_bathymetry, and methods to estimate thickness from surface properties (e.g., citet:mcnabb_2012_using,james_2016_automated) have been combined into digital bed elevation models such as BedMachine v3 citep:morlighem_2017_bedmachine,NSIDC_BedMachine or released as independent datasets citep:millan_2018_vulnerability. From these advances, digital bed elevation models have become more robust at tidewater glacier termini and grounding lines. The incorporation of flight-line ice thickness data into higher-level products that include additional methods and data means gates are no longer limited to flight lines (e.g., citet:king_2018_seasonal).

Ice velocity data are available with increasing spatial and temporal resolution (e.g., citet:vijay_2019_resolving). Until recently, ice velocity mosaics were limited to once per year during winter citep:joughin_2010_greenland, and they are still temporally limited, often to annual resolution, prior to 2000 (e.g. citet:mouginot_2018_1972to1990,mouginot_2018_1991to2000). Focusing on recent times, ice-sheet-wide velocity mosaics from the Sentinel-1A & 1B are now available every twelve days (http://PROMICE.org). The increased availability of satellite data has improved ice velocity maps both spatially and temporally, thereby decreasing the need to rely on spatial and temporal interpolation of velocities from annual/winter mosaics citep:andersen_2015_basin-scale,king_2018_seasonal,mouginot_2019_forty.

The discharge gates in this study are generated using only surface speed and an ice mask. We use the MEaSUREs Greenland Ice Sheet Velocity Map from InSAR Data, Version 2 citep:joughin_2010_greenland,NSIDC_0478, hereafter termed "MEaSUREs 0478" due to the National Snow and Ice Data Center (NSIDC) dateset ID number. We use the BedMachine v3 citep:morlighem_2017_bedmachine,NSIDC_BedMachine ice mask.

For ice thickness estimates, we use surface elevation from GIMP (citet:howat_2014_greenland,NSIDC_0715; NSIDC dataset ID 0715), adjusted through time with surface elevation change from citet:khan_2016_geodetic and bed elevations from BedMachine v3 replaced by citet:millan_2018_vulnerability where available. Ice sector and region delineation is from citet:mouginot_2019_glacier. Ice velocity data are obtained from a variety of products including Sentinel-1A & 1B derived by PROMICE (see Appendix), MEaSUREs 0478, MEaSUREs 0646 citep:NSIDC_0646, citet:mouginot_2018_1972to1990, and citet:mouginot_2018_1991to2000. Official glacier names come from citet:bjork_2015_brief. Other glacier names come from citet:mouginot_2019_glacier. See Table [[tab:data]] for an overview of datasets used in this work.

#+BEGIN_SRC bash :results verbatim :eval no-export
echo "times  all: " $(head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep "vel_eff" | wc -l)
echo "times 19XX: " $(head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep "vel_eff_19" | wc -l)
echo "times 20XX: " $(head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep "vel_eff_20" |wc -l)
for Y in $(seq 2000 2022); do 
  echo "times ${Y}: " $(head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep "vel_eff_${Y}" |wc -l)
done
#+END_SRC

#+RESULTS:
#+begin_example
times  all:  506
times 19XX:  108
times 20XX:  398
times 2000:  12
times 2001:  9
times 2002:  10
times 2003:  9
times 2004:  8
times 2005:  9
times 2006:  10
times 2007:  9
times 2008:  10
times 2009:  11
times 2010:  8
times 2011:  8
times 2012:  10
times 2013:  11
times 2014:  14
times 2015:  25
times 2016:  38
times 2017:  81
times 2018:  54
times 2019:  30
times 2020:  22
times 2021:  0
times 2022:  0
#+end_example

This work uses src_bash[:eval yes]{head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep "vel_eff" | wc -l} {{{results(=506=)}}} different velocity maps, biased toward post-2015 when twelve-day ice velocities become available from the Sentinel-1 satellites. The temporal distribution is ~10 maps per year from 1986 to 2013, 14 in 2014, 25 in 2015, 38 in 2016, 81 in 2017, 54 in 2018, and one every ~12 days in 2019 and 2020.

#+LATEX_ATTR: :placement [!h]
#+CAPTION: Summary of data sources used in this work.
#+NAME: tab:data
| Property                       | Name used in this paper  | Reference                                                      |
|--------------------------------+--------------------------+----------------------------------------------------------------|
| Basal topography               | BedMachine               | citet:morlighem_2017_bedmachine,NSIDC_BedMachine               |
| Basal topography for southeast |                          | citet:millan_2018_vulnerability                                |
| Surface elevation              | GIMP 0715                | citet:howat_2014_greenland,NSIDC_0715                          |
| Surface elevation Change       | Surface elevation change | citet:khan_2016_geodetic,GEUS_discharge_paper_elevation_change |
| Baseline velocity              | MEaSUREs 0478            | citet:NSIDC_0478                                               |
| Velocity                       | Sentinel                 | Appendix                                                       |
| Velocity                       | MEaSUREs 0646            | citet:NSIDC_0646                                               |
| Velocity                       | MEaSUREs 0731            | citet:NSIDC_0731,joughin_2010_greenland,joughin_2018_greenland |
| Velocity                       | pre-2000                 | citet:mouginot_2018_1972to1990,mouginot_2018_1991to2000        |
| Sectors and regions            | Sectors and regions      | citet:mouginot_2019_glacier                                    |
| Names                          |                          | citet:bjork_2015_brief,mouginot_2019_glacier                   |

* Methods
** Terminology 

We use the following terminology, displayed in Fig. [[fig:overview]]: 
+ "Pixels" are individual 200 m x 200 m raster discharge grid cells. We use the nearest neighbor when combining datasets that have different grid properties.
+ "Gates" are contiguous (including diagonal) clusters of pixels.
+ "Sectors" are spatial areas that have 0, 1, or > 1 gate(s) plus any upstream source of ice that flows through the gate(s), and come from citet:mouginot_2019_glacier.
+ "Regions" are groups of sectors, also from citet:mouginot_2019_glacier, and are labeled by approximate geographic region.
+ The "baseline" period is the average 2015, 2016, and 2017 winter velocity from MEaSUREs 0478.
+ "Coverage" is the percentage of total, region, sector, or gate discharge observed at any given time. By definition coverage is 100 % during the baseline period. From the baseline data, the contribution to total discharge of each pixel is calculated, and coverage is reported for all other maps that have missing observations (Fig. [[fig:coverage_schematic]]). Total estimated discharge is always reported because missing pixels are gap filled (see "Missing or invalid data" section below).
+ "Fast-flowing ice" is defined as ice that flows more than 100 m yr^{-1}.
+ Names are reported using the official Greenlandic names from citet:bjork_2015_brief; if an alternate name exists (e.g. from citet:mouginot_2019_glacier, or an English version), then this is shown in parentheses.

Although we refer to solid ice discharge, and it is in the solid phase when it passes the gates and eventually reaches the termini, submarine melting occurs at the termini and some of the discharge enters the fjord as liquid water citep:enderlin_2013_submarine.

** Gate location

Gates are algorithmically generated for fast-flowing ice (greater than 100 m yr^{-1}) close to the ice sheet terminus determined by the baseline-period data. We apply a 2D inclusive mask to the baseline data for all ice flowing faster than 100 m yr^{-1}. We then select the mask edge where it is near the BedMachine ice mask (not including ice shelves), which effectively provides grounding line termini. We buffer the termini 5000 m in all directions creating ovals around the termini and once again down-select to fast-flowing ice pixels. This procedure results in gates 5000 m upstream from the baseline terminus that bisect the baseline fast-flowing ice. We manually mask some land- or lake-terminating glaciers which are initially selected by the algorithm due to fast flow and mask issues. 

We select a 100 m yr^{-1} speed cutoff because slower ice, taking longer to reach the terminus, is more influenced by SMB. For the influence of this threshold on our results see the Discussion section and Fig. [[fig:heatmap]]. 

We select gates at 5000 m upstream from the baseline termini, which means that gates are likely > 5000 m from the termini further back in the historical record citep:murray_2015_extensive,wood_2018_ocean-induced. The choice of a 5000 m buffer follows from the fact that it is near terminus and thus avoids the need for (minor) SMB corrections downstream, yet is not too close to the terminus where discharge results are sensitive to the choice of distance-to-terminus value (Fig. [[fig:heatmap]]), which may be indicative of bed (ice thickness) errors.

** Thickness

We derive thickness from surface and bed elevation. We use GIMP 0715 surface elevations in all locations, and the BedMachine bed elevations in most locations, except southeast Greenland where we use the citet:millan_2018_vulnerability bed. The GIMP 0715 surface elevations are all time stamped per pixel. We adjust the surface through time by linearly interpolating elevation changes from citet:khan_2016_geodetic, which covers the period from 1995 to 2016. We use the average of the first and last 3 years for earlier and later times, respectively. Finally, from the fixed bed and temporally varying surface, we calculate the time-dependent ice thickness at each gate pixel.

** Missing or invalid data

The baseline data provide velocity at all gate locations by definition, but individual nonbaseline velocity maps often have missing or invalid data. Also, thickness provided by BedMachine is clearly incorrect in some places (e.g. fast-flowing ice that is 10 m thick, Fig. [[fig:h_v_histogram]]). We define invalid data and fill in missing data as described below.

*** Invalid velocity

We flag invalid (outlier) velocities by treating each pixel as an individual time series, applying a 30-point rolling window, flagging values more than 2 standard deviations outside the mean, and repeating this filter three times. We also drop the 1972 to 1985 years from citet:mouginot_2018_1972to1990 because there is low coverage and extremely high variability when using our algorithm.

This outlier detection method appears to correctly flag outliers (see citet:mankoff_2019_ice, for unfiltered time series graphs) but likely also flags some true short-term velocity increases. The effect of this filter is a ~1% reduction in discharge most years but more in years with high discharge -- a reduction of 3.2 % in 2013, 4.3 % in 2003, and more in the 1980s when the data are noisy. Any analysis using these data and focusing on individual glaciers or short-term changes (or lack thereof) should reevaluate the upstream data sources.

*** Missing velocity
:PROPERTIES:
:CUSTOM_ID: sec:missing_velocity
:END:

We generate an ice speed time series by assigning the PROMICE, MEaSUREs 0478, MEaSUREs 0646, and pre-2000 products to their respective reported time stamps (even though these are time-span products) or to the middle of their time span when they cover a long period such as the annual maps from citet:mouginot_2018_1972to1990,mouginot_2018_1991to2000. We ignore that any individual velocity map or pixel has a time span and not a time stamp. Velocities are sampled only where there are gate pixels. Missing pixel velocities are linearly interpolated in time, except for missing data at the beginning of the time series which are back- and forward filled with the temporally nearest value for that pixel (Fig. [[fig:coverage_schematic]]). We do not spatially interpolate missing velocities because the spatial changes around a missing data point are most likely larger than the temporal changes. We visually represent the discharge contribution of directly observed pixels, termed coverage (Fig. [[fig:coverage_schematic]]) as time series graphs and opacity of dots and error bars in the figures. The figures only display data where coverage is \(\ge\) 50 %, but the provided data files include coverage from 0 to 100 %. Therefore, the gap-filled discharge contribution at any given time is equal to 100 minus the coverage. Discharge is always reported as estimated total discharge even when coverage is less than 100 %.

*** Invalid thickness
:PROPERTIES:
:CUSTOM_ID: sec:invalid_thickness
:END:

The thickness data appear to be incorrect in some locations. For example, many locations have fast-flowing ice but report ice thickness as 10 m or less (Fig. [[fig:h_v_histogram]], left panel). We accept all ice thickness greater than 20 m and construct from this a thickness vs. log_{10}-speed relationship. For all ice thickness less than or equal to 20 m thick we adjust thickness based on this relationship (Fig. [[fig:h_v_histogram]], right panel). We selected the 20 m thickness cutoff after visually inspecting the velocity distribution (Fig. [[fig:h_v_histogram]], left panel). This thickness adjustment adds 20 Gt yr^{-1} to our baseline-period discharge estimate with no adjustment. In the Appendix and Table [[tab:thick_treatments]] we discuss the discharge contribution of these adjusted pixels, and a comparison among this and other thickness adjustments.


** Discharge

We calculate discharge per pixel using density (917 kg m^{-3}), filtered and filled ice speed, projection-corrected pixel width, and adjusted ice thickness derived from time-varying surface elevation and a fixed bed elevation (Eq. [[eq:Q]]). We assume that any change in surface elevation corresponds to a change in ice thickness and thereby neglect basal uplift, erosion, and melt, which combined are orders of magnitude less than surface melting (e.g., citet:cowton_2012_rapid,khan_2007_elastic). We also assume depth-averaged ice velocity is equal to the surface velocity.

We calculate discharge using the gate orthogonal velocity at each pixel and at each timestamp -- all velocity estimates are gate-orthogonal at all times, regardless of gate position, orientation, or changing glacier velocity direction over time.

Annual averages are calculated by linearly interpolating to daily and then estimating annual. The difference between this method and averaging only the observed samples is ~3 % median (5 % average, and a maximum of 10 % when examining the entire ice sheet and all years in our data). It is occasionally larger at individual glaciers when a year has few widely spaced samples of highly variable velocity.

*** Discharge uncertainty
\label{sec:D_uncertainty}

A longer discussion related to our and others treatments of errors and uncertainty is in the Appendix, but here we describe how we estimate the uncertainty related to the ice discharge following a simplistic approach. This yields an uncertainty of the total ice discharge of approximately 10 % throughout the time series. 

At each pixel we estimate the maximum discharge, \(D_{\mathrm{max}}\), from 

#+NAME: eq:D_err_max
\begin{equation}
D_{\mathrm{max}} = \rho \, (V + \sigma_V) \, (H + \sigma_H) \, W,
\end{equation}

and minimum discharge, \(D_{\mathrm{min}}\), from

#+NAME: eq:D_err_min
\begin{equation}
D_{\mathrm{min}} = \rho \, (V - \sigma_V) \, (H - \sigma_H) \, W,
\end{equation}

where \(\rho\) is ice density, \(V\) is baseline velocity, \(\sigma_V\) is baseline velocity error, \(H\) is ice thickness, \(\sigma_H\) is ice thickness error, and \(W\) is the width at each pixel. Included in the thickness term is surface elevation change through time (\(\mathrm{d}H/\mathrm{d}t\)). When datasets do not come with error estimates we treat the error as 0.

We use \(\rho = 917\) kg m^{-3} because the gates are near the terminus in the ablation zone, and ice thickness estimates should not include snow or firn, although regionally ice density may be < 917 kg m^{-3} due to crevasses. We ignore the velocity error \(\sigma_V\) because the proportional thickness error (\(\sigma_H/H\)) is an order of magnitude larger than the proportional velocity error (\(\sigma_V/V\)) yet both contribute linearly to the discharge. \(W\) is location dependent due to the errors between our working map projection (EPSG 3413) and a more accurate spheroid model of the earth surface. We adjust linear gate width by up to ~4% in the north and ~-2.5% in the south of Greenland (area errors are up to 8%). On a pixel-by-pixel basis we used the provided thickness uncertainty except where we modified the thickness (H < 20 m); we prescribe an uncertainty of 0.5 times the adjusted thickness. Subsequently, the uncertainty on individual glacier, sector, region, or ice sheet scale is obtained by summing, but not reducing by the square of the sums, the uncertainty related to each pixel. We are conservative with our thickness error estimates, by assuming the uncertainty range is from \(D_{\mathrm{min}}\) to \(D_{\mathrm{max}}\) and not reducing by the sum of squares of sectors or regions. 

* Results
** Gates

#+BEGIN_SRC bash :results verbatim :exports none :eval no-export
echo "pixels: " $(tail -n +2 tmp/dat_100_5000.csv | wc -l)

# head -n1 tmp/dat_100_5000.csv | tr ',' '\n' | cat -n | grep clump
echo "gates: " $(cut -d"," -f8 tmp/dat_100_5000.csv  | tail -n +2 | sort | uniq | wc -l)

# head -n1 dat/dat_100_5000.csv | tr ',' '\n' | cat -n | grep sectors
echo "sectors: " $(cut -d"," -f9 tmp/dat_100_5000.csv | tail -n +2 | sort -n | uniq | wc -l)

# times
echo "times: " $(head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep "vel_eff" | wc -l)
#+END_SRC

#+RESULTS:
: pixels:  5829
: gates:  267
: sectors:  173
: times:  506

Our gate placement algorithm generates src_bash[:eval yes]{tail -n +2 tmp/dat_100_5000.csv | wc -l} {{{results(=5829=)}}} pixels making up src_bash[:eval yes]{cut -d"," -f8 tmp/dat_100_5000.csv  | tail -n +2 | sort | uniq | wc -l} {{{results(=267=)}}} gates, assigned to src_bash[:eval yes]{cut -d"," -f9 tmp/dat_100_5000.csv  | tail -n +2 | sort | uniq | wc -l} {{{results(=173=)}}} ice sheet sectors from citet:mouginot_2019_glacier. Previous similar studies have used 260 gates citep:mouginot_2019_forty, 230 gates citep:king_2018_seasonal, and 178 gates citep:enderlin_2014_improved.

The widest gate (~47 km) is Sermersuaq (Humboldt Gletsjer) and the second widest (~34 km) is Sermeq Kujalleq (Jakobshavn Isbræ). A total of 23 additional glaciers have gate lengths longer than 10 km. The minimum gate width is 3 pixels (600 m) by definition in the algorithm. 

# See LINK: [[id:62f5d28c-c704-422d-9e9b-c0771d5b86ee][Table of thickness adjustments]]

The average unadjusted thickness gates is 401 m with a standard deviation of 258. The average thickness after adjustment is 436 m with a standard deviation of 223. A histogram of unadjusted and adjusted thickness at all gate locations is shown in Fig. [[fig:h_v_histogram]].

** Discharge
:PROPERTIES:
:CUSTOM_ID: sec:results_flow_rate
:END:

#+BEGIN_SRC jupyter-python :session D_val_text :exports none :results raw drawer :eval no-export
import pandas as pd

t = pd.read_csv('./out/GIS_D.csv.zip', index_col=0, parse_dates=True)\
      .resample('AS')\
      .mean()
t_err = pd.read_csv('./out/GIS_err.csv.zip', index_col=0, parse_dates=True)\
          .resample('AS')\
          .mean()
t = t.merge(t_err, left_index=True, right_index=True)\
     .rename({'Discharge [Gt yr-1]' : 'D',
              'Discharge Error [Gt yr-1]' : 'err'}, axis='columns')

print("Initial:\n", t.loc['1986-01-01'])
print("\nMinimum\n", t.loc[t['D'].idxmin().strftime('%Y-%m-%d')])
print("\nY2K\n", t.loc['2000-01-01'])
print("\n2005\n", t.loc['2005-01-01'])

t[t.index.year > 2005]
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
Initial:
 D      458.948286
err     48.726571
Name: 1986-01-01 00:00:00, dtype: float64

Minimum
 D      427.6235
err     44.0825
Name: 1991-01-01 00:00:00, dtype: float64

Y2K
 D      441.123000
err     43.967833
Name: 2000-01-01 00:00:00, dtype: float64

2005
 D      499.932333
err     49.766556
Name: 2005-01-01 00:00:00, dtype: float64
#+end_example
| Date                |       D |     err |
|---------------------+---------+---------|
| 2006-01-01 00:00:00 | 489.906 | 49.0121 |
| 2007-01-01 00:00:00 | 482.521 | 48.6182 |
| 2008-01-01 00:00:00 | 486.137 | 49.539  |
| 2009-01-01 00:00:00 | 490.601 | 49.9453 |
| 2010-01-01 00:00:00 | 494     | 50.5601 |
| 2011-01-01 00:00:00 | 497.048 | 51.0121 |
| 2012-01-01 00:00:00 | 492.406 | 51.1666 |
| 2013-01-01 00:00:00 | 496.224 | 51.1679 |
| 2014-01-01 00:00:00 | 498.335 | 51.255  |
| 2015-01-01 00:00:00 | 501.078 | 51.3587 |
| 2016-01-01 00:00:00 | 496.684 | 50.9664 |
| 2017-01-01 00:00:00 | 505.402 | 51.4265 |
| 2018-01-01 00:00:00 | 498.077 | 50.6963 |
| 2019-01-01 00:00:00 | 498.837 | 51.0659 |
| 2020-01-01 00:00:00 | 505.843 | 51.9464 |
:END:

Our ice discharge dataset (Fig. [[fig:discharge_ts]]) reports a total discharge of 460 \(\pm\) 49 Gt in 1986, has a minimum of 428 \(\pm\) 44 Gt in 1996, and increases to 443 \(\pm\) 44 in 2000 and further to 500 \(\pm\) 50 Gt/yr in 2005, after which annual discharge remains approximately steady at 483 to 505 \(\pm\) ~50 Gt/yr during the 2005 through 2019 period.

#+BEGIN_SRC jupyter-python :session D_val_text :exports none :results raw drawer :eval no-export
import pandas as pd

r = pd.read_csv('./out/region_D.csv.zip', index_col=0, parse_dates=True)\
      .resample('AS')\
      .mean()
r_err = pd.read_csv('./out/region_err.csv.zip', index_col=0, parse_dates=True)\
          .resample('AS')\
          .mean()
# t = t.merge(t_err, left_index=True, right_index=True)\
#      .rename({'Discharge [Gt yr-1]' : 'D',
#               'Discharge Error [Gt yr-1]' : 'err'}, axis='columns')

print("SE range: ", r['SE'].min(), r['SE'].max(), r_err['SE'].min(), r_err['SE'].max())
print("SE %: ", r['SE'].mean() / r.sum(axis='columns').mean()*100)
print("NE,NO,NW %:",r[['NE','NO','NW']].sum(axis='columns').mean()/r.sum(axis='columns').mean()*100)
print("\nNW increase\n:", r.loc['1999-01-01':,'NW'])
print("\nSE max and last:", r['SE'].max(), '\n', r['SE'].iloc[-10:].describe())
#+END_SRC

#+RESULTS:
#+begin_example
SE range:  136.52783333333335 164.19012499999997 16.054222222222222 20.335999999999995
SE %:  31.610273644580595
NE,NO,NW %: 31.410095585487515

NW increase
: Date
1999-01-01     89.965714
2000-01-01     90.736833
2001-01-01     91.030889
2002-01-01     91.920900
2003-01-01     93.572222
2004-01-01     97.269625
2005-01-01     96.618333
2006-01-01     97.011900
2007-01-01     96.740889
2008-01-01     98.675500
2009-01-01     99.957000
2010-01-01    102.631750
2011-01-01    105.614375
2012-01-01    104.390000
2013-01-01    106.651182
2014-01-01    109.265929
2015-01-01    109.459471
2016-01-01    112.961643
2017-01-01    115.462923
2018-01-01    114.843659
2019-01-01    109.604233
2020-01-01    108.961818
Freq: AS-JAN, Name: NW, dtype: float64

SE max and last: 164.19012499999997 
 count     10.000000
mean     150.901400
std        3.510614
min      145.662821
25%      148.240100
50%      150.285873
75%      153.067581
max      156.205864
Name: SE, dtype: float64
#+end_example

At the region scale, the SE glaciers (see Fig. [[fig:overview]] for regions) are responsible for 136 to 164 (\(\pm\) 12 %) Gt yr^{-1} of discharge (approximately one-third of ice-sheet-wide discharge) over the 1986 through 2019 period. By comparison, the predominantly land-terminating NO, NE, and SW together were also responsible for about one-third of total ice sheet discharge during this time (Fig. [[fig:discharge_ts_regions]]). The discharge from most regions has been approximately steady or declining for the past decade. The NW is the only region exhibiting a persistent long-term increase in discharge -- from ~90 to 115 Gt yr^{-1} (22 % increase) over the 1999 through 2017 period (+ ~1.4 Gt yr^{-1} or + ~1.2 % yr^{-1}). This 1999 through 2017 annual average increase in NW discharge offsets declining discharge from other regions, but the NW increase stopped in 2018 and discharge in the NW dropped by 5 Gt yr^{-1} (4 %) in 2019. This NW decline is then offset by a SE region increase. The largest contributing region, SE, contributed a high of 164 \(\pm\) 19 Gt in 2004 but dropped to ~150 \pm 18 Gt yr^{-1} for the past decade.

# 100 - 90/115*100 = 21.7391304348
# (115-90+1)/(2017-1999+1) = 1.36842105263
# (22/(2017-1999+1)) = 1.15789473684

#+BEGIN_SRC jupyter-python :session D_val_text :exports none :results raw drawer :eval no-export
import pandas as pd

s = pd.read_csv('./out/sector_D.csv.zip', index_col=0, parse_dates=True)\
      .resample('AS')\
      .mean()
s_err = pd.read_csv('./out/sector_err.csv.zip', index_col=0, parse_dates=True)\
          .resample('AS')\
          .mean()

print(s['JAKOBSHAVN_ISBRAE'].idxmax())
print(s.loc['2013-01-01', 'JAKOBSHAVN_ISBRAE'], s_err.loc['2013-01-01', 'JAKOBSHAVN_ISBRAE'])
print(s.loc['2013-01-01':, 'JAKOBSHAVN_ISBRAE'].idxmin())
print(s.loc['2018-01-01', 'JAKOBSHAVN_ISBRAE'], s_err.loc['2013-01-01', 'JAKOBSHAVN_ISBRAE'])
print(s.loc['2013-01-01':, 'JAKOBSHAVN_ISBRAE'])
#+END_SRC

#+RESULTS:
#+begin_example
2013-01-01 00:00:00
50.839000000000006 4.937
2018-01-01 00:00:00
34.056363636363635 4.937
Date
2013-01-01    50.839000
2014-01-01    49.724429
2015-01-01    48.403412
2016-01-01    47.457857
2017-01-01    39.541369
2018-01-01    34.056364
2019-01-01    36.002000
2020-01-01    37.560636
Freq: AS-JAN, Name: JAKOBSHAVN_ISBRAE, dtype: float64
#+end_example


Focusing on eight major contributors at the individual sector or glacier scale (Fig. [[fig:discharge_ts_topfew]]), Sermeq Kujalleq (Jakobshavn Isbræ) has slowed down from an annual average high of ~51 Gt yr^{-1} in 2013 to ~34 Gt yr^{-1} in 2018, likely due to ocean cooling citep:khazendar_2019_interruption. We exclude Ikertivaq from the top eight because that gate spans multiple sectors and outlets, while the other top dischargers are each a single outlet. The 2013 to 2016 slowdown of Sermeq Kujalleq (Fig. [[fig:discharge_ts_topfew]]) is compensated for by the many glaciers that make up the NW region (Fig. [[fig:discharge_ts_regions]]). The large 2017 and 2018 reduction in discharge at Sermeq Kujalleq is partially offset by a large increase in the second-largest contributor, Helheim Gletsjer (Helheim Glacier; Fig. [[fig:discharge_ts_topfew]]), and a small increase in the third-largest contributor, Kangerlussuaq citep:bevan_2019_impact. Helheim discharged more ice than Sermeq Kujalleq in early 2018 and for all data estimates to date (through March) in 2020, although error bars still overlap.

* Discussion

Different ice discharge estimates among studies likely stem from three categories: 1) changes in true discharge, 2) different input data (ice thickness and velocity), and 3) different assumptions and methods used to analyze data. Improved estimates of true discharge are the goal of this and many other studies, but changes in true discharge (category 1) can happen only when a work extends a time series into the future because historical discharge is fixed. Thus, any interstudy discrepancies in historical discharge must be due to category 2 (different data) or category 3 (different methods). Most studies use both updated data and new or different methods, but do not always provide sufficient information to disentangle the two. This is inefficient. To more quantitatively discuss interstudy discrepancies, it is imperative to explicitly consider all three potential causes of discrepancy. Only when results are fully reproducible -- meaning all necessary data and code are available (cf. citet:mankoff_2017_past,rezvanbehbahani_2017_predicting,mankoff_2019_ice) -- can new works confidently attribute discrepancies relative to old works. Therefore, in addition to providing new discharge estimates, we attempt to examine discrepancies among our estimates and other recent estimates. Without access to code and data from previous studies, it is challenging to take this examination beyond a qualitative discussion.

The algorithm-generated gates we present offer some advantages over traditional handpicked gates. Our gates are shared publicly, are generated by code that can be audited by others, and are easily adjustable within the algorithmic parameter space. This both allows sensitivity testing of gate location (Fig. [[fig:heatmap]]) and allows gate positions to systematically evolve with glacier termini (not done here).

** Comparison with past studies                           :ignore:

The total ice discharge we estimate is ~10 % less than the total discharge of two previous estimates citep:mouginot_2019_forty,enderlin_2014_improved, and similar to that of citet:king_2018_seasonal, who attributes their discrepancy with citet:enderlin_2014_improved to the latter using only summer velocities, which have higher annual average values than seasonally comprehensive velocity products. The gate locations also differ among studies, and glaciers with baseline velocity less than 100 m yr^{-1} are not included in our study due to our velocity cutoff threshold, but this should not lead to substantially different discharge estimates (Fig. [[fig:heatmap]]).

Our gate selection algorithm also does not place gates in northeast Greenland at Storstrømmen, Bredebræ (Bredebrae), or their confluence, because during the baseline period that surge glacier was in a slow phase. We do not manually add gates at these glaciers. The last surge ended in 1984 citep:reeh_1994_surge,mouginot_2018_insights, prior to the beginning of our time series, and these glaciers are therefore not likely to contribute substantial discharge even in the early period of discharge estimates.

We instead attribute the majority of our discrepancy with citet:enderlin_2014_improved to the use of differing bed topography in southeast Greenland. When we compare our top 10 highest discharging glaciers in 2000 with those reported by citet:enderlin_2014_improved, we find that the Køge Bugt (also knows as Køge Bay) discharge reported by citet:enderlin_2014_improved is ~31 Gt, but our estimate is only ~16 Gt (~17 Gt in citet:king_2018_seasonal, and similar in citet:mouginot_2019_forty). The citet:bamber_2013_bed bed elevation dataset that likely uses the same bed data employed by citet:enderlin_2014_improved has a major depression in the central Køge Bugt bed. This region of enhanced ice thicknesses is not present in the BedMachine dataset that we, citet:king_2018_seasonal, and citet:mouginot_2019_forty employ (Fig. [[fig:koge_bugt_bamber]]). If the Køge Bugt gates of citet:enderlin_2014_improved are in this location, then those gates overlie citet:bamber_2013_bed ice thicknesses that are about twice those reported in BedMachine v3. With all other values held constant, this results in roughly twice the discharge. Although we do not know whether BedMachine or citet:bamber_2013_bed is more correct, conservation of mass suggests that a substantial subglacial depression should be evident as either depressed surface elevation or velocity citep:morlighem_2016_improving.

We are unable to attribute the remaining discrepancy between our discharge estimates and those by citet:enderlin_2014_improved. It is likely a combination of different seasonal velocity sampling citep:king_2018_seasonal, our evolving surface elevation from citet:khan_2016_geodetic, or other previously unpublished algorithmic or data differences, of which many possibilities exist.

Our ice discharge estimates agree well with the most recently published discharge estimate (citet:king_2018_seasonal, also used by citet:bamber_2018_landice), except that our discharge is slightly less. We note that our uncertainty estimates include the citet:king_2018_seasonal estimates, but the opposite does not appear be true. The minor differences are likely due to different methods. citet:king_2018_seasonal use seasonally varying ice thicknesses, derived from seasonally varying surface elevations, and a Monte Carlo method to temporally interpolate missing velocity data to produce discharge estimates. In comparison, we use linear interpolation of both yearly surface elevation estimates and temporal data gaps. It is not clear whether linear or higher-order statistical approaches are best suited for interpolation as annual cycles begin to shift, as is the case with Sermeq Kujalleq (Jakobshavn Isbræ) after 2015. There are benefits and deficiencies with both methods. Linear interpolation may alias large changes if there are no other observations nearby in time. Statistical models of past glacier behavior may not be appropriate when glacier behavior changes.

It is unlikely that discharge estimates using gates that are only approximately flow orthogonal and time invariant citep:king_2018_seasonal have large errors due to this, because it is unlikely that glacier flow direction changes significantly, but our gate-orthogonal treatment may be the cause of some differences among our approach and other works. Discharge calculated using nonorthogonal methodology would overestimate true discharge.

* Data availability

This work in its entirety is available at doi:10.22008/promice/data/ice_discharge citep:GEUS_discharge_paper. The glacier-scale, sector, region, and Greenland summed ice sheet discharge dataset is available at doi:10.22008/promice/data/ice_discharge/d/v02 citep:GEUS_discharge_paper_d, where it will be updated as more velocity data become available. The gates can be found at doi:10.22008/promice/data/ice_discharge/gates/v02 citep:GEUS_discharge_paper_gates, the code at doi:10.22008/promice/data/ice_discharge/code/v0.0.1 citep:GEUS_discharge_paper_code, and the surface elevation change at doi:10.22008/promice/data/DTU/surface_elevation_change/v1.0.0 citep:GEUS_discharge_paper_elevation_change.

* Conclusions

We have presented a novel dataset of flux gates and a 1986 through 2019 glacier-scale ice discharge estimate for the Greenland Ice Sheet. These data are underpinned by an algorithm that both selects gates for ice flux and then computes ice discharges. 

Our results are similar to the most recent discharge estimate citep:king_2018_seasonal but begin in 1986 - although there are fewer samples prior to 2000. From our discharge estimate we show that over the past ~30 years, ice sheet discharge was ~440 Gt yr^{-1} prior to 2000, rose to over 500 Gt yr^{-1} from 2000 to 2005, and has held roughly steady since 2005 at near 500 Gt yr^{-1}. However, when viewed at a region or sector scale, the system appears more dynamic with spatial and temporal increases and decreases canceling each other out to produce the more stable ice sheet discharge. We note that there does not appear to be any dynamic connection among the regions, and any increase in one region that was offset by a decrease in another has likely been due to chance. If in coming years when changes occur the signals have matching signs, then ice sheet discharge would decrease or increase, rather than remain fairly steady.

The application of our flux gate algorithm shows that ice-sheet-wide discharge varies by ~30 Gt yr^{-1} due only to gate position, or ~40 Gt yr^{-1} due to gate position and cutoff velocity (Fig. [[fig:heatmap]]). This variance is approximately equal to the uncertainty associated with ice sheet wide discharge estimates reported in many studies (e.g. citet:rignot_2008_mass,andersen_2015_basin-scale,kjeldsen_2015_spatial). We highlight a major discrepancy with the ice discharge data of citet:enderlin_2014_improved and we suspect this discharge discrepancy -- most pronounced in southeast Greenland -- is associated with the choice of digital bed elevation model, specifically a deep hole in the bed at Køge Bugt.

Transparency in data and methodology are critical to move beyond a focus of estimating discharge quantities, towards more operational mass loss products with realistic errors and uncertainty estimates. The convention of devoting a paragraph, or even page, to methods is insufficient given the complexity, pace, and importance of Greenland Ice Sheet research citep:catania_2020. Therefore the flux gates, discharge data, and the algorithm used to generate the gates, discharge, and all figures from this paper are available. We hope that the flux gates, data, and code we provide here is a step toward helping others both improve their work and discover the errors in ours.

* Other                                                   :ignore:

#+BEGIN_authorcontribution
\ KDM conceived of the algorithm approach, and wrote the code. KDM , WIC, and RSF iterated over the algorithm results and methods. ASO provided the velocity data. SAK supplied the surface elevation change data. All authors contributed to the scientific discussion, writing, and editing of the manuscript. 
#+END_authorcontribution


#+BEGIN_competinginterests
\ The authors declare that they have no conflict of interest.
#+END_competinginterests


#+BEGIN_acknowledgements
We thank contributors and co-authors of previous versions of this paper, and the reviewers and editors for their constructive input that helped improve the paper. Sentinel ice velocity maps were produced from Copernicus Sentinel-1 image data, processed by ESA data as part of PROMICE, and were provided by the Geological Survey of Denmark and Greenland (GEUS) at http://www.promice.org.
#+END_acknowledgements

#+BEGIN_financialsupport
This research has been supported by the Programme for Monitoring of the Greenland Ice Sheet (PROMICE) and the European Union's Horizon 2020 research and innovation program (INTAROS, grant no. 727890).
#+END_financialsupport


* References                                              :ignore:

#+LaTeX: \bibliographystyle{copernicus}
# #+LaTeX: \bibliography{/home/kdm/Documents/Papers/library,local}{}
# #+LaTeX: \bibliography{local}{}
#+LaTeX: \bibliography{ice_discharge}{}

* Figures
:PROPERTIES:
:clearpage: t
:END:
** Overview                                               :ignore:

#+NAME: fig:overview
#+ATTR_LATEX: :width 0.4\textwidth :placement [!h]
#+CAPTION: Overview showing fast-flowing ice (orange, greater than 100 m yr^{-1}) and the gates for eight major discharging glaciers (Fig. [[fig:discharge_ts_topfew]]). Gates are shown as black lines in inset images. Each inset is 30 x 30 km and they all have the same color scaling, but different from the main map. Insets pair with nearest label and box. On the main map, regions from citet:mouginot_2019_glacier are designated by thicker black lines and large bold labels. Sectors (same source) are delineated with thinner gray lines, and eight major discharging glaciers are labeled with smaller font. H = Helheim Gletsjer (Helheim Glacier), KB = Køge Bugt (Køge Bay), KG = Kangerlussuaq Gletsjer (Kangerlussuaq Glacier), KS = Kangilliup Sermia (English: Rink Glacier; Danish: Rink Isbræ), N = Nioghalvfjerdsbræ, P = Petermann Gletsjer (Petermann Glacier), SK = Sermeq Kujalleq (English: Jakobshavn Glacier; Danish: Jakobshavn Isbræ), and Z = Zachariae Isstrøm. Basemap terrain (gray), ocean bathymetry (blues), and ice mask (white) come from BedMachine.
[[./figs/overview.png]]


** Heatmap                                                :ignore:

#+NAME: fig:heatmap
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Heatmap and table showing ice sheet discharge as a function of gate buffer distance and ice speed cutoff. The colors of the numbers change for readability.
[[./figs/heatmap_all.png]]


** Ice Thickness v. Velocity 2D Histogram: Color = count  :ignore:

#+BEGIN_SRC jupyter-python :session histogram2D :exports none
import matplotlib
import matplotlib as mpl

if "LOADED" not in locals():
    <<load_data>>
    <<millan_2018>>
    <<adjust_thickness>>
    <<adjust_thickness_fit>>
    LOADED=True

plt.close(1)
fig = plt.figure(1, figsize=(8,4)) # w,h
# get_current_fig_manager().window.move(0,0)
fig.clf()
# fig.set_tight_layout(True)

ax1 = fig.add_subplot(121)
thick = th['thick']
thick[thick < 1] = 1
im = ax1.hexbin(vel_baseline['vel'].values, thick,
               gridsize=(40,25),
               norm=mpl.colors.LogNorm(),
               vmin=1, vmax=100,
               xscale='log', yscale='log',
               linewidths=0.01,
               edgecolors='k',  mincnt=1)
ax1.set_ylabel('Thickness [m]')
ax1.set_xlabel('Velocity [m yr$^{-1}$]')
# cb = fig.colorbar(im, ax=ax1, extend='max')
# cb.set_label('Count [#]')

ax2 = fig.add_subplot(122)
im = ax2.hexbin(vel_baseline['vel'].values, th['fit'],
               gridsize=(40,25),
               norm=mpl.colors.LogNorm(),
               vmin=1, vmax=100,
               extent=[2,4,0,3],
               xscale='log', yscale='log',
                linewidths=0.01,
               edgecolors='k',  mincnt=1)
#ax2.set_ylabel('Thickness [m]')
#ax2.set_xlabel('Velocity [m yr$^{-1}$]')
cb = fig.colorbar(im, ax=[ax1,ax2], extend='max')
cb.set_label('Count [#]')

from adjust_spines import adjust_spines as adj
adj(ax1, ['left','bottom'])
adj(ax2, ['bottom'])

plt.savefig('./figs/h_v_histogram.png', transparent=True, dpi=300, bbox_inches='tight')
#+END_SRC

#+NAME: fig:h_v_histogram
#+ATTR_LATEX: :height 0.5\textwidth
#+CAPTION: Two-dimensional histogram of velocity and thickness at all gate pixels. Left panel: Unadjusted (BedMachine & citet:millan_2018_vulnerability) thickness. Right panel: Adjusted (as described in the text) thickness.
[[./figs/h_v_histogram.png]]




** Discharge Time Series                                  :ignore:

#+NAME: fig:discharge_ts
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Bottom panel: Time series of ice discharge from the Greenland Ice Sheet. Dots represent when observations occurred (limited to coverage > 50 %). Orange stepped line is annual average (limited to three or more observations in a year). Coverage (percentage of total discharge observed at any given time) is shown in the top panel and also by the opacity of the dots' interior and error bars on lower panel. When coverage is < 100 %, total discharge is estimated and shown.
[[./figs/discharge_ts.png]]

** Discharge Time Series: Regions                         :ignore:

#+NAME: fig:discharge_ts_regions
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Bottom panel: Time series of ice discharge by region. Same graphical properties as Fig. [[fig:discharge_ts]].
[[./figs/discharge_ts_regions.png]]

** Discharge Time Series: Top Few                         :ignore:

#+NAME: fig:discharge_ts_topfew
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Bottom panel: Time series of ice discharge showing the eight major discharging glaciers from Figure [[fig:overview]]. Same graphical properties as Fig. [[fig:discharge_ts]].
[[./figs/discharge_ts_topfew.png]]

* Appendix                                                :ignore:
#+LaTeX: \appendix
#+LaTeX: \clearpage

** Errors and uncertainties

Here we describe our error and uncertainty treatments. We begin with a brief philosophical discussion of common uncertainty treatments, our general approach, and then the influence of various decisions made throughout our analysis, such as gate location and treatments of unknown thicknesses.

# Throughout this work we have tried to use simple rather than complicated methods (e.g. linear interpolation rather than Monte Carlo simulations, or setting bad thickness directly to X m rather than via a convoluted self-correlation) and conservative (low) rather than aggressive (high) estimates (e.g. unknown thicknesses set to 300 \(\pm\) 300 m rather than ~400 \(\pm\) 70 m citep:enderlin_2014_improved).

Traditional and mathematically valid uncertainty treatments divide errors into two classes: systematic (bias) and random. The primary distinction is that systematic errors do not decrease with more samples, and random errors decrease as the number of samples or measurements increases. The question is then which errors are systematic and which are random. A common treatment is to decide that errors within a region are systematic and among regions are random. This approach has no physical basis - two glaciers a few hundred meters apart but in different regions are assumed to have random errors, but two glaciers thousands of kilometers apart but within the same region are assumed to have systematic errors. It is more likely the case that all glaciers narrower than some width or deeper than some depth have systematic errors even if they are on opposite sides of the ice sheet, if ice thickness is estimated with the same method (i.e. the systematic error is likely caused by the sensor and airplane, not the location of the glacier).

The decision to have \(R\) random samples (where \(R\) is the number of regions, usually ~18 based on citet:zwally_2012_sectors) is also arbitrary. Mathematical treatment of random errors means that, even if the error is 50 % 18 measurements reduce it to only 11.79 %.

#+BEGIN_SRC jupyter-python :session err_example :results output :exports none :eval no-export
import numpy as np
from uncertainties import unumpy
val = 1 # arbitrary
err = 1 # 100% error # also try with 0.5

x = []
xerr = []
for i in [1,2,10,18,100,176,267,5829]:
    u = np.sum(unumpy.uarray([val]*i, [err]*i))
    x.append(u.n)
    xerr.append(u.s)
    print(i, u.n, u.s, np.round(u.s/u.n*100,2))
#+END_SRC

#+RESULTS:
: 1 1.0 1.0 100.0
: 2 2.0 1.4142135623730951 70.71
: 10 10.0 3.1622776601683795 31.62
: 18 18.0 4.242640687119285 23.57
: 100 100.0 10.0 10.0
: 176 176.0 13.2664991614216 7.54
: 267 267.0 16.34013463836819 6.12
: 5829 5829.0 76.34788798650555 1.31

This reduction is unlikely to be physically meaningful. Our 173 sectors, 267 gates, and 5829 pixels means that, even if errors were 100 % for each, we could reduce it to 7.5, 6.1, or 1.3 % respectively. We note that the area error introduced by the common EPSG:3413 map projection is -5 % in the north and +8 % in the south. While this error is mentioned in some other works (e.g., citet:joughin_2018_greenland) it is often not explicitly mentioned.

We do not have a solution for the issues brought up here, except to discuss them explicitly and openly so that those, and our own, error treatments are clearly presented and understood to likely contain errors themselves. 

*** Invalid thickness

#+header: :eval no-export
#+NAME: tab:thick_adjust
#+BEGIN_SRC jupyter-python :display text/org :exports results :results value :session thick_adj :noweb yes

<<load_data>>
<<millan_2018>>
<<adjust_thickness>>

df = pd.DataFrame(index=pd.DataFrame(np.random.random(3)).describe().index.values)
df['Good pixels'] = vel_baseline.loc[~th['bad']].describe()
df['Bad pixels'] = vel_baseline.loc[th['bad']].describe()
df.index = [_.capitalize() for _ in df.index]
df.rename({"Min" : "Minimum", "Max" : "Maximum", "Std" : "SD"}, axis="rows", inplace=True)

# print("#+LATEX_ATTR: :placement [!h]")
# print("#+CAPTION: Statistics of pixels with and without valid thickness. Numbers represent speed (m yr^{-1}) except for the \"count\" row\label{tab:thick_adjust}.")
df.round(0).astype(np.int)
#+END_SRC

#+NAME: tab:thick_adjust
#+LATEX_ATTR: :placement [!h]
#+CAPTION: Statistics of pixels with and without valid thickness. Numbers represent speed (m yr^{-1}) except for the "count" row\label{tab:thick_adjust}.
#+RESULTS: tab:thick_adjust
|         | Good pixels | Bad pixels |
|---------+-------------+------------|
| Count   |        5205 |        624 |
| Mean    |         857 |        272 |
| SD      |        1117 |        239 |
| Minimum |         100 |        100 |
| 25%     |         236 |        130 |
| 50%     |         506 |        181 |
| 75%     |         995 |        291 |
| Maximum |       10044 |       1505 |

# src_jupyter-python{vel.shape[0]} {{{results(=5829=)}}}
# src_jupyter-python{(th['bad'] == False).sum()} {{{results(=5205=)}}}
# src_jupyter-python{th['bad'].sum()} {{{results(=624=)}}}
# src_jupyter-python{np.round(th['bad'].sum()/vel.shape[0]*100).astype(np.int)} {{{results(=11=)}}}

We assume ice thicknesses < 20 m are incorrect where ice speed is > 100 m yr^{-1}. Of 5829 pixels, 5205 have valid thickness, and 624 (11 %) have invalid thickness. However, the speed at the locations of the invalid thicknesses is generally much less (and therefore the assumed thickness is less), and the influence on discharge is less than an average pixel with valid thickness (Table [[tab:thick_adjust]]).

# src_jupyter-python{th['gates'].unique().size} {{{results(=267=)}}}
# src_jupyter-python{(th.groupby('gates').mean()['bad'] == 0).sum()} {{{results(=179=)}}}
# src_jupyter-python{np.round((th.groupby('gates').mean()['bad'] == 0).sum()/th['gates'].unique().size*100).astype(np.int)} {{{results(=67=)}}}
# src_jupyter-python{(th.groupby('gates').mean()['bad'] > 0).sum()} {{{results(=88=)}}}
# src_jupyter-python{np.round((th.groupby('gates').mean()['bad'] > 0).sum()/th['gates'].unique().size*100).astype(np.int)} {{{results(=33=)}}}
# src_jupyter-python{(th.groupby('gates').mean()['bad'] > 0.5).sum()} {{{results(=64=)}}}
# src_jupyter-python{(th.groupby('gates').mean()['bad'] == 1).sum()} {{{results(=62=)}}}
# src_jupyter-python{np.round((th.groupby('gates').mean()['bad'] == 1).sum()/th['gates'].unique().size*100).astype(np.int)} {{{results(=23=)}}}

When aggregating by gate, there are 267 gates. Of these, 179 (67 %) have no bad pixels and 88 (33 %) have some bad pixels, 64 have > 50 % bad pixels, and 62 (23 %) are all bad pixels.

We adjust these thickness using a poor fit (correlation coefficient: 0.3) of the log$_{10}$ of the ice speed to thickness where the relationship is known (thickness > 20 m). We set errors equal to one half the thickness (i.e. \(\sigma_H = \pm 0.5 \, H\)). We also test the sensitivity of this treatment to simpler treatments, and have the following five categories:

+ NoAdj :: No adjustments made. Assume BedMachine thicknesses are all correct.
+ NoAdj+Millan :: Same as NoAdj but using citet:millan_2018_vulnerability bed where available.
+ 300 :: If a gate has some valid pixel thicknesses, set the invalid thicknesses to the minimum of the valid thicknesses. If a gate has no valid thickness, set the thickness to 300 m.
+ 400 :: Set all thicknesses < 50 m to 400 m
+ Fit :: Use the thickness--speed relationship described above.

Table [[tab:thick_treatments]] shows the estimated baseline discharge to these four treatments:

#+header: :eval no-export
#+NAME: tab:thick_treatments
#+BEGIN_SRC jupyter-python :session thick_treat :exports results :results value
<<load_data>>
<<millan_2018>>
<<adjust_thickness>>
<<adjust_thickness_fit>>
<<discharge_th>>

D_tmp = D_th.sum(axis=0).astype(np.int).astype(np.str)

df = pd.DataFrame(columns=['Discharge (Gt)'], index=['NoAdj','NoAdj+Millan',300,400,'Fit'])
df.loc['NoAdj'] = D_tmp['NoMillan'] + ' \pm ' + D_tmp['NoAdj_err']
df.loc['NoAdj+Millan'] = D_tmp['NoAdj'] + ' \pm ' + D_tmp['NoAdj_err']
df.loc[300] = D_tmp['300'] + ' \pm ' + D_tmp['300_err']
df.loc[400] = D_tmp['400'] + ' \pm ' + D_tmp['400_err']
df.loc['Fit'] = D_tmp['fit'] + ' \pm ' + D_tmp['fit_err']
df.index.name = 'Treatment'
# print("#+NAME: tab:thick_treatments")
# print('#+LATEX_ATTR: :placement [!h]')
# print('#+CAPTION: Effect of different thickness adjustments on baseline discharge\label{tab:thick_treatments}')
df
#+END_SRC

#+NAME: tab:thick_treatments
#+LATEX_ATTR: :placement [!h]
#+CAPTION: Effect of different thickness adjustments on baseline discharge\label{tab:thick_treatments}
#+RESULTS: tab:thick_treatments
| Treatment    | Discharge (Gt) |
|--------------+----------------|
| NoAdj        | 472 \pm 49     |
| NoAdj+Millan | 481 \pm 49     |
| 300          | 489 \pm 49     |
| 400          | 495 \pm 52     |
| Fit          | 493 \pm 51     |


Finally, Figure [[fig:gate_map]] shows the geospatial locations, concentration, and speed of gates with and without bad pixels.

#+NAME: fig:gate_map
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Gate locations and thickness quality. Left: locations of all gates. Black dots represent gates with 100 % valid thickness pixels, blue with partial, and red with none. Top right: Percent of bad pixels in each of the 267 gates, arranged by region. Bottom panel: Average speed of gates. Color same as left panel.
[[./figs/gate_map.png]]


*** Missing velocity
\label{sec:uncertain_vel}

We estimate discharge at all pixel locations for any time when there exists any velocity product. Not every velocity product provides velocity estimates at all locations, and we fill in where there are gaps by linearly interpolating velocity at each pixel in time. We calculate coverage, the discharge-weighted percent of observed velocity at any given time (Figure [[fig:coverage_schematic]]), and display coverage as 1) line plots over the time series graphs, 2) opacity of the error bars and 3) opacity of the infilling of time series dots. Linear interpolation and discharge-weighted coverage is illustrated in Figure [[fig:coverage_schematic]], where pixel A has a velocity value at all three times, but pixel B has a filled gap at time \(t_3\). The concentration of valid pixels is 0.5, but the weighted concentration, or coverage, is 9/11 or ~0.82. When displaying these three discharge values, \(t_1\) and \(t_4\) would have opacity of 1 (black), and \(t_3\) would have opacity of 0.82 (dark gray).

# Because velocity uncertainty is << thickness uncertainty (see next section) we do estimate a velocity uncertainty for our gap-filled velocities.

This treatment is applied at the pixel level and then weight averaged to the gate, sector, region, and ice sheet results.


#+BEGIN_SRC bash :results verbatim
inkscape -z ./figs/gate_weight_schematic.svg -e ./figs/gate_weight_schematic.png
#+END_SRC


#+NAME: fig:coverage_schematic
#+ATTR_LATEX: :width 0.33\textwidth :placement [!h]
#+CAPTION: Schematic demonstrating coverage. Velocities are filled with linear interpolation in time, and coverage is weighted by discharge. \(t\) columns represent the same two gate pixels (A & B) at three time steps, where \(t_n\) values are linearly spaced, but \(t_2\) is not observed anywhere on the ice sheet and therefore not included. Numbers in boxes represent example discharge values. The gray parenthetical number is filled, not sampled, in pixel B at time t\(_3\). Weighted filling computes the coverage as 9/11 = \(0.\overline{81}\), instead of 0.5 (half of the pixels at time t\(_3\) have observations).
[[./figs/gate_weight_schematic.png]]


*** Errors from map projection                          :noexport:
#+LaTeX: \label{sec:uncertain_map}

Our work takes place in a projected coordinate system (EPSG 3413) and therefore errors are introduced between the "true" earth spheroid (which is itself an approximation) and our projected coordinates system. We address these by calculating the projection error due to EPSG 3413 which is approximately +8 % in Northern Greenland and -6 % in Southern Greenland, and multiplying variables by a scaling factor if the variables do not already take this into account. Velocities are "true velocities" and not scaled, but the nominal 200 m gate width is scaled.

** Velocity versus thickness                            :noexport:
:PROPERTIES:
:clearpage: t
:END:

#+NAME: fig:h_v_histogram
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Thickness versus ice speed histogram. Points limited to discharge pixels.
[[./h_v_histogram.png]]


** Køge Bugt bed change between citet:bamber_2013_bed and citet:morlighem_2017_bedmachine
:PROPERTIES:
:clearpage: t
:END:

#+NAME: fig:koge_bugt_bamber
#+ATTR_LATEX: :width \textwidth :placement [!h]
#+CAPTION: Differences between BedMachine citep:morlighem_2017_bedmachine and citet:bamber_2013_bed near Køge Bugt. Panel (a) is baseline ice speed, (b) BedMachine thickness, (c) citet:bamber_2013_bed thickness, and (d) difference computed as BedMachine - Bamber. The curved line is the gate used in this work.
[[./figs/koge_bugt.png]]



** Sentinel-1 ice velocity maps
:PROPERTIES:
:CUSTOM_ID: sec:appendix:sentinel
:clearpage: t
:END:

We use ESA Sentinel-1 synthetic aperture radar (SAR) data to derive ice velocity maps covering the Greenland Ice Sheet margin using offset tracking citep:strozzi_2002_glacier assuming surface parallel flow using the digital elevation model from the Greenland Ice Mapping Project (GIMP DEM, NSIDC 0645) by citet:howat_2014_greenland,NSIDC_0645. The operational interferometric postprocessing (IPP) chain citep:dall_2015_ice,kusk_2018_system, developed at the Technical University of Denmark (DTU) Space and upgraded with offset tracking for ESA’s Climate Change Initiative (CCI) Greenland project, was employed to derive the surface movement. The Sentinel-1 satellites have a repeat cycle of 12 days, and due to their constellation, each track has a twelve-day repeat cycle. We produce a Greenland-wide product that spans two repeat cycles of Sentinel-1A. The product is a mosaic of all the ice velocity maps based on 12 day pairs produced from all the tracks from Sentinel-1A and 1B covering Greenland during those two cycles. The product thus has a total time span of 24 days. Twelve-day pairs are also included in each mosaic from track 90, 112 and 142 covering the ice sheet margin in the south as well as other tracks on an irregular basis in order to increase the spatial resolution. citet:rathmann_2017_highly and citet:vijay_2019_resolving have exploited the high temporal resolution of the product to investigate dynamics of glaciers. The maps are available from 2016-09-13 and onward, are updated regularly, and are available from http://promice.org.


** Software
:PROPERTIES:
:clearpage: t
:END:

This work was performed using only open-source software, primarily =GRASS GIS= citep:neteler_2012_GRASS and =Python= citep:van-rossum_1995_python, in particular the =Jupyter= citep:kluyver_2016_jupyter, =pandas= citep:mckinney_2010_pandas, =numpy= citep:oliphant_2006_numpy, =statsmodel= citep:seabold_2010_statsmodels, =x-array= citep:hoyer_2017_xarray, and =Matplotlib= citep:hunter_2007_matplotlib packages. The entire work was performed in =Emacs= citep:stallman_1981_emacs using =Org Mode= citep:schulte_2012_a-multi-language. The =parallel= citep:tange_2011_parallel tool was used to speed up processing. We used =proj4= citep:proj4 to compute the errors in the EPSG 3413 projection. All code used in this work is available in the Supplemental Material.

* Code                                                  :noexport:
:PROPERTIES:
:header-args:bash+: :comments both
:header-args:bash+: :tangle-mode (identity #o744)
:header-args:bash+: :shebang #!/usr/bin/env bash
:END:
** Makefile
:PROPERTIES:
:CUSTOM_ID: sec:makefile
:END:

This code, and all code files in this project, are derived products tangled from the ice_discharge.org source file.

#+BEGIN_SRC makefile :tangle Makefile :eval no
all: G run dist

G:
	grass -e -c EPSG:3413 ./G

run: FORCE
	grass ./G/PERMANENT --exec ./import.sh
	grass ./G/PERMANENT --exec ./gate_IO_runner.sh
	grass ./G/PERMANENT --exec ./vel_eff.sh
	grass ./G/PERMANENT --exec ./export.sh
	python ./errors.py
	python ./raw2discharge.py
	python ./csv2nc.py
	grass ./G/PERMANENT --exec ./gate_export.sh
	python ./figures.py

dist:
	ln -s out ice_discharge
	zip -r ice_discharge.zip ice_discharge
	rm ice_discharge

FORCE: # dummy target

clean:
	rm -fR G tmp out ice_discharge.zip
#+END_SRC

** Misc Helper
*** Support pretty messages
#+NAME: MSGS_pretty_print
#+BEGIN_SRC bash :results verbatim :tangle no
RED='\033[0;31m'
ORANGE='\033[0;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color
MSG_OK() { printf "${GREEN}${1}${NC}\n"; }
MSG_WARN() { printf "${ORANGE}WARNING: ${1}${NC}\n"; }
MSG_ERR() { echo "${RED}ERROR: ${1}${NC}\n" >&2; }
#+END_SRC

*** GRASS config

https://grass.osgeo.org/grass74/manuals/variables.html

#+BEGIN_QUOTE
GRASS_VERBOSE
[all modules]
toggles verbosity level
-1 - complete silence (also errors and warnings are discarded)
0 - only errors and warnings are printed
1 - progress and important messages are printed (percent complete)
2 - all module messages are printed
3 - additional verbose messages are printed
#+END_QUOTE

#+NAME: GRASS_config
#+BEGIN_SRC bash :results verbatim :tangle no
export GRASS_VERBOSE=3
# export GRASS_MESSAGE_FORMAT=silent

if [ -z ${DATADIR+x} ]; then
    echo "DATADIR environment varible is unset."
    echo "Fix with: \"export DATADIR=/path/to/data\""
    exit 255
fi

set -x # print commands to STDOUT before running them

trap ctrl_c INT
function ctrl_c() {
  MSG_WARN "Caught CTRL-C"
  MSG_WARN "Killing process"
  kill -term $$ # send this program a terminate signal
}
#+END_SRC

** Import Data
:PROPERTIES:
:header-args:bash+: :tangle import.sh
:END:

#+BEGIN_SRC bash :results verbatim 
<<MSGS_pretty_print>>
<<GRASS_config>>
#+END_SRC

*** Bed and Surface
**** BedMachine v3
+ from [[textcite:Morlighem:2017BedMachine][Morlighem /et al./ (2017)]]
#+BEGIN_SRC bash :results verbatim
MSG_OK "BedMachine"
g.mapset -c BedMachine

for var in $(echo mask surface thickness bed errbed); do
  echo $var
  r.external source=netCDF:${DATADIR}/Morlighem_2017/BedMachineGreenland-2017-09-20.nc:${var} output=${var}
done

r.colors -a map=errbed color=haxby

g.mapset PERMANENT
g.region raster=surface@BedMachine res=200 -a -p
g.region -s
g.mapset BedMachine
g.region -dp

r.colors map=mask color=haxby

r.mapcalc "mask_ice = if(mask == 2, 1, null())"
#+END_SRC

**** Bamber 2013
#+BEGIN_SRC bash :results verbatim
MSG_OK "Bamber 2013"
g.mapset -c Bamber_2013
r.in.gdal input=${DATADIR}/Bamber_2013/IceThickness.tif output=thickness
r.null thickness null=0
#+END_SRC

**** Millan 2018
#+BEGIN_SRC bash :results verbatim
MSG_OK "Millan 2018"
g.mapset -c Millan_2018

x=2760
y=4044
res=150

# ###
# ### OLD
# ###
# FILE=Bathy_SEG_OIB_Millan_et_al_2018.nc
# # from the netcdf metadata, but x/y are swapped:
# n="-2616623"
# w="-109213.637"
# e=$(echo "$w + $x*$res" | bc -l)
# s=$(echo "$n - $y*$res" | bc -l)
# g.region e=$e w=$w s=$s n=$n res=$res -pl
# r.in.gdal -o input=netCDF:${ROOT}/${FILE}:BED output=BED_OLD
# r.region -c map=BED_OLD

###
### NEW
###
FILE=Bathy_SEG_OIB_Millan_et_al_2018_08082018.nc
n="-2616698.800"  # ymax
w="-109288.637" # xmin
e=$(echo "$w + $x*$res" | bc -l)
s=$(echo "$n - $y*$res" | bc -l)
g.region e=$e w=$w s=$s n=$n res=$res -pl
r.in.gdal -o input=netCDF:${DATADIR}/Millan_2018/${FILE}:BED output=BED_NEW
r.region -c map=BED_NEW

r.in.gdal -o input=netCDF:${DATADIR}/Millan_2018/${FILE}:THICKNESSGimp output=THICKNESS
r.region -c map=THICKNESS

g.region -d
r.mapcalc "bed_0 = BED_NEW"
r.null map=bed_0 null=0
r.mapcalc "thickness_0 = THICKNESS"
r.null map=thickness_0 null=0
#+END_SRC

***** Testing Old v. New (Millan)
#+BEGIN_SRC bash :results verbatim :tangle no
d.mon start=wx0
d.erase
d.rast bed@BedMachine
r.colors map=BED color=viridis
d.rast BED_OLD
d.rast BED_NEW

r.mapcalc "diff_old = BED_OLD - bed@BedMachine"
r.mapcalc "diff_new = BED_NEW - bed@BedMachine"
r.colors map=diff_old,diff_new color=differences
d.rast diff_old
d.rast diff_new
d.vect gates_final@gates_50_2500
#+END_SRC

***** Testing Millan v. BedMachine for Ikertivaq
#+BEGIN_SRC bash :results verbatim :tangle no
d.mon start=wx0
d.erase
d.rast bed@BedMachine
d.rast thickness@BedMachine

r.mapcalc "thickness = surface@BedMachine - BED_NEW"
d.rast thickness
d.rast diff_new

d.vect gates_final@gates_50_2500

g.copy vector=gates_final@gates_50_2500,gates
#+END_SRC

**** GIMP 0715
#+BEGIN_SRC bash :results verbatim
MSG_OK "GIMP 0715"
g.mapset -c GIMP.0715
ROOT=${DATADIR}/GIMP/0715

# reset
# g.remove -f type=raster name=$(g.list type=raster mapset=. separator=",")

# read in DEM, DAY, and ERR
# for f in $(ls ${ROOT}/reg/tile_?_?_reg_30m_???.tif); do
#   name=$(basename ${f})
#   r.external input=${f} output=${name}
# done
ls ${ROOT}/reg/tile_?_?_reg_30m_???.tif | parallel --verbose --bar r.external input={} output={/.}
ls ${ROOT}/fit/tile_?_?_fit_30m_???.tif | parallel --verbose --bar r.external input={} output={/.}

r.patch -s input=$(g.list type=raster pattern=tile_?_?_reg_30m_dem separator=,),$(g.list type=raster pattern=tile_?_?_fit_30m_dem separator=,) output=dem

# no fit day data to patch holes. We'll assign elevation pixels with DEM data but not DAY data to some day, TBD
r.patch -s input=$(g.list type=raster pattern=tile_?_?_reg_30m_day separator=,) output=day

r.patch -s input=$(g.list type=raster pattern=tile_?_?_reg_30m_err separator=,),$(g.list type=raster pattern=tile_?_?_fit_30m_err separator=,) output=err

r.null map=day null=0
#+END_SRC

*** Sectors
+ From citet:mouginot_2019_glacier
***** Import & Clean
#+BEGIN_SRC bash :results verbatim
MSG_OK "Mouginot 2019 sectors"

g.mapset -c Mouginot_2019
v.in.ogr input=${DATADIR}/Mouginot_2019 output=sectors_all
v.extract input=sectors_all where="NAME NOT LIKE '%ICE_CAP%'" output=sectors

db.select table=sectors | head
v.db.addcolumn map=sectors columns="region_name varchar(100)"
db.execute sql="UPDATE sectors SET region_name=SUBREGION1 || \"___\" || NAME"

v.to.db map=sectors option=area columns=area units=meters

mkdir -p ./tmp/
# db.select table=sectors > ./tmp/Mouginot_2019.txt

v.to.rast input=sectors output=sectors use=cat label_column=region_name
r.mapcalc "mask_GIC = if(sectors)"

# # regions map
v.to.rast input=sectors output=regions_tmp use=cat label_column=SUBREGION1
# which categories exist?
# r.category regions separator=comma | cut -d, -f2 | sort | uniq
# Convert categories to numbers
r.category regions_tmp separator=comma | sed s/NO/1/ | sed s/NE/2/ | sed s/CE/3/ | sed s/SE/4/ | sed s/SW/5/ | sed s/CW/6/ | sed s/NW/7/ > ./tmp/mouginot.cat
r.category regions_tmp separator=comma rules=./tmp/mouginot.cat
# r.category regions_tmp
r.mapcalc "regions = @regions_tmp"

# # region vector 
# r.to.vect input=regions output=regions type=area
# v.db.addcolumn map=regions column="REGION varchar(2)"
# v.what.vect map=regions column=REGION query_map=sectors query_column=SUBREGION1

# # mask
#+END_SRC

***** Test
#+BEGIN_SRC bash :results verbatim :tangle no
grass74 ./G/Mouginot_2019
d.mon start=wx0
d.rast regions
d.rast sectors
d.vect sectors_all fill_color=none color=red
d.vect sectors fill_color=none
#+END_SRC

*** 2D Area Error
+ EPSG:3413 has projection errors of \(\pm\) ~8% in Greenland
+ Method
  + Email: [[mu4e:msgid:m2tvxmd2xr.fsf@gmail.com][Re: {GRASS-user} scale error for each pixel]]
  + Webmail: https://www.mail-archive.com/grass-user@lists.osgeo.org/msg35005.html
#+BEGIN_SRC bash :results verbatim
MSG_OK "2D Area Error"
g.mapset PERMANENT

if [[ "" == $(g.list type=raster pattern=err_2D) ]]; then
    r.mask -r
    g.region -d

    g.region res=1000 -ap # do things faster
    r.mapcalc "x = x()"
    r.mapcalc "y = y()"
    r.latlong input=x output=lat_low
    r.latlong -l input=x output=lon_low

    r.out.xyz input=lon_low,lat_low separator=space > ./tmp/llxy.txt
    PROJSTR=$(g.proj -j)
    echo $PROJSTR

    paste -d" " <(cut -d" " -f1,2 ./tmp/llxy.txt) <(cut -d" " -f3,4 ./tmp/llxy.txt | proj -VS ${PROJSTR} | grep Areal | column -t | sed s/\ \ /,/g | cut -d, -f4) > ./tmp/xy_err.txt

    r.in.xyz input=./tmp/xy_err.txt  output=err_2D_inv separator=space
    r.mapcalc "err_2D = 1/(err_2D_inv^0.5)" # convert area error to linear multiplier error
    g.region -d

    r.latlong input=x output=lat # for exporting at full res
    r.latlong -l input=x output=lon
fi

# sayav done
g.region -d
#+END_SRC

*** Velocity
**** MEaSUREs 
+ See: [[file:~/data/MEaSUREs/README.org][MEaSUREs README]]

+ [X] 0478 :: 2000 -- 2017 annual average
+ [ ] 0481 :: 6-11 day velocity
+ [X] 0646 :: Monthly velocity - sparse glacier coverage 1985 through 2016
+ [ ] 0670 :: 1995 -- 2015 average
+ [ ] 0725 :: 2015 & 2016 annual average
+ [X] 0731 :: Monthly  ice sheet velocity 2015 through 2018

***** 0478.002 
+ MEaSUREs Greenland Ice Sheet Velocity Map from InSAR Data, Version 2
+ Winter velocity maps
****** Import
+ First read in the 200 m files
+ Then read in the 500 m files if there were no 200 m files
#+BEGIN_SRC bash :results verbatim
MSG_OK "MEaSURES.0478"
g.mapset -c MEaSUREs.0478

MSG_OK "  200 m..."
r.mask -r
ROOT=${DATADIR}/MEaSUREs/NSIDC-0478.002/
VX=$(find ${ROOT} -name "*mosaic200_*vx*.tif" | head -n1) # DEBUG
for VX in $(find ${ROOT} -name "*mosaic200_*vx*.tif" | LC_ALL=C sort); do
  VY=${VX/vx/vy}
  EX=${VX/vx/ex}
  EY=${EX/ex/ey}
  DATE=$(dirname ${VX} | rev | cut -d"/" -f1 | rev | sed s/\\./_/g)
  # echo $DATE
  # need to import not link to external so that we can set nulls to 0
  parallel --verbose --bar r.in.gdal input={1} output={2}_${DATE} ::: ${VX} ${VY} ${EX} ${EY} :::+ VX VY EX EY
  parallel --verbose --bar r.null map={}_${DATE} null=0 ::: VX VY EX EY
done
g.region raster=VX_${DATE} -pa

MSG_OK "  500 m..."
VX=$(find ${ROOT} -name "*mosaic500_*vx*.tif" | head -n1) # DEBUG
for VX in $(find ${ROOT} -name "*mosaic500_*vx*.tif" | LC_ALL=C sort); do
  VY=${VX/vx/vy}
  EX=${VX/vx/ex}
  EY=${EX/ex/ey}
  DATE=$(dirname ${VX} | rev | cut -d"/" -f1 | rev | sed s/\\./_/g)
  echo $DATE

  # Read in all the 500 m velocity data
  parallel --verbose --bar r.external source={1} output={2}_${DATE}_500 ::: ${VX} ${VY} ${EX} ${EY} :::+ VX VY EX EY 
  # If the 200 m data exists, will produce an error and continue
  # If the 200 m data does not exist, will resample from 500
  r.mapcalc "VX_${DATE} = VX_${DATE}_500"
  r.mapcalc "VY_${DATE} = VY_${DATE}_500"
  r.mapcalc "EX_${DATE} = EX_${DATE}_500"
  r.mapcalc "EY_${DATE} = EY_${DATE}_500"
  parallel --verbose --bar r.null map={}_${DATE} null=0 ::: VX VY EX EY
done
#+END_SRC

****** Baseline: Average of 2015-2017
#+BEGIN_SRC bash :results verbatim
MSG_OK "Baseline"
g.mapset -c MEaSUREs.0478

r.series input=VX_2015_09_01,VX_2016_09_01,VX_2017_09_01 output=vx_baseline method=average range=-1000000,1000000
r.series input=VY_2015_09_01,VY_2016_09_01,VY_2017_09_01 output=vy_baseline method=average range=-1000000,1000000

r.series input=EX_2015_09_01,EX_2016_09_01,EX_2017_09_01 output=ex_baseline method=average range=-1000000,1000000
r.series input=EY_2015_09_01,EY_2016_09_01,EY_2017_09_01 output=ey_baseline method=average range=-1000000,1000000

r.mapcalc "vel_baseline = sqrt(vx_baseline^2 + vy_baseline^2)"
r.mapcalc "vel_err_baseline = sqrt(ex_baseline^2 + ey_baseline^2)"

parallel --verbose --bar r.null map={}_baseline setnull=0 ::: vx vy vel ex ey vel_err
r.colors -e map=vel_baseline,vel_err_baseline color=viridis
#+END_SRC

****** Fill in holes
+ There are holes in the velocity data which will create false gates. Fill them in.
+ Clump based on yes/no velocity
  + Largest clump is GIS
  + 2nd largest is ocean
+ Mask by ocean (so velocity w/ holes remains)
+ Fill holes
#+BEGIN_SRC bash :results verbatim
r.mask -r
r.mapcalc "no_vel = if(isnull(vel_baseline), 1, null())"
r.mask no_vel
r.clump input=no_vel output=no_vel_clump --o
ocean_clump=$(r.stats -c -n no_vel_clump sort=desc | head -n1 | cut -d" " -f1)
r.mask -i raster=no_vel_clump maskcats=${ocean_clump} --o
r.fillnulls input=vel_baseline out=vel_baseline_filled method=bilinear
r.mask -r
g.rename raster=vel_baseline_filled,vel_baseline --o
r.colors map=vel_baseline -e color=viridis
#+END_SRC

******* Display
#+BEGIN_SRC bash :results verbatim :tangle no
d.mon start=wx0
d.erase
d.rast vel
d.rast vel_filled
#+END_SRC

***** 0646.003
+ MEaSUREs Greenland Ice Velocity: Selected Glacier Site Velocity Maps from Optical Images, Version 2
+ Monthly velocity maps
****** Generate VRTs
+ One map per month
+ Build GDAL virtual tiles for every month (when data exists)
#+BEGIN_SRC bash :results verbatim
g.mapset -c MEaSUREs.0646

ROOT=${DATADIR}/MEaSUREs/NSIDC-0646.003/
VRTROOT=./tmp/NSIDC-0646.003.vrt/
mkdir -p ${VRTROOT}
for year in $(seq 1985 2018); do
  for month in $(seq -w 1 12); do
    if [[ ! -f ${VRTROOT}/${year}_${month}_vx.vrt ]]; then # VRT file does not exist?
      LIST=$(find ${ROOT} -name "*${year}-${month}_vx_*.tif" | LC_ALL=C sort)
      if [[ ! -z ${LIST} ]]; then
        MSG_OK "Building VRTs for ${year} ${month}"
        parallel --verbose --bar gdalbuildvrt -overwrite ${VRTROOT}/${year}_${month}_{}.vrt $\(find ${ROOT} -name "*${year}-${month}_{}_*.tif" \| LC_ALL=C sort\) ::: vx vy ex ey
      fi
    fi
  done
done
#+END_SRC

****** Import VRTs
#+BEGIN_SRC bash :results verbatim
MSG_OK "MEaSURES.0646"
g.mapset -c MEaSUREs.0646

r.mask -r
ROOT=./tmp/NSIDC-0646.003.vrt/
VX=$(find ${ROOT} -name "*vx*.vrt" | head -n1) # debug
for VX in $(find ${ROOT} -name "*vx*.vrt" | LC_ALL=C sort); do
    VY=${VX/vx/vy}
    EX=${VX/vx/ex}
    EY=${EX/ex/ey}
    DATE=$(basename $VX | cut -d"_" -f1-2)
    DATE=${DATE}_15
    echo $DATE
    
    parallel --verbose --bar r.external source={1} output={2}_${DATE} ::: ${VX} ${VY} ${EX} ${EY} :::+ VX VY EX EY
done
g.region raster=VX_${DATE} -pa
# g.list type=raster mapset=MEaSUREs.0646
#+END_SRC



***** 0731.001
MEaSUREs Greenland Monthly Ice Sheet Velocity Mosaics from SAR and Landsat, Version 1

****** Import
#+BEGIN_SRC bash :results verbatim
MSG_OK "MEaSURES.0731"
g.mapset -c MEaSUREs.0731
r.mask -r
ROOT=${DATADIR}/MEaSUREs/NSIDC-0731.001/
VX=$(find ${ROOT} -name "*mosaic_*vx*.tif" | head -n1) # DEBUG
for VX in $(find ${ROOT} -name "*mosaic_*vx*.tif" | LC_ALL=C sort); do
  VY=${VX/vx/vy}
  EX=${VX/vx/ex}
  EY=${EX/ex/ey}

  T0=$(dirname ${VX} | rev | cut -d"/" -f1 | rev|cut -d"_" -f4)
  T1=$(dirname ${VX} | rev | cut -d"/" -f1 | rev|cut -d"_" -f5)
  SEC0=$(date --utc --date="${T0}" +"%s")
  SEC1=$(date --utc --date="${T1}" +"%s")
  MID=$(echo "(${SEC0}+${SEC1})/2"|bc)
  DATE=$(date --utc --date="@${MID}" +"%Y_%m_%d")

  # echo $DATE
  parallel --verbose --bar r.external source={1} output={2}_${DATE} ::: ${VX} ${VY} ${EX} ${EY} :::+ VX VY EX EY
  parallel --verbose --bar r.null map={}_${DATE} null=0 ::: VX VY EX EY
done
g.region raster=VX_${DATE} -pa
#+END_SRC


**** Sentinel 1
***** Data Intro                                                   :noexport:
#+BEGIN_SRC bash :results verbatim :tangle no
DIR=${DATADIR}/Sentinel1/Sentinel1_IV_maps
(cd ${DIR}; ls *.nc | head)
(cd ${DIR}; ncdump -h $(ls *.nc | head -n1) | grep "float")
#+END_SRC

***** Import data                                                  :noexport:
+ Read in all the data
+ Convert from [m day-1] to [m year-1]
#+BEGIN_SRC bash :results verbatim
MSG_OK "Sentinel 1"
g.mapset -c Sentinel1
ROOT=${DATADIR}/Sentinel1/Sentinel1_IV_maps

find ${ROOT} -name "*.nc"
# FILE=$(find ${ROOT} -name "*.nc"|head -n1) # testing

FILE=$(find ${ROOT} -name "*.nc" | head -n1) # DEBUG
for FILE in $(find ${ROOT} -name "*.nc" | LC_ALL=C sort); do
  T=$(ncdump -v time $FILE | tail -n2 | tr -dc '[0-9]')
  DATE=$(date --utc --date="1990-01-01 +${T} days" --iso-8601)
  DATE_STR=$(echo ${DATE} | sed s/-/_/g)
  echo $DATE

  # TT=$(ncdump -v time_bnds $FILE | tail -n2 | head -n1)
  # T0=$(echo ${TT} | cut -d, -f1)
  # T1=$(echo ${TT} | cut -d, -f2 | tr -dc [0-9])
  # D0=$(date --date="1990-01-01 +${T0} days" --iso-8601)
  # D1=$(date --date="1990-01-01 +${T1} days" --iso-8601)

  r.external -o source="NetCDF:${FILE}:land_ice_surface_easting_velocity" output=vx_${DATE_STR}
  r.external -o source="NetCDF:${FILE}:land_ice_surface_northing_velocity" output=vy_${DATE_STR}

  r.external -o source="NetCDF:${FILE}:land_ice_surface_easting_velocity_std" output=ex_${DATE_STR}
  r.external -o source="NetCDF:${FILE}:land_ice_surface_northing_velocity_std" output=ey_${DATE_STR}
done
#+END_SRC

**** Mouginot 2018 (pre-2000 velocities)
+ See citet:mouginot_2018_1972to1990 and citet:mouginot_2018_1991to2000

#+BEGIN_SRC bash :results verbatim
MSG_OK "Mouginot pre 2000"
g.mapset -c Mouginot_pre2000

ROOT=${DATADIR}/Mouginot_2018/D1GW91
find ${ROOT} -name "*.nc"
FILE=$(find ${ROOT} -name "*.nc" | head -n1 | LC_ALL=C sort) # DEBUG
for FILE in $(find ${ROOT} -name "*.nc"); do
  YYYYMMDD=$(echo ${FILE} | cut -d"_" -f4)
  YEAR=$(echo ${YYYYMMDD} | cut -d"-" -f1)
  DATE=${YEAR}_01_01
  echo $DATE
  r.external -o source="NetCDF:${FILE}:VX" output=vx_${DATE}
  r.external -o source="NetCDF:${FILE}:VY" output=vy_${DATE}
done

# ROOT=${DATADIR}/Mouginot_2018/D1MM37
# find ${ROOT} -name "*.nc"
# FILE=$(find ${ROOT} -name "*.nc" | head -n1) # DEBUG
# for FILE in $(find ${ROOT} -name "*.nc"); do
#   YYYYMMDD=$(echo ${FILE} | cut -d"_" -f4)
#   YEAR=$(echo ${YYYYMMDD} | cut -d"-" -f1)
#   DATE=${YEAR}_01_01
#   echo $DATE
#   r.external -o source="NetCDF:${FILE}:VX" output=vx_${DATE}
#   r.external -o source="NetCDF:${FILE}:VY" output=vy_${DATE}
# done
#+END_SRC

***** Display
#+BEGIN_SRC bash :results verbatim :tangle no
d.mon start=wx0
g.list type=raster pattern=vx_*

d.erase; d.rast vx_1990-07-01
d.erase; d.rast vx_1991-07-01
d.erase; d.rast vx_1992-07-01
d.erase; d.rast vx_1993-07-01
d.erase; d.rast vx_1994-07-01
d.erase; d.rast vx_1995-07-01
d.erase; d.rast vx_1996-07-01
d.erase; d.rast vx_1997-07-01
d.erase; d.rast vx_1998-07-01
d.erase; d.rast vx_1999-07-01
#+END_SRC


*** Glacier Names
+ From [[textcite:Bjork:2015Brief][Bjørk /et al./ (2015)]].
+ Also use citet:mouginot_2019_glacier
**** Bjørk 2015
+ Write out x,y,name. Can use x,y and mean gate location to find closest name for each gate.
#+BEGIN_SRC bash :results verbatim
MSG_OK "Bjørk 2015"
g.mapset -c Bjork_2015

ROOT=${DATADIR}/Bjørk_2015/

cat ${ROOT}/GreenlandGlacierNames_GGNv01.csv |  iconv -c -f utf-8 -t ascii | grep GrIS | awk -F';' '{print $3"|"$2"|"$7}' | sed s/,/./g | m.proj -i input=- | sed s/0.00\ //g | v.in.ascii input=- output=names columns="x double precision, y double precision, name varchar(99)"

# db.select table=names | tr '|' ',' > ./tmp/Bjork_2015_names.csv
#+END_SRC
**** Mouginot 2019
#+BEGIN_SRC bash :results verbatim
g.mapset Mouginot_2019
db.select table=sectors | head
# v.out.ascii -c input=sectors output=./tmp/Mouginot_2019_names.csv columns=NAME,SUBREGION1
#+END_SRC


*** Elevation

+ h_0 (BedMachine v3) is assumed to be 2007
+ h_{\(\pm\) n} is based on elevation data from Shfaqat Abbas Khan. See [[file:${DATADIR}/Khan_2016/README.org]]
**** dh/dt
#+BEGIN_SRC bash :results verbatim
MSG_OK "dh/dt"

g.mapset -c Khan_2016
r.mask -r

g.region -d
g.region res=2000 -pa

FILE=${DATADIR}/Khan_2016/dhdt_1995-2015_GrIS.txt
head -n1 $FILE

cat << EOF > ./tmp/elev_filter.txt
TITLE     See r.mfilter manual
    MATRIX    3
    1 1 1
    1 1 1
    1 1 1
    DIVISOR   0
    TYPE      P
EOF

Y=1995 # debug
for Y in $(seq 1995 2015); do
  col=$(echo "$Y-1995+3" | bc -l)
  if [[ "" == $(g.list type=raster pattern=dh_${Y}) ]]; then
    # remove comments, leading spaces, and convert spaces to comma, swap lat,lon, then import
    cat ${FILE} | grep -v "^%" | sed s/^\ *//g | sed s/\ \ \*/,/g | cut -d"," -f1,2,${col} | awk -F, '{print $2 "|" $1 "|" $3}' | m.proj -i input=- | r.in.xyz input=- output=dh_${Y}_unfiltered
    r.mfilter -z input=dh_${Y}_unfiltered output=dh_${Y} filter=./tmp/elev_filter.txt repeat=2
    # r.resamp.filter input=dh_${Y}_filtered output=dh_${Y} filter=gauss radius=7
    # r.mfilter input=dh_${Y}_filtered output=dh_${Y} filter=./tmp/elev_filter.txt repeat=2
    r.colors map=dh_${Y} color=difference
  fi
done

# We don't have dh 2016 and 2017 - assume it is the same as 2015
# g.copy raster=dh_2015,dh_2016
# g.copy raster=dh_2015,dh_2017

# for Y in $(seq 1995 2015); do r.info dh_${Y}| grep "Range"; done
#+END_SRC

** Find Gates
:PROPERTIES:
:header-args:bash+: :tangle gate_IO.sh
:END:

*** Algorithm
+ [X] Find all fast-moving ice (>X m yr^{-1})
  + Results not very sensitive to velocity limit (10 to 100 m yr^{-1} examined)
+ [X] Find grounding line by finding edge cells where fast-moving ice borders water or ice shelf based (loosely) on BedMachine mask
+ [X] Move grounding line cells inland by X km, again limiting to regions of fast ice.
  + Results not very sensitive to gate position (1 - 5 km range examined)

+ [X] Discard gates if group size \in [1,2]
+ [X] Manually clean a few areas (e.g. land-terminating glaciers, gates due to invalid masks, etc.) by manually selecting invalid regions in Google Earth, then remove gates in these regions

Note that "fast ice" refers to flow velocity, not the sea ice term of "stuck to the land".

INSTRUCTIONS: Set VELOCITY_CUTOFF and BUFFER_DIST to 50 and 2500 respectively and run the code. Then repeat for a range of other velocity cutoffs and buffer distances to get a range of sensitivities.

OR: Tangle via ((org-babel-tangle) the code below (C-c C-v C-t or ) to [[./gate_IO.sh]] and then run this in a GRASS session:
#+BEGIN_SRC bash :results verbatim :tangle gate_IO_runner.sh
<<MSGS_pretty_print>>
<<GRASS_config>>

VELOCITY_CUTOFF=100
BUFFER_DIST=5000
. ./gate_IO.sh
#+END_SRC

Create a new mapset for this specific velocity cutoff and buffer distance

#+BEGIN_SRC bash :results verbatim
g.mapset -c gates_${VELOCITY_CUTOFF}_${BUFFER_DIST}
g.region -d
#+END_SRC

From above:

+ [X] Find grounding line by finding edge cells where fast-moving ice borders water or ice shelf based (loosely) on BedMachine mask

The "loosely" is because the BedMachine mask doesn't always reach into each fjord all the way. I buffer the BedMachine mask by 2 km here so that it extends to the edge of the velocity data.

#+BEGIN_SRC bash :results verbatim
g.copy raster=mask_ice@BedMachine,mask_ice --o
# Grow by 2 km (10 cells @ 200 m/cell)
r.grow input=mask_ice output=mask_ice_grow radius=10 new=1 --o
r.mask mask_ice_grow
#+END_SRC

The fast ice edge is where there is fast-flowing ice overlapping with not-ice.

#+BEGIN_SRC bash :results verbatim
r.mapcalc "fast_ice = if(vel_baseline@MEaSUREs.0478 > ${VELOCITY_CUTOFF}, 1, null())" --o
r.mask -r

# no velocity data, or is flagged as ice shelf or land in BedMachine
r.mapcalc "not_ice = if(isnull(vel_baseline@MEaSUREs.0478) ||| (mask@BedMachine == 0) ||| (mask@BedMachine == 3), 1, null())" --o

r.grow input=not_ice output=not_ice_grow radius=1.5 new=99 --o
r.mapcalc "fast_ice_edge = if(((not_ice_grow == 99) && (fast_ice == 1)), 1, null())" --o
#+END_SRC

The gates are set ${BUFFER_DIST} inland from the fast ice edge. This is done by buffering the fast ice edge (which fills the space between the fast ice edge and buffer extent) and then growing the buffer by 1. This last step defines the gate locations.

However, in order to properly estimate discharge, the gate location is not enough. Ice must flow from outside the gates, through the gates, to inside the gates, and not flow from one gate pixel to another gate pixel (or it would be counted 2x). 

#+BEGIN_SRC bash :results verbatim
r.buffer input=fast_ice_edge output=fast_ice_buffer distances=${BUFFER_DIST} --o
r.grow input=fast_ice_buffer output=fast_ice_buffer_grow radius=1.5 new=99 --o
r.mask -i not_ice --o
r.mapcalc "gates_inside = if(((fast_ice_buffer_grow == 99) && (fast_ice == 1)), 1, null())" --o
r.mask -r

r.grow input=gates_inside output=gates_inside_grow radius=1.1 new=99 --o
r.mask -i not_ice --o
r.mapcalc "gates_maybe = if(((gates_inside_grow == 99) && (fast_ice == 1) && isnull(fast_ice_buffer)), 1, null())" --o
r.mask -r

r.grow input=gates_maybe output=gates_maybe_grow radius=1.1 new=99 --o
r.mask -i not_ice --o
r.mapcalc "gates_outside = if(((gates_maybe_grow == 99) && (fast_ice == 1) && isnull(fast_ice_buffer) && isnull(gates_inside)), 1, null())" --o
r.mask -r

r.mapcalc "gates_IO = 0" --o
r.mapcalc "gates_IO = if(isnull(gates_inside), gates_IO, 1)" --o
r.mapcalc "gates_IO = if(isnull(gates_outside), gates_IO, -1)" --o

r.colors map=gates_inside color=red
r.colors map=gates_maybe color=grey
r.colors map=gates_outside color=blue
r.colors map=gates_IO color=viridis
#+END_SRC

+ For each gate, split into two for the vector components of the velocity, then...
+ If flow is from gate to INSIDE, it is discharged
+ If flow is from gate to GATE, it is ignored
+ If flow is from gate to NOT(GATE || INSIDE) it is ignored
  + If gates are a closed loop, such as the 1700 m flight-line, then
    this scenario would be NEGATIVE discharge, not ignored. This was
    tested with the 1700 m flight-line and compared against both the
    vector calculations and WIC estimates.

#+NAME: tbl_velocity
| var            | value  | meaning           |
|----------------+--------+-------------------|
| vx             | > 0    | east / right      |
| vx             | < 0    | west / left       |
| vy             | > 0    | north / up        |
| vy             | < 0    | south / down      |
|----------------+--------+-------------------|
| GRASS indexing | [0,1]  | cell to the right |
|                | [0,-1] | left              |
|                | [-1,0] | above             |
|                | [1,0]  | below             |

#+BEGIN_SRC bash :results verbatim
# g.mapset -c gates_50_2500

r.mask -r

r.mapcalc "gates_x = 0" --o
r.mapcalc "gates_x = if((gates_maybe == 1) && (vx_baseline@MEaSUREs.0478 > 0), gates_IO[0,1], gates_x)" --o
r.mapcalc "gates_x = if((gates_maybe != 0) && (vx_baseline@MEaSUREs.0478 < 0), gates_IO[0,-1], gates_x)" --o

r.mapcalc "gates_y = 0" --o
r.mapcalc "gates_y = if((gates_maybe != 0) && (vy_baseline@MEaSUREs.0478 > 0), gates_IO[-1,0], gates_y)" --o
r.mapcalc "gates_y = if((gates_maybe != 0) && (vy_baseline@MEaSUREs.0478 < 0), gates_IO[1,0], gates_y)" --o

r.mapcalc "gates_x = if(gates_x == 1, 1, 0)" --o
r.mapcalc "gates_y = if(gates_y == 1, 1, 0)" --o

r.null map=gates_x null=0 # OR r.null map=gates_x setnull=0
r.null map=gates_y null=0 # OR r.null map=gates_y setnull=0
#+END_SRC
*** Clean Gates                                                    :noexport:
**** Subset to where there is known discharge
#+BEGIN_SRC bash :results verbatim
r.mapcalc "gates_xy_clean0 = if((gates_x == 1) || (gates_y == 1), 1, null())" --o
#+END_SRC

**** Remove small areas (clusters <X cells)
#+BEGIN_SRC bash :results verbatim
# Remove clusters of 2 or less. How many hectares in X pixels?
# frink "(200 m)^2 * 2 -> hectares" # ans: 8.0

r.clump -d input=gates_xy_clean0 output=gates_gateID --o
r.reclass.area -d input=gates_gateID output=gates_area value=9 mode=lesser method=reclass --o

r.mapcalc "gates_xy_clean1 = if(isnull(gates_area), gates_xy_clean0, null())" --o
#+END_SRC


**** Limit to Mouginot 2019 mask
+ Actually, limit to approximate Mouginot 2019 mask - its a bit narrow in some places
#+BEGIN_SRC bash :results verbatim
# r.mask mask_GIC@Mouginot_2019 --o
r.grow input=mask_GIC@Mouginot_2019 output=mask_GIC_Mouginot_2019_grow radius=4.5 # three cells
r.mask mask_GIC_Mouginot_2019_grow --o
r.mapcalc "gates_xy_clean2 = gates_xy_clean1" --o
r.mask -r

# r.univar map=gates_xy_clean1
# r.univar map=gates_xy_clean2
#+END_SRC

**** Remove areas from manually-drawn KML mask
+ See [[./dat/remove_manual.kml]]
#+BEGIN_SRC bash :results verbatim
v.import input=./dat/remove_manual.kml output=remove_manual --o
r.mask -i vector=remove_manual --o
r.mapcalc "gates_xy_clean3 = gates_xy_clean2" --o
r.mask -r

r.univar map=gates_xy_clean2
r.univar map=gates_xy_clean3
#+END_SRC

*** Final Gates
#+BEGIN_SRC bash :results verbatim
g.copy "gates_xy_clean3,gates_final" --o
#+end_src

*** Add meta-data to gates
Add:
+ Gate ID
+ Calculate the average x,y of the gate, and then from that ONE point, determine the following. Do this from the average point rather than for each gate pixel because some gates span multiple sectors, or different ends of the gate are nearer different names, etc.
  + Average lon,lat of gate
  + Nearest citet:mouginot_2019_glacier region, sector, and name
  + Nearest citet:bjork_2015_brief name

Do this for both the area vector and the point vector so that we can export
+ KML and GeoPackage with gates and metadata
+ simple CSV w/ gates and metadata.

**** Gate ID
#+BEGIN_SRC bash :results verbatim

# db.droptable -f table=gates_final
# db.droptable -f table=gates_final_pts

# areas (clusters of gate pixels, but diagonals are separate)
r.to.vect input=gates_final output=gates_final type=area --o
v.db.dropcolumn map=gates_final column=label
v.db.dropcolumn map=gates_final column=value
v.db.addcolumn map=gates_final columns="gate INT"
v.what.rast map=gates_final raster=gates_gateID column=gate type=centroid

# # points (each individual gate pixel)
# r.to.vect input=gates_final output=gates_final_pts type=point --o
# v.db.dropcolumn map=gates_final_pts column=label
# v.db.dropcolumn map=gates_final_pts column=value
# v.db.addcolumn map=gates_final_pts columns="gate INT"
# v.what.rast map=gates_final_pts raster=gates_gateID column=gate type=point
#+END_SRC
**** Mean x,y
#+BEGIN_SRC bash :results verbatim
# v.db.addcolumn map=gates_final columns="x DOUBLE PRECSION, y DOUBLE PRECISION, mean_x INT, mean_y INT, area INT"
v.db.addcolumn map=gates_final columns="mean_x INT, mean_y INT"
v.to.db map=gates_final option=coor columns=x,y units=meters
v.to.db map=gates_final option=area columns=area units=meters

for G in $(db.select -c sql="select gate from gates_final"|sort -n|uniq); do
  db.execute sql="UPDATE gates_final SET mean_x=(SELECT AVG(x) FROM gates_final WHERE gate == ${G}) where gate == ${G}"
  db.execute sql="UPDATE gates_final SET mean_y=(SELECT AVG(y) FROM gates_final WHERE gate == ${G}) where gate == ${G}"
done

v.out.ascii -c input=gates_final columns=gate,mean_x,mean_y | cut -d"|" -f4- | sort -n|uniq | v.in.ascii input=- output=gates_final_pts skip=1 cat=1 x=2 y=3 --o
v.db.addtable gates_final_pts
v.db.addcolumn map=gates_final_pts columns="gate INT"
v.db.update map=gates_final_pts column=gate query_column=cat

#v.db.addcolumn map=gates_final_pts columns="mean_x INT, mean_y INT"
v.to.db map=gates_final_pts option=coor columns=mean_x,mean_y units=meters
#+END_SRC

Here we have:
#+BEGIN_SRC bash :results verbatim :tangle no
db.select table=gates_final|head -n10 # cat|gate|x|y|mean_x|mean_y
db.select table=gates_final_pts|head # cat|gate|mean_x|mean_y
#+END_SRC

**** Mean lon,lat
#+BEGIN_SRC bash :results verbatim
v.what.rast map=gates_final_pts raster=lon@PERMANENT column=lon
v.what.rast map=gates_final_pts raster=lat@PERMANENT column=lat

v.db.addcolumn map=gates_final columns="mean_lon DOUBLE PRECISION, mean_lat DOUBLE PRECISION"
for G in $(db.select -c sql="select gate from gates_final"|sort -n|uniq); do
    db.execute sql="UPDATE gates_final SET mean_lon=(SELECT lon FROM gates_final_pts WHERE gate = ${G}) where gate = ${G}"
    db.execute sql="UPDATE gates_final SET mean_lat=(SELECT lat FROM gates_final_pts WHERE gate = ${G}) where gate = ${G}"
done
#+END_SRC

**** Sector, Region, Names, etc.
+ Sector Number
+ Region Code
+ Nearest Sector or Glacier Name
#+BEGIN_SRC bash :results verbatim
v.db.addcolumn map=gates_final columns="sector INT"
v.db.addcolumn map=gates_final_pts columns="sector INT"
v.distance from=gates_final to=sectors@Mouginot_2019 upload=to_attr column=sector to_column=cat
v.distance from=gates_final_pts to=sectors@Mouginot_2019 upload=to_attr column=sector to_column=cat

v.db.addcolumn map=gates_final columns="region VARCHAR(2)"
v.db.addcolumn map=gates_final_pts columns="region VARCHAR(2)"
v.distance from=gates_final to=sectors@Mouginot_2019 upload=to_attr column=region to_column=SUBREGION1
v.distance from=gates_final_pts to=sectors@Mouginot_2019 upload=to_attr column=region to_column=SUBREGION1

v.db.addcolumn map=gates_final columns="Mouginot_2019 VARCHAR(99)"
v.db.addcolumn map=gates_final_pts columns="Mouginot_2019 VARCHAR(99)"
v.distance from=gates_final to=sectors@Mouginot_2019 upload=to_attr column=Mouginot_2019 to_column=NAME
v.distance from=gates_final_pts to=sectors@Mouginot_2019 upload=to_attr column=Mouginot_2019 to_column=NAME

v.db.addcolumn map=gates_final columns="Bjork_2015 VARCHAR(99)"
v.db.addcolumn map=gates_final_pts columns="Bjork_2015 VARCHAR(99)"
v.distance from=gates_final to=names@Bjork_2015 upload=to_attr column=Bjork_2015 to_column=name
v.distance from=gates_final_pts to=names@Bjork_2015 upload=to_attr column=Bjork_2015 to_column=name


v.db.addcolumn map=gates_final columns="n_pixels INT"
v.db.addcolumn map=gates_final_pts columns="n_pixels INT"
for G in $(db.select -c sql="select gate from gates_final"|sort -n|uniq); do
    db.execute sql="UPDATE gates_final SET n_pixels=(SELECT SUM(area)/(200*200) FROM gates_final WHERE gate = ${G}) where gate = ${G}"
    # now copy that to the average gate location (point) table
    db.execute sql="UPDATE gates_final_pts SET n_pixels = (SELECT n_pixels FROM gates_final WHERE gate = ${G}) WHERE gate = ${G}"
done
#+END_SRC
**** Clean up
#+BEGIN_SRC bash :results verbatim
db.dropcolumn -f table=gates_final column=area
# db.dropcolumn -f table=gates_final column=cat
#+END_SRC

**** Export as metadata CSV
#+BEGIN_SRC bash :results verbatim
mkdir -p out
db.select sql="SELECT gate,mean_x,mean_y,lon,lat,n_pixels,sector,region,Bjork_2015,Mouginot_2019 from gates_final_pts" separator=, | sort -n | uniq  > ./out/gate_meta.csv
zip ./out/gate_meta.csv.zip ./out/gate_meta.csv
rm ./out/gate_meta.csv
#+END_SRC

*** Export Gates to KML                                            :noexport:
#+BEGIN_SRC bash :results verbatim
v.out.ogr input=gates_final output=./tmp/gates_final_${VELOCITY_CUTOFF}_${BUFFER_DIST}.kml format=KML --o
# open ./tmp/gates_final_${VELOCITY_CUTOFF}_${BUFFER_DIST}.kml
#+END_SRC

*** Sensitivity of results to gate distance and cutoff velocity
:PROPERTIES:
:header-args:bash+: :tangle no
:END:

Run the gate detection algorithm at a variety of cutoff velocities and buffer distances
#+BEGIN_SRC bash :results verbatim :tangle no
for VELOCITY_CUTOFF in $(echo 10 20 30 40 50 60 70 80 90 100 125 150); do
  for BUFFER_DIST in $(echo 1000 2000 3000 4000 5000 6000 7000 8000 9000); do
      . ./gate_IO.sh
  done
done
#+END_SRC

**** Heatmap
***** Compute
#+BEGIN_SRC bash :results verbatim
rm ./tmp/gate_test.dat
for M in $(g.mapset -l | tr ' ' '\n' | grep gates); do
  g.mapset ${M} --quiet
  r.mask -r --quiet
  g.region -d

  ### To generate this heatmap for a sub-region or single glacier, PRIOR to
  ### this in PERMANENT mapset, zoom in, then "set computational region extent from display",
  ### then save w/ "g.region save=SUBREGION --o", then in the loop zoom in on each mapset with:
  # g.region res=200 align=vel_baseline@MEaSUREs.0478 -pa
  # g.region region=SUBREGION@PERMANENT --o -pa

  r.mapcalc "vel_eff = (if(gates_x == 1, abs(vx_baseline@MEaSUREs.0478), 0) + if(gates_y == 1, abs(vy_baseline@MEaSUREs.0478), 0))" --o
  r.mask gates_final --o
  # frink "(m/yr * m) * m * kg/m^3 * 1E12 -> Gt/yr"

  ### simple D w/ "raw" unadjusted thickness
  r.mapcalc "tmp_D = (vel_eff * 200) * thickness@BedMachine * 917 / pow(10.0, 12)" --o

  ### D w/ adjusted thickness
  # in BedMachine mapset, from the OLS fits.summary()
  # r.mapcalc "thick_fit_adj=if(thickness<20,380*log(vel_baseline@MEaSUREs.0478,10)-380,thickness)"
  # r.mapcalc "tmp_D = (vel_eff * 200) * thick_fit_adj@BedMachine * 917 / pow(10.0, 12)" --o

  r.univar tmp_D | grep sum
  echo ${M} $(r.univar tmp_D | grep sum) >> ./tmp/gate_test.dat
  g.remove -f type=raster name=tmp_D
done
#+END_SRC

#+BEGIN_SRC bash :results verbatim
cat ./tmp/gate_test.dat | sort
#+END_SRC

***** Display

#+BEGIN_SRC jupyter-python :session v_b_compare :exports results :results raw drawer :display text/org
# %matplotlib qt5
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from matplotlib import rc
rc('font', size=12)
rc('text', usetex=False)

df0 = pd.read_csv('./tmp/gate_test.dat', sep=" ", names=['param','D'], usecols=((0,2)), index_col=0)
vel = np.sort(np.unique([_.split('_')[1] for _ in df0.index.values.astype(str)]).astype(np.int))
buf = np.unique([_.split('_')[2] for _ in df0.index.values.astype(str)]).astype(np.int)
df = pd.DataFrame(columns=vel, index=buf)
for v in vel:
    for b in buf:
        idx='gates_'+str(v)+'_'+str(b)
        df.loc[b,v] = np.float(df0.loc[idx].values[0])

df = df.apply(pd.to_numeric)
df_int = df.apply(pd.to_numeric).round().astype(np.int)

fig = plt.figure(1, figsize=(8,6)) # w,h
fig.clf()
fig.set_tight_layout(True)
ax = fig.add_subplot(111)

sns.set()

im = sns.heatmap(df,
                 annot=df_int, annot_kws={"size":12},
                 vmin=440, vmax=490,
                 # vmin=470, vmax=510,
                 cbar_kws={'label':'Unadjusted Baseline Discharge [Gt yr$^{-1}$]'},
                           #, 'extend':'min'},
                           # "ticks":[470,480,490,500,510]},
                 fmt='d',
                 ax=ax)

plt.yticks(rotation=0)
ax.text(0.5, -0.1, 'Cutoff Velocity [m yr$^{-1}$]',
        transform=ax.transAxes, horizontalalignment='center')
ax.text(-0.14, 0.5, 'Distance from terminus [m]',
        rotation='vertical',
        transform=ax.transAxes, verticalalignment='center')

       
plt.savefig('./figs/heatmap_all.png', transparent=True, bbox_inches='tight', dpi=300)
plt.savefig('./figs/heatmap_all.pdf', bbox_inches='tight')

df.round()
#+END_SRC

** Effective Velocity
:PROPERTIES:
:header-args:bash+: :tangle vel_eff.sh
:END:

#+BEGIN_SRC bash :results verbatim
<<MSGS_pretty_print>>
<<GRASS_config>>
#+END_SRC


*** NOTDONE All Mapsets
Effective velocity (because gates may only be valid in =x= or =y= direction) was calculated for the sensitivity test above at one time, but for all gate locations (buffer dist and speed cutoff). Now we need to calculate it at all times

#+BEGIN_SRC bash :results verbatim :tangle no
g.mapsets gates_100_5000
r.mask -r

mapset=$(g.mapset -l | tr ' ' '\n' | grep -E gates_??_????| head -n1) # DEBUG
for mapset in $(g.mapset -l | tr ' ' '\n' | grep -E gates_??_????); do
  g.mapset ${mapset} --quiet

  g.region -d
  r.mapcalc "MASK = if((gates_x == 1) | (gates_y == 1), 1, null())" --o
  VX=$(g.list -m type=raster pattern=VX_????_??_?? mapset=* | head -n1) # DEBUG
  for VX in $(g.list -m type=raster pattern=VX_????_??_?? mapset=*); do
    VY=${VX/VX/VY}
    EX=${VX/VX/EX}
    EY=${VX/VX/EY}
    DATE=$(echo $VX | cut -d"_" -f2- | cut -d@ -f1)
    echo $DATE
    r.mapcalc "vel_eff_${DATE} = if(gates_x == 1, if(${VX} == -2*10^9, 0, abs(${VX})), 0) + if(gates_y, if(${VY} == -2*10^9, 0, abs(${VY})), 0)"
    r.mapcalc "err_eff_${DATE} = if(gates_x@gates_50_2500 == 1, if(${EX} == -2*10^9, 0, abs(${EX})), 0) + if(gates_y@gates_50_2500, if(${EY} == -2*10^9, 0, abs(${EY})), 0)"
  done

  VX=$(g.list -m type=raster pattern=vx_????_??_?? mapset=Sentinel1 | head -n1) # DEBUG
  for VX in $(g.list -m type=raster pattern=vx_????_??_?? mapset=Sentinel1); do
    VY=${VX/vx/vy}
    EX=${VX/vx/ex}
    EY=${VX/vx/ey}
    DATE=$(echo $VX | cut -d"_" -f2- | cut -d@ -f1)
    echo $DATE
    r.mapcalc "vel_eff_${DATE} = 365 * (if(gates_x@gates_50_2500 == 1, if(isnull(${VX}), 0, abs(${VX}))) + if(gates_y@gates_50_2500, if(isnull(${VY}), 0, abs(${VY}))))"
    r.mapcalc "err_eff_${DATE} = 365 * (if(gates_x@gates_50_2500 == 1, if(isnull(${EX}), 0, abs(${EX}))) + if(gates_y@gates_50_2500, if(isnull(${EY}), 0, abs(${EY}))))"
  done
done


#+END_SRC

*** Just one velocity cutoff & buffer distance 
#+BEGIN_SRC bash :results verbatim
g.mapsets -l

r.mask -r

MAPSET=gates_100_5000

g.mapset MEaSUREs.0478
g.region -d
r.mapcalc "MASK = if((gates_x@${MAPSET} == 1) | (gates_y@${MAPSET} == 1), 1, null())" --o
VX=$(g.list type=raster pattern=VX_????_??_?? | head -n1) # DEBUG
VX=$(g.list type=raster pattern=VX_????_??_?? | grep 2012_03_03) # DEBUG
for VX in $(g.list type=raster pattern=VX_????_??_??); do
  VY=${VX/VX/VY}
  EX=${VX/VX/EX}
  EY=${VX/VX/EY}
  DATE=$(echo $VX | cut -d"_" -f2-)
  echo $DATE
  # g.region raster=${VX}
  r.mapcalc "vel_eff_${DATE} = if(gates_x@${MAPSET} == 1, if(${VX} == -2*10^9, 0, abs(${VX})), 0) + if(gates_y@${MAPSET}, if(${VY} == -2*10^9, 0, abs(${VY})), 0)"
  r.mapcalc "err_eff_${DATE} = if(gates_x@${MAPSET} == 1, if(${EX} == -2*10^9, 0, abs(${EX})), 0) + if(gates_y@${MAPSET}, if(${EY} == -2*10^9, 0, abs(${EY})), 0)"
done


g.mapset MEaSUREs.0646
g.region -d
r.mapcalc "MASK = if((gates_x@${MAPSET} == 1) | (gates_y@${MAPSET} == 1), 1, null())" --o
VX=$(g.list type=raster pattern=VX_????_??_?? | head -n1) # DEBUG
for VX in $(g.list type=raster pattern=VX_????_??_??); do
  VY=${VX/VX/VY}
  EX=${VX/VX/EX}
  EY=${VX/VX/EY}
  DATE=$(echo $VX | cut -d"_" -f2-)
  echo $DATE
  r.mapcalc "vel_eff_${DATE} = if(gates_x@${MAPSET} == 1, if(isnull(${VX}), 0, abs(${VX}))) + if(gates_y@${MAPSET}, if(isnull(${VY}), 0, abs(${VY})))"
  r.mapcalc "err_eff_${DATE} = if(gates_x@${MAPSET} == 1, if(isnull(${EX}), 0, abs(${EX}))) + if(gates_y@${MAPSET}, if(isnull(${EY}), 0, abs(${EY})))"
done


g.mapset MEaSUREs.0731
g.region -d
r.mapcalc "MASK = if((gates_x@${MAPSET} == 1) | (gates_y@${MAPSET} == 1), 1, null())" --o
VX=$(g.list type=raster pattern=VX_????_??_?? | head -n1) # DEBUG
for VX in $(g.list type=raster pattern=VX_????_??_??); do
  VY=${VX/VX/VY}
  EX=${VX/VX/EX}
  EY=${VX/VX/EY}
  DATE=$(echo $VX | cut -d"_" -f2-)
  echo $DATE
  r.mapcalc "vel_eff_${DATE} = if(gates_x@${MAPSET} == 1, if(isnull(${VX}), 0, abs(${VX}))) + if(gates_y@${MAPSET}, if(isnull(${VY}), 0, abs(${VY})))"
  r.mapcalc "err_eff_${DATE} = if(gates_x@${MAPSET} == 1, if(isnull(${EX}), 0, abs(${EX}))) + if(gates_y@${MAPSET}, if(isnull(${EY}), 0, abs(${EY})))"
done


g.mapset Sentinel1
g.region -d
r.mapcalc "MASK = if((gates_x@${MAPSET} == 1) | (gates_y@${MAPSET} == 1), 1, null())" --o
VX=$(g.list type=raster pattern=vx_????_??_?? | head -n1) # DEBUG
for VX in $(g.list type=raster pattern=vx_????_??_??); do
  VY=${VX/vx/vy}
  EX=${VX/vx/ex}
  EY=${VX/vx/ey}
  DATE=$(echo $VX | cut -d"_" -f2-)
  echo $DATE
  r.mapcalc "vel_eff_${DATE} = 365 * (if(gates_x@${MAPSET} == 1, if(isnull(${VX}), 0, abs(${VX}))) + if(gates_y@${MAPSET}, if(isnull(${VY}), 0, abs(${VY}))))"
  r.mapcalc "err_eff_${DATE} = 365 * (if(gates_x@${MAPSET} == 1, if(isnull(${EX}), 0, abs(${EX}))) + if(gates_y@${MAPSET}, if(isnull(${EY}), 0, abs(${EY}))))"
done

g.mapset Mouginot_pre2000
g.region -d
r.mapcalc "MASK = if((gates_x@${MAPSET} == 1) | (gates_y@${MAPSET} == 1), 1, null())" --o
VX=$(g.list type=raster pattern=vx_????_??_?? | head -n1) # DEBUG
for VX in $(g.list type=raster pattern=vx_????_??_??); do
  VY=${VX/vx/vy}
  DATE=$(echo $VX | cut -d"_" -f2-)
  echo $DATE
  r.mapcalc "vel_eff_${DATE} = (if(gates_x@${MAPSET} == 1, if(isnull(${VX}), 0, abs(${VX}))) + if(gates_y@${MAPSET}, if(isnull(${VY}), 0, abs(${VY}))))"
done

# fix return code of this script so make continues
MSG_OK "vel_eff DONE" 
#+END_SRC

** Export all data to CSV
:PROPERTIES:
:header-args:bash+: :tangle export.sh
:END:

#+BEGIN_SRC bash :results verbatim
<<MSGS_pretty_print>>
<<GRASS_config>>
#+END_SRC

#+BEGIN_SRC bash :results output
MSG_OK "Exporting..."
g.mapset PERMANENT
g.region -dp

MAPSET=gates_100_5000

VEL_baseline=vel_baseline@MEaSUREs.0478,vx_baseline@MEaSUREs.0478,vy_baseline@MEaSUREs.0478,vel_err_baseline@MEaSUREs.0478,ex_baseline@MEaSUREs.0478,ey_baseline@MEaSUREs.0478
VEL_0478=$(g.list -m mapset=MEaSUREs.0478 type=raster pattern=vel_eff_????_??_?? separator=,)
ERR_0478=$(g.list -m mapset=MEaSUREs.0478 type=raster pattern=err_eff_????_??_?? separator=,)
VEL_0646=$(g.list -m mapset=MEaSUREs.0646 type=raster pattern=vel_eff_????_??_?? separator=,)
ERR_0646=$(g.list -m mapset=MEaSUREs.0646 type=raster pattern=err_eff_????_??_?? separator=,)
VEL_0731=$(g.list -m mapset=MEaSUREs.0731 type=raster pattern=vel_eff_????_??_?? separator=,)
ERR_0731=$(g.list -m mapset=MEaSUREs.0731 type=raster pattern=err_eff_????_??_?? separator=,)
VEL_SENTINEL=$(g.list -m mapset=Sentinel1 type=raster pattern=vel_eff_????_??_?? separator=,)
ERR_SENTINEL=$(g.list -m mapset=Sentinel1 type=raster pattern=err_eff_????_??_?? separator=,)
VEL_MOUGINOT=$(g.list -m mapset=Mouginot_pre2000 type=raster pattern=vel_eff_????_??_?? separator=,)
THICK=$(g.list -m mapset=Khan_2016 type=raster pattern=dh_???? separator=,)
GIMP_0715=dem@GIMP.0715,day@GIMP.0715 # ,err@GIMP.0715

LIST=lon,lat,err_2D,gates_x@${MAPSET},gates_y@${MAPSET},gates_gateID@${MAPSET},sectors@Mouginot_2019,regions@Mouginot_2019,bed@BedMachine,thickness@BedMachine,surface@BedMachine,thickness@Bamber_2013,bed_0@Millan_2018,thickness_0@Millan_2018,${THICK},${GIMP_0715},${VEL_baseline},${VEL_0478},${VEL_0646},${VEL_0731},${VEL_SENTINEL},${VEL_MOUGINOT},errbed@BedMachine,${ERR_0478},${ERR_0646},${ERR_0731},${ERR_SENTINEL}

r.mask gates_final@${MAPSET} --o

# test
# parallel 'n=$(r.univar --q {}|grep "^n:"); echo {}: ${n}' ::: $(echo $LIST | tr ',' '\n')

date
MSG_WARN "Exporting: $(echo $LIST|tr ',' '\n' |wc -l) columns"
ulimit -n 4096
time (echo x,y,${LIST}; r.out.xyz input=${LIST} separator=comma) > ./tmp/dat_100_5000.csv
r.mask -r
#+END_SRC

** Compute Errors
:PROPERTIES:
:header-args:jupyter-python+: :tangle errors.py
:END:

*** Velocity v Thickness Errors
+ Is velocity uncertainty important relative to thickness uncertainty?
  + ANS: No, proportional velocity uncertainty is an order of magnitude less than thickness uncertainty.
#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/plain :tangle no
import pandas as pd
import numpy as np

df = pd.read_csv("./tmp/dat_100_5000.csv")

thick = df['thickness@BedMachine'].copy()
thick[thick < 50] = 50  # IS THIS REASONABLE? IMPORTANT?
thick[thick == 0] = 1
thick_err = np.abs(df['errbed@BedMachine'].values)


vel = df['vel_baseline@MEaSUREs.0478']
vel_err = df['vel_err_baseline@MEaSUREs.0478']

print("Relative thickness error:")
print((thick_err/thick*100).describe())
print("\n\nRelative velocity error:")
print((vel_err/vel*100).describe())

# import matplotlib.pyplot as plt
# plt.clf()
# ax = plt.hexbin((thick_err/thick), (vel_err/vel), mincnt=1, bins='log', xscale='log', yscale='log')
# plt.xlabel('Relative Thickness Error [Log_10]')
# plt.ylabel('Relative Velocity Error [Log_10]')
#+END_SRC

*** Do velocity errors scale w/ velocity?
+ ANS: Not really.
#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/plain :tangle no
import pandas as pd
import numpy as np
import datetime

# df = pd.read_csv("./tmp/dat_100_5000.csv")
# vel = df['vel_baseline@MEaSUREs.0478']
# vel_err = df['vel_err_baseline@MEaSUREs.0478']


vel = pd.read_csv("./tmp/dat_100_5000.csv", usecols=(lambda c: ('vel_eff' in c)))
vel.rename(columns=lambda c: datetime.datetime(int(c[8:12]), int(c[13:15]), int(c[16:18])), inplace=True)
vel.replace(0, np.nan, inplace=True)
# vel = vel.loc[:,vel.columns.year < 2018] # drop 2018
vel.sort_index(axis='columns', inplace=True)

vel_err = pd.read_csv("./tmp/dat_100_5000.csv", usecols=(lambda c: ('err_eff' in c)))
vel_err.rename(columns=lambda c: datetime.datetime(int(c[8:12]), int(c[13:15]), int(c[16:18])), inplace=True)
# vel_err = vel_err.loc[:,vel_err.columns.year < 2018] # drop 2018
for c in vel.columns:
    if c not in vel_err.columns:
        vel_err[c] = 0 
vel_err.sort_index(axis='columns', inplace=True) 


import matplotlib.pyplot as plt
plt.clf()
ax = plt.hexbin(vel.values.flatten()+1,
                vel_err.values.flatten()+1,
                mincnt=1,
                bins='log',
                xscale='log', yscale='log',
                gridsize=100)
plt.xlabel("Velocity [m yr$^{-1}$]")
plt.ylabel("Velocity Error [m yr$^{-1}$]")
#+END_SRC

*** Results (GIS)
#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/org :tangle no :eval no-export
from uncertainties import unumpy
import pandas as pd
import numpy as np

df_out = pd.DataFrame(columns=['Val','Unit'])
df_out.index.name = 'Method'

df = pd.read_csv("./tmp/dat_100_5000.csv")

thick = df['thickness@BedMachine']
# thick[thick < 50] = 50  # IS THIS REASONABLE? IMPORTANT?
# vel = df['vel_baseline@MEaSUREs.0478']
vel = np.abs(df['vx_baseline@MEaSUREs.0478'])*df['gates_x@gates_100_5000'] + np.abs(df['vy_baseline@MEaSUREs.0478'])*df['gates_y@gates_100_5000']
D = 200  * thick * vel * 917 / 1E12
df_out.loc['D'] = [np.sum(D), 'Gt']

err_thick = np.abs(df['errbed@BedMachine'].values)
# err_vel = np.abs(df['vel_err_baseline@MEaSUREs.0478'])
err_vel = np.abs(df['ex_baseline@MEaSUREs.0478'])*df['gates_x@gates_100_5000'] + np.abs(df['ey_baseline@MEaSUREs.0478'])*df['gates_y@gates_100_5000']

e_th = 200 * err_thick * vel * 917 / 1E12
df_out.loc['Err (Thickness)'] = [np.sum(e_th), 'Gt']
df_out.loc['Err (Thickness %)'] = [np.sum(e_th)/np.sum(D)*100, '%']

e_vel = 200 * thick * err_vel * 917 / 1E12
df_out.loc['Err (Velocity)'] = [np.sum(e_vel), 'Gt']
df_out.loc['Err (Velocity %)'] = [np.sum(e_vel)/np.sum(D)*100, '%']
df_out.loc['Err (Combined)'] = [np.sum(e_vel+e_th), 'Gt']
df_out.loc['Err (%)'] = [np.sum(e_vel+e_th)/np.sum(D)*100, '%']
# The above assumes everything is systematic/independent/correlated

# If errors are all random and uncorrelated:
t = unumpy.uarray(thick, err_thick)
v = unumpy.uarray(vel, err_vel)
e = np.sum(200 * t * v * 917 / 1E12)
df_out.loc['Random Errors'] = [e, 'Gt']
df_out.loc['Random Errors (%)'] = [e.s/e.n*100, '%']

df_out
#+END_SRC

#+RESULTS:
| Method            |                 Val | Unit |
|-------------------+---------------------+------|
| D                 |   471.5426188537758 | Gt   |
| Err (Thickness)   |   50.18996460822251 | Gt   |
| Err (Thickness %) |   10.64378119844694 | %    |
| Err (Velocity)    |  3.2451848262508327 | Gt   |
| Err (Velocity %)  |  0.6882060489334383 | %    |
| Err (Combined)    |  53.435149434473345 | Gt   |
| Err (%)           |  11.331987247380379 | %    |
| Random Errors     |         471.5+/-1.4 | Gt   |
| Random Errors (%) | 0.28888822450030804 | %    |

*** Results (Mouginot 2019 Sector)
#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/org :eval no-export
from uncertainties import unumpy
import pandas as pd
import numpy as np

df = pd.read_csv("./tmp/dat_100_5000.csv")

err_sector = pd.DataFrame(columns=['D', 'E', 'E%'])
err_sector.index.name = 'Sector'

sectors = np.unique(df['sectors@Mouginot_2019'].values)
for s in sectors:
    sub = df[df['sectors@Mouginot_2019'] == s]
    thick = sub['thickness@BedMachine']
    vel = sub['vel_baseline@MEaSUREs.0478']
    # vel = np.abs(sub['vx_baseline@MEaSUREs.0478'])*sub['gates_x@gates_100_5000'] + np.abs(sub['vy_baseline@MEaSUREs.0478'])*sub['gates_y@gates_100_5000']
    D = 200  * thick * vel * 917 / 1E12
    err_thick = np.abs(sub['errbed@BedMachine'].values)
    # err_thick[np.where(err_thick < 50)] = 50  # IS THIS REASONABLE? IMPORTANT?
    e_th = 200 * err_thick * vel * 917 / 1E12
    err_sector.loc[s] = [np.sum(D), np.sum(e_th), np.round(np.sum(e_th),10)/np.round(np.sum(D),10)*100]

err_sector.loc['GIS'] = np.sum(err_sector, axis=0)
err_sector.loc['GIS']['E%'] = err_sector.loc['GIS']['E']/err_sector.loc['GIS']['D']*100

err_sector.to_csv('./tmp/err_sector_mouginot.csv')

err_sector.rename(columns = {'D':'D [Gt]',
                             'E':'Error [Gt]',
                             'E%':'Error [%]'}, inplace=True)

err_sector
#+END_SRC

#+RESULTS:
| Sector |      D [Gt] | Error [Gt] | Error [%] |
|--------+-------------+------------+-----------|
|      1 |     1.13296 |   0.119511 |   10.5486 |
|      2 |    0.254923 |   0.105848 |   41.5214 |
|      3 |     13.9562 |   0.900377 |   6.45147 |
|      4 |     1.81572 |   0.268763 |    14.802 |
|      6 |     5.98601 |   0.394399 |   6.58867 |
|      7 |    0.759871 |  0.0538301 |   7.08411 |
|      8 |    0.633468 |  0.0446303 |   7.04539 |
|      9 |     8.93733 |   0.687491 |   7.69236 |
|     10 |      1.9844 |   0.151168 |   7.61786 |
|     14 |     3.07864 |   0.314741 |   10.2234 |
|     15 |    0.450661 |  0.0507318 |   11.2572 |
|     16 |     5.03681 |   0.523718 |   10.3978 |
|     19 |    0.117655 |  0.0335031 |   28.4758 |
|     20 |    0.442004 |  0.0382464 |   8.65295 |
|     21 |    0.840605 |  0.0942844 |   11.2163 |
|     22 |    0.790089 |   0.132326 |   16.7482 |
|     23 |     1.15269 |   0.124484 |   10.7995 |
|     25 |   0.0965041 |  0.0129959 |   13.4666 |
|     26 |     1.01834 |   0.059183 |   5.81173 |
|     27 |     5.77916 |   0.247833 |    4.2884 |
|     28 |    0.625812 |  0.0235983 |   3.77083 |
|     29 |     1.90881 |   0.122375 |   6.41102 |
|     30 |     1.74212 |   0.139962 |   8.03402 |
|     31 |    0.721142 |  0.0574444 |   7.96576 |
|     32 |     5.22645 |   0.365244 |   6.98839 |
|     33 |     8.06032 |   0.898265 |   11.1443 |
|     34 |     4.34442 |   0.386386 |   8.89385 |
|     35 |     5.34555 |   0.647521 |   12.1133 |
|     36 |     4.44943 |   0.395877 |   8.89724 |
|     37 |     7.77054 |   0.390137 |   5.02072 |
|     38 |     4.75347 |   0.543275 |    11.429 |
|     41 |     2.88232 |   0.239682 |    8.3156 |
|     42 |     1.01876 |  0.0664516 |    6.5228 |
|     43 |     6.58074 |   0.265285 |   4.03123 |
|     44 |    0.996849 |  0.0583816 |   5.85661 |
|     45 |    0.841672 |  0.0732469 |   8.70255 |
|     47 |     1.63371 |   0.207228 |   12.6845 |
|     48 |     2.46628 |   0.362852 |   14.7125 |
|     49 |    0.785023 |  0.0331364 |   4.22108 |
|     50 |     5.78814 |   0.330976 |   5.71817 |
|     53 |     3.06926 |   0.162114 |   5.28187 |
|     55 |    0.129045 |  0.0216342 |   16.7648 |
|     56 |    0.416233 |  0.0805611 |   19.3548 |
|     58 |     12.4341 |   0.652429 |   5.24708 |
|     59 |     14.1655 |    1.44915 |   10.2302 |
|     60 |     8.84446 |   0.639192 |   7.22703 |
|     61 |    0.553378 |  0.0977556 |   17.6652 |
|     62 |    0.639435 |  0.0253148 |   3.95893 |
|     63 |     28.3613 |    2.23295 |   7.87322 |
|     64 |     4.64096 |   0.561211 |   12.0926 |
|     65 |     4.40276 |   0.158794 |   3.60668 |
|     66 | 0.000223683 |  0.0378539 |     16923 |
|     67 |  0.00503859 |    0.64676 |   12836.1 |
|     68 |     3.70874 |   0.836823 |   22.5635 |
|     69 |     1.87811 |   0.178538 |   9.50626 |
|     72 |     1.39015 |   0.114702 |   8.25104 |
|     73 |  0.00307288 |   0.549584 |     17885 |
|     74 |      4.2916 |   0.521755 |   12.1576 |
|     75 |    0.117939 |  0.0329024 |   27.8978 |
|     76 |     1.66594 |    0.28158 |   16.9022 |
|     77 | 0.000443706 |   0.060892 |   13723.5 |
|     78 |     1.72598 |     0.1312 |   7.60148 |
|     80 |      7.8069 |   0.644373 |   8.25389 |
|     81 |     7.33425 |   0.611139 |   8.33267 |
|     82 |     1.31302 |  0.0833806 |   6.35031 |
|     83 |     4.44366 |   0.603423 |   13.5794 |
|     84 |     1.57504 |   0.253256 |   16.0794 |
|     86 |     7.30662 |   0.765899 |   10.4823 |
|     88 |  0.00275237 |    0.19056 |    6923.5 |
|     93 |     2.68238 |   0.223059 |   8.31571 |
|     94 |     1.19422 |   0.344398 |   28.8389 |
|     95 |     11.2367 |   0.304892 |   2.71337 |
|     96 |     5.30953 |   0.909599 |   17.1314 |
|     97 |  0.00490425 |  0.0141609 |   288.746 |
|     98 |     1.46695 |   0.233396 |   15.9102 |
|    100 |    0.248149 |   0.164958 |   66.4752 |
|    102 |     22.8012 |     1.8543 |   8.13244 |
|    103 |    0.362388 |   0.038987 |   10.7584 |
|    104 |    0.635742 |  0.0934609 |   14.7011 |
|    105 |   0.0713579 |  0.0121074 |   16.9672 |
|    106 |     14.7017 |    0.70068 |   4.76598 |
|    107 |     4.15737 |   0.349785 |   8.41361 |
|    108 |    0.510391 |   0.116783 |   22.8811 |
|    109 |    0.045015 |  0.0362538 |   80.5373 |
|    110 |    0.389191 |  0.0215441 |   5.53562 |
|    111 |  0.00115479 |   0.119557 |   10353.1 |
|    112 | 6.05528e-05 | 0.00906305 |   14967.2 |
|    113 |   0.0639219 |   0.370122 |   579.022 |
|    114 |     1.65272 |   0.167552 |   10.1379 |
|    115 |    0.994759 |   0.233459 |   23.4689 |
|    116 | 0.000509676 |  0.0818634 |   16061.8 |
|    117 |     4.43129 |    0.47649 |   10.7529 |
|    118 |  0.00128358 |   0.245275 |   19108.7 |
|    120 |    0.419347 |    0.12187 |   29.0619 |
|    121 |     1.23718 |   0.290739 |      23.5 |
|    122 |  0.00250193 |   0.422061 |   16869.5 |
|    123 |  0.00050518 |  0.0359559 |   7117.45 |
|    124 |    0.002328 |   0.330146 |   14181.5 |
|    125 |     1.21532 |   0.102551 |   8.43823 |
|    126 |     1.60821 |   0.247405 |   15.3839 |
|    127 |     9.07181 |   0.456823 |   5.03563 |
|    128 |  0.00252363 |   0.401012 |   15890.3 |
|    132 |    0.193755 |   0.154766 |   79.8771 |
|    134 |     1.52012 |    1.21553 |   79.9626 |
|    136 | 0.000397048 |   0.099331 |   25017.4 |
|    138 |    0.032685 |  0.0221705 |   67.8307 |
|    139 |    0.100994 |  0.0370782 |   36.7134 |
|    140 |    0.301306 |   0.141927 |   47.1041 |
|    141 |   0.0565944 |  0.0282081 |   49.8425 |
|    142 |   0.0668502 |  0.0335327 |    50.161 |
|    144 |  0.00146915 |  0.0144612 |   984.321 |
|    146 |    0.278089 |  0.0226055 |   8.12888 |
|    147 |     2.18806 |   0.233926 |    10.691 |
|    148 |     1.27653 |  0.0910306 |   7.13111 |
|    150 |   0.0918815 |  0.0320071 |   34.8352 |
|    151 |    0.427981 |  0.0843866 |   19.7174 |
|    152 |    0.141149 |  0.0516591 |   36.5991 |
|    153 |    0.254032 |   0.113703 |   44.7595 |
|    154 |    0.532234 |   0.170229 |   31.9839 |
|    156 |  0.00108883 |   0.164682 |   15124.7 |
|    157 |   0.0766498 |  0.0374593 |   48.8708 |
|    158 |    0.353257 |  0.0633385 |   17.9299 |
|    164 |    0.030944 |  0.0396854 |   128.249 |
|    172 |  0.00740499 |  0.0262357 |   354.298 |
|    174 | 0.000183178 |   0.021491 |   11732.3 |
|    183 |     0.33767 |  0.0574514 |   17.0141 |
|    185 |    0.528683 |  0.0885119 |    16.742 |
|    186 |    0.683322 |   0.537818 |   78.7063 |
|    188 |  0.00299054 |  0.0192545 |   643.848 |
|    189 |     7.11456 |   0.385537 |   5.41899 |
|    190 |     4.65674 |    1.72775 |   37.1021 |
|    191 |  0.00025485 |  0.0533937 |     20951 |
|    192 |      4.4188 |   0.249871 |   5.65474 |
|    193 |     2.19751 |   0.124156 |   5.64983 |
|    195 |    0.267033 |  0.0566183 |   21.2027 |
|    196 |   0.0148698 | 0.00933636 |   62.7874 |
|    197 |    0.694158 |   0.125963 |   18.1461 |
|    199 |    0.453779 |   0.560361 |   123.488 |
|    200 |  0.00254369 |  0.0430946 |   1694.18 |
|    203 |    0.897733 |   0.108282 |   12.0618 |
|    204 |  0.00338184 |  0.0175625 |   519.317 |
|    207 |     6.61744 |   0.820205 |   12.3946 |
|    208 |     2.84014 |   0.226375 |   7.97057 |
|    209 |     0.83978 |   0.134441 |   16.0091 |
|    210 |    0.681866 |   0.130944 |   19.2038 |
|    211 |      2.8354 |   0.274688 |    9.6878 |
|    212 |     5.53488 |   0.422405 |   7.63169 |
|    213 |     4.61738 |   0.480633 |   10.4092 |
|    214 |     8.98708 |   0.918741 |   10.2229 |
|    215 |   0.0391676 |   0.073413 |   187.433 |
|    216 |     0.54006 |  0.0775712 |   14.3634 |
|    218 |     50.4639 |    4.61404 |   9.14324 |
|    219 |    0.176467 |  0.0420522 |   23.8301 |
|    222 |   0.0923766 |  0.0527156 |   57.0659 |
|    223 |     11.2588 |   0.472191 |   4.19398 |
|    224 |    0.494333 |   0.256009 |   51.7889 |
|    231 |    0.966708 |   0.117179 |   12.1214 |
|    232 | 0.000299178 |  0.0636515 |   21275.5 |
|    233 |     4.57801 |   0.342675 |   7.48524 |
|    234 |   0.0208636 |  0.0146862 |   70.3915 |
|    236 | 0.000372432 |  0.0693781 |   18628.4 |
|    237 |    0.122571 |   0.357291 |   291.497 |
|    239 |   0.0939576 |  0.0281907 |   30.0036 |
|    240 |   0.0990675 |  0.0231812 |   23.3994 |
|    243 |     1.80218 |   0.272452 |   15.1179 |
|    248 |     5.14003 |   0.219126 |   4.26313 |
|    249 |     1.14112 |   0.119979 |   10.5142 |
|    251 |  0.00946236 |  0.0059137 |   62.4971 |
|    252 |  0.00391211 | 0.00454773 |   116.248 |
|    254 |   0.0800955 |  0.0389183 |   48.5899 |
|    255 |    0.936375 |  0.0962841 |   10.2826 |
|    257 | 0.000597703 |  0.0791324 |   13239.4 |
|    259 | 0.000308847 |  0.0471869 |   15278.4 |
|    GIS |     472.177 |     50.082 |   10.6066 |

*** Results (Mouginot 2019 Region)
#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/org :eval no-export
from uncertainties import unumpy
import pandas as pd
import numpy as np

df = pd.read_csv("./tmp/dat_100_5000.csv")

err_sector = pd.DataFrame(columns=['D','E', 'E%'])
err_sector.index.name = 'Sector'

sectors = np.unique(df['regions@Mouginot_2019'].values)
for s in sectors:
   sub = df[df['regions@Mouginot_2019'] == s]
   thick = sub['thickness@BedMachine']
   vel = np.abs(sub['vx_baseline@MEaSUREs.0478'])*sub['gates_x@gates_100_5000'] + np.abs(sub['vy_baseline@MEaSUREs.0478'])*sub['gates_y@gates_100_5000']
   D = 200  * thick * vel * 917 / 1E12
   err_thick = np.abs(sub['errbed@BedMachine'].values)
   # err_thick[np.where(err_thick < 50)] = 50  # IS THIS REASONABLE? IMPORTANT?
   e_th = 200 * err_thick * vel * 917 / 1E12
   err_sector.loc[s] = [np.sum(D), np.sum(e_th), np.round(np.sum(e_th),10)/np.round(np.sum(D),10)*100]

err_sector.loc['GIS'] = np.sum(err_sector, axis=0)
err_sector.loc['GIS']['E%'] = err_sector.loc['GIS']['E']/err_sector.loc['GIS']['D']*100

err_sector.to_csv('./tmp/err_region_mouginot.csv')

err_sector.rename(columns = {'D':'D [Gt]', 
                         'E':'Error [Gt]',
                         'E%':'Error [%]'}, inplace=True)

err_sector
#+END_SRC

#+RESULTS:
| Sector |  D [Gt] | Error [Gt] | Error [%] |
|--------+---------+------------+-----------|
|      1 | 24.2756 |    1.83611 |   7.56358 |
|      2 | 27.1697 |    2.40068 |   8.83588 |
|      3 | 68.2741 |    7.47249 |   10.9448 |
|      4 | 134.125 |    17.5465 |   13.0823 |
|      5 | 14.2328 |    3.05582 |   21.4702 |
|      6 | 88.0896 |    7.54673 |   8.56711 |
|      7 | 115.376 |    10.3316 |   8.95473 |
|    GIS | 471.543 |      50.19 |   10.6438 |

*** Results (Gate)                                                 :noexport:
#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/org :eval no-export
from uncertainties import unumpy
import pandas as pd
import numpy as np

df = pd.read_csv("./tmp/dat_100_5000.csv")

err_gate = pd.DataFrame(columns=['D','E', 'E%'])
err_gate.index.name = 'Gate'

gates = np.unique(df['gates_gateID@gates_100_5000'].values)
for g in gates:
    sub = df[df['gates_gateID@gates_100_5000'] == g]
    thick = sub['thickness@BedMachine']
    vel = np.abs(sub['vx_baseline@MEaSUREs.0478'])*sub['gates_x@gates_100_5000'] + np.abs(sub['vy_baseline@MEaSUREs.0478'])*sub['gates_y@gates_100_5000']
    D = 200  * thick * vel * 917 / 1E12
    err_thick = np.abs(sub['errbed@BedMachine'].values)
    # err_thick[np.where(err_thick < 50)] = 50  # IS THIS REASONABLE? IMPORTANT?
    e_th = 200 * err_thick * vel * 917 / 1E12
    err_gate.loc[g] = [np.sum(D), np.sum(e_th), np.sum(e_th)/np.sum(D)*100]

err_gate.loc['GIS'] = np.sum(err_gate, axis=0)
err_gate.loc['GIS']['E%'] = err_gate.loc['GIS']['E']/err_gate.loc['GIS']['D']*100

gate_meta = pd.read_csv("./out/gate_meta.csv.zip")
err_gate['name'] = ''
for g in err_gate.index.values:
    if (g == 'GIS'): continue
    if (sum(gate_meta.gate == g) == 0): continue
    err_gate.loc[g,'name'] = gate_meta[gate_meta.gate == g].Mouginot_2019.values[0]

err_gate.to_csv('./tmp/err_gate.csv')
err_gate.rename(columns = {'D':'D [Gt]', 
                           'E':'Error [Gt]',
                           'E%':'Error [%]'}, inplace=True),

err_gate
#+END_SRC

#+RESULTS:
| Gate |      D [Gt] | Error [Gt] | Error [%] | name                             |
|------+-------------+------------+-----------+----------------------------------|
|    1 | 0.000242779 |   0.030608 |   12607.4 | JUNGERSEN_HENSON_NARAVANA        |
|    3 |  0.00010155 |  0.0153045 |     15071 | JUNGERSEN_HENSON_NARAVANA        |
|    4 |    0.123399 |  0.0207551 |   16.8195 | MARIE_SOPHIE_GLETSCHER           |
|    5 |    0.544954 |  0.0715866 |   13.1363 | HAGEN_BRAE                       |
|    6 |   0.0308782 |  0.0581098 |   188.191 | BRIKKERNE_GLETSCHER              |
|    7 |    0.430717 |    0.08547 |   19.8437 | ACADEMY                          |
|    8 |   0.0445647 |  0.0359111 |   80.5819 | HARDER_GLETSCHER                 |
|   10 |     2.56798 |    0.10477 |   4.07984 | RYDER_GLETSCHER                  |
|   11 |     1.56763 |    0.15128 |   9.65019 | OSTENFELD_GLETSCHER              |
|   12 |    0.306089 |  0.0243717 |   7.96228 | STEENSBY_GLETSCHER               |
|   17 |   0.0463436 |  0.0407937 |   88.0245 | OSTENFELD_GLETSCHER              |
|   19 |   0.0449537 |  0.0489306 |   108.847 | OSTENFELD_GLETSCHER              |
|   22 |    0.208659 |  0.0173091 |    8.2954 | RYDER_GLETSCHER                  |
|   23 |    0.277659 |  0.0390611 |    14.068 | RYDER_GLETSCHER                  |
|   25 |   0.0256916 |  0.0819198 |   318.858 | PETERMANN_GLETSCHER_N            |
|   26 |    0.489938 |   0.169616 |   34.6199 | PETERMANN_GLETSCHER_N            |
|   27 |     11.3084 |    0.48615 |     4.299 | PETERMANN_GLETSCHER              |
|   28 |      6.0462 |   0.343538 |   5.68188 | HUMBOLDT_GLETSCHER               |
|   29 |     12.2803 |   0.662151 |   5.39196 | NIOGHALVFJERDSFJORDEN            |
|   30 |    0.211186 |  0.0106246 |   5.03091 | HUMBOLDT_GLETSCHER               |
|   31 |     14.3226 |    1.46042 |   10.1966 | ZACHARIAE_ISSTROM                |
|   32 | 7.55834e-05 | 0.00770218 |   10190.3 | DIEBITSCH                        |
|   33 | 0.000111118 |  0.0141656 |   12748.2 | DIEBITSCH                        |
|   34 |   0.0075044 |  0.0265923 |   354.356 | MORRIS_JESUP                     |
|   35 |   0.0381932 |  0.0485401 |   127.091 | BOWDOIN                          |
|   36 |     0.72019 |   0.106663 |   14.8104 | MELVILLE_GLETSCHER               |
|   37 |   0.0761574 |  0.0129914 |   17.0586 | SHARP                            |
|   38 |    0.484742 |  0.0523378 |    10.797 | FARQUHAR_GLETSCHER               |
|   39 |     2.56157 |   0.374898 |   14.6355 | TRACY_GLETSCHER                  |
|   40 |     1.64511 |   0.204995 |   12.4609 | HEILPRIN_GLETSCHER               |
|   46 |    0.880626 |  0.0390674 |   4.43633 | HARALD_MOLTKE_BRAE               |
|   47 |  0.00873454 | 0.00185963 |   21.2905 | SAVISSUAQ_WW                     |
|   48 |   0.0951409 |  0.0225635 |   23.7159 | SAVISSUAQ_WW                     |
|   49 |     0.38921 |  0.0684422 |   17.5849 | SAVISSUAQ_WWWW                   |
|   50 |   0.0844815 |  0.0232816 |   27.5582 | SAVISSUAQ_W                      |
|   51 |   0.0264578 | 0.00951808 |   35.9746 | SAVISSUAQ_W                      |
|   52 |    0.555191 |  0.0914293 |   16.4681 | SAVISSUAQ                        |
|   53 |    0.263227 |  0.0557872 |   21.1936 | YNGVAR_NIELSEN_BRAE_W            |
|   54 |    0.717578 |   0.124884 |   17.4036 | YNGVAR_NIELSEN_BRAE              |
|   55 |    0.851283 |  0.0718501 |   8.44022 | CARLOS                           |
|   57 |  0.00178218 |  0.0024406 |   136.945 | CARLOS                           |
|   58 |   0.0151679 | 0.00953498 |   62.8628 | HELLAND                          |
|   59 |     2.37727 |   0.241067 |   10.1405 | GADE-MORELL                      |
|   60 |   0.0433492 |   0.025323 |   58.4162 | GADE-MORELL                      |
|   61 |  0.00955888 | 0.00246878 |   25.8271 | DOCKER_SMITH_GLETSCHER_W         |
|   62 |     1.41693 |  0.0933727 |   6.58978 | DOCKER_SMITH_GLETSCHER_W         |
|   63 |     1.54897 |   0.118967 |   7.68038 | DOCKER_SMITH_GLETSCHER           |
|   64 |    0.249263 |  0.0189032 |   7.58366 | DOCKER_SMITH_GLETSCHER           |
|   66 |     1.05962 |  0.0622346 |    5.8733 | RINK_GLETSCHER                   |
|   67 |     3.46136 |    0.17273 |   4.99025 | ISSUUARSUIT_SERMIA               |
|   69 |      1.0023 |  0.0280765 |    2.8012 | ISSUUARSUIT_SERMIA               |
|   71 |      1.1039 |  0.0416315 |   3.77131 | ISSUUARSUIT_SERMIA               |
|   72 |     1.09776 |   0.072307 |   6.58677 | NONAME_NORTH_OSCAR               |
|   73 |     8.37833 |   0.428752 |    5.1174 | KONG_OSCAR_GLETSCHER             |
|   77 |   0.0425836 |  0.0024955 |   5.86023 | KONG_OSCAR_GLETSCHER             |
|   78 |   0.0623227 |  0.0026047 |   4.17937 | NORDENSKIOLD_GLESCHER_NW         |
|   79 |      8.2212 |   0.472487 |   5.74718 | NORDENSKIOLD_GLESCHER_NW         |
|   89 |    0.436271 |  0.0395597 |   9.06768 | NANSEN_GLETSCHER                 |
|   90 |   0.0728292 |  0.0144968 |   19.9052 | SVERDRUP_GLETSCHER               |
|   91 |     5.50316 |   0.469718 |   8.53541 | SVERDRUP_GLETSCHER               |
|   92 |     1.29725 |   0.162003 |   12.4882 | STEENSTRUP-DIETRICHSON           |
|   93 |     1.06817 |   0.108468 |   10.1545 | STEENSTRUP-DIETRICHSON           |
|   94 |     3.23444 |   0.365915 |   11.3131 | STEENSTRUP-DIETRICHSON           |
|   95 |     5.69675 |   0.692471 |   12.1555 | KJER_GLETSCHER                   |
|   96 |    0.211067 |  0.0309464 |   14.6619 | HAYES_GLETSCHER_N_NN             |
|   99 |    0.154598 |  0.0161649 |    10.456 | HAYES_GLETSCHER_N_NN             |
|  100 |    0.583881 |  0.0318647 |   5.45739 | HAYES_GLETSCHER_N_NN             |
|  102 |    0.764497 |  0.0387761 |   5.07211 | HAYES_GLETSCHER_N_NN             |
|  103 |     7.80872 |   0.861927 |    11.038 | HAYES_GLETSCHER_N_NN             |
|  104 |     3.29024 |   0.299349 |   9.09811 | HAYES_GLETSCHER_M_SS             |
|  111 |    0.644011 |  0.0450114 |   6.98923 | HAYES_GLETSCHER_M_SS             |
|  112 |    0.143022 |  0.0130102 |   9.09666 | HAYES_GLETSCHER_M_SS             |
|  113 |      5.4707 |   0.600724 |   10.9807 | ALISON_GLETSCHER                 |
|  114 |    0.109609 |  0.0399905 |   36.4848 | WALTERSHAUSEN                    |
|  115 |     1.57334 |   0.164376 |   10.4476 | ALISON_GLETSCHER                 |
|  116 |    0.030311 |  0.0201952 |   66.6267 | ADOLF_HOEL                       |
|  117 |     5.20321 |   0.362617 |   6.96909 | ILLULLIP_SERMIA                  |
|  118 |    0.440167 |  0.0392276 |   8.91197 | CORNELL_GLETSCHER                |
|  119 |    0.235532 |  0.0134709 |   5.71936 | CORNELL_GLETSCHER                |
|  120 |    0.303209 |   0.143097 |   47.1942 | GERARD_DE_GEER                   |
|  122 |    0.980607 |  0.0842863 |   8.59532 | USSING_BRAEER_N                  |
|  123 |    0.963729 |  0.0734385 |   7.62024 | USSING_BRAEER_N                  |
|  124 |   0.0556981 |  0.0276349 |   49.6155 | JAETTEGLETSCHER                  |
|  125 |     1.73727 |   0.103502 |   5.95772 | USSING_BRAEER                    |
|  126 |     0.14425 |   0.021226 |   14.7147 | USSING_BRAEER                    |
|  127 |    0.722277 |  0.0267532 |   3.70401 | QEQERTARSUUP_SERMIA              |
|  128 |   0.0664664 |  0.0332622 |   50.0436 | NORDENSKIOLD_NE                  |
|  129 |     6.21867 |   0.256793 |    4.1294 | KAKIVFAAT_SERMIAT                |
|  130 |     0.04207 | 0.00444826 |   10.5735 | KAKIVFAAT_SERMIAT                |
|  131 |  0.00143109 |   0.013929 |   973.315 | HISINGER_GLETSCHER               |
|  132 |     1.14576 |  0.0662401 |   5.78134 | NUNATAKASSAAP_SERMIA             |
|  133 |     0.61965 |  0.0782348 |   12.6256 | UPERNAVIK_ISSTROM_N              |
|  134 |     7.42538 |   0.762106 |   10.2635 | UPERNAVIK_ISSTROM_N              |
|  135 |     6.59969 |   0.819664 |   12.4197 | UPERNAVIK_ISSTROM_C              |
|  136 |     2.76336 |      0.221 |   7.99752 | UPERNAVIK_ISSTROM_S              |
|  137 |    0.111059 |  0.0151142 |   13.6092 | UPERNAVIK_ISSTROM_SS             |
|  138 |     0.87857 |   0.106359 |   12.1059 | F_GRAAE                          |
|  139 |  0.00332712 |  0.0173174 |   520.492 | CHARCOT                          |
|  140 |     9.21617 |   0.672305 |   7.29484 | DAUGAARD-JENSEN                  |
|  141 |     1.25742 |   0.137761 |   10.9558 | INNGIA_ISBRAE                    |
|  142 |     1.31589 |   0.137993 |   10.4867 | UMIAMMAKKU_ISBRAE                |
|  143 |     12.9161 |   0.860943 |   6.66564 | RINK_ISBRAE                      |
|  144 |   0.0284199 |  0.0102236 |   35.9735 | EIELSON_HARE_FJORD-ROLIGE        |
|  145 |     1.73059 |   0.252957 |   14.6168 | KANGERLUSSUUP_SERMERSUA          |
|  146 | 0.000237044 |  0.0329672 |   13907.6 | GEIKIE3                          |
|  148 | 0.000214731 |   0.042169 |     19638 | GEIKIE3                          |
|  149 |  0.00065282 |  0.0919847 |   14090.4 | GEIKIE3                          |
|  150 |    0.557926 |   0.093334 |   16.7287 | EIELSON_HARE_FJORD-ROLIGE        |
|  151 |    0.653493 |   0.205208 |   31.4016 | BREDEGLETSJER                    |
|  152 |    0.250978 |   0.112266 |   44.7315 | SYDBR                            |
|  153 |    0.666664 |  0.0349643 |   5.24467 | SERMEQ_SILARLEQ                  |
|  154 |      1.9771 |   0.337389 |   17.0648 | VESTFJORD                        |
|  155 |     5.07068 |   0.347505 |   6.85323 | SERMEQ_SILARLEQ                  |
|  156 |     1.59047 |   0.250703 |   15.7628 | MAGGA_DAN_GLETSCHER              |
|  157 |    0.751903 |  0.0531029 |   7.06247 | CW_NONAME2                       |
|  158 |    0.218979 |  0.0734166 |   33.5267 | GEIKIE_UNNAMED_VESTFORD_S        |
|  159 |  0.00739597 | 0.00607013 |   82.0734 | GEIKIE_UNNAMED_VESTFORD_S        |
|  160 |   0.0534913 |  0.0342403 |   64.0109 | GEIKIE_UNNAMED_VESTFORD_S        |
|  161 |    0.523165 |  0.0359505 |   6.87173 | LILLE_GLETSCHER                  |
|  162 |    0.166355 |  0.0116804 |   7.02138 | LILLE_GLETSCHER                  |
|  163 |    0.351213 |  0.0176866 |   5.03587 | STORE_GLETSCHER                  |
|  164 |    0.347412 |  0.0624201 |   17.9672 | DENDRITGLETSCHER                 |
|  165 |     8.37552 |   0.669684 |   7.99573 | STORE_GLETSCHER                  |
|  166 |   0.0209341 |  0.0146903 |   70.1741 | GEIKIE7                          |
|  167 |     1.97443 |   0.158261 |   8.01552 | SERMEQ_AVANNARLEQ2               |
|  169 |     7.31806 |   0.612554 |   8.37045 | SERMEQ_KUJALLEQ                  |
|  170 |   0.0643453 |  0.0308835 |   47.9965 | GEIKIE6                          |
|  177 |    0.987068 |  0.0470645 |   4.76811 | KANGILERNGATA_SERMIA             |
|  180 |     1.16795 |  0.0962233 |   8.23863 | EQIP_SERMIA                      |
|  181 |    0.172823 |  0.0614777 |   35.5727 | BORGGRAVEN                       |
|  182 |   0.0900161 |  0.0518285 |   57.5769 | SERMEQ_AVANNARLEQ                |
|  183 |    0.285159 |  0.0615595 |   21.5878 | KRONBORG                         |
|  184 |     45.8327 |    4.25735 |   9.28889 | JAKOBSHAVN_ISBRAE                |
|  185 |   0.0950084 |  0.0354866 |    37.351 | ROSENBORG                        |
|  186 |   0.0196455 | 0.00543977 |   27.6897 | ROSENBORG                        |
|  187 |   0.0774279 | 0.00387909 |   5.00994 | KONG_CHRISTIAN                   |
|  188 |  0.00985496 | 0.00620388 |   62.9518 | STYRTE                           |
|  189 |     3.09807 |   0.377386 |   12.1813 | KONG_CHRISTIAN                   |
|  190 |       25.69 |    2.10264 |   8.18466 | KANGERLUSSUAQ                    |
|  191 |  0.00316558 |  0.0036173 |    114.27 | COURTAULD                        |
|  192 |    0.782581 |  0.0303407 |     3.877 | UNNAMED_KANGER_W                 |
|  193 |    0.148695 |  0.0416993 |   28.0436 | SORGENFRI                        |
|  194 |  0.00499414 |  0.0143874 |   288.086 | UNNAMED_KANGER_E                 |
|  195 |    0.167212 |  0.0389837 |    23.314 | SAQQARLIUP_ALANGORLIUP           |
|  197 |    0.199083 |   0.133361 |   66.9875 | FREDERIKSBORG_GLETSCHER          |
|  200 |  0.00570695 |   0.013359 |   234.083 | UNNAMED_DECEPTION_N              |
|  201 |   0.0720322 | 0.00738748 |   10.2558 | UNNAMED_DECEPTION_N              |
|  202 |  0.00617465 | 0.00803134 |    130.07 | UNNAMED_DECEPTION_N              |
|  203 |     1.29878 |  0.0719576 |   5.54038 | POLARIC-DECEPTION_O_N            |
|  204 |   0.0343321 |  0.0058739 |   17.1091 | POLARIC-DECEPTION_O_N            |
|  205 |   0.0642151 |  0.0543273 |   84.6021 | POLARIC-DECEPTION_O_N            |
|  206 |  0.00126529 |   0.192713 |   15230.7 | UNNAMED_POLARIC_S                |
|  207 |  0.00109256 |   0.152833 |   13988.5 | UNNAMED_POLARIC_S                |
|  208 | 7.55157e-05 | 0.00353036 |      4675 | UNNAMED_POLARIC_S                |
|  209 |     2.04015 |  0.0460258 |     2.256 | UNNAMED_DECEPTION_O_CN_CS        |
|  210 |     7.53807 |   0.211834 |   2.81018 | UNNAMED_DECEPTION_O_CN_CS        |
|  211 |      5.1197 |   0.217338 |   4.24513 | UNNAMED_UUNARTIT_ISLANDS         |
|  212 |    0.782933 |   0.040692 |   5.19739 | KRUUSE_FJORD                     |
|  213 |    0.165063 |  0.0466749 |   28.2771 | KRUUSE_FJORD                     |
|  214 |   0.0037298 | 0.00430118 |   115.319 | KRUUSE_FJORD                     |
|  215 |  0.00056825 |  0.0397383 |   6993.11 | LAUBE_GLETSCHER                  |
|  216 | 0.000397872 |  0.0664788 |   16708.6 | UNNAMED_LAUBE_S                  |
|  218 |  0.00013842 |  0.0216197 |   15618.9 | UNNAMED_LAUBE_S                  |
|  223 |  0.00193743 |   0.329281 |   16995.7 | UNNAMED_LAUBE_S                  |
|  224 |     4.68071 |   0.799209 |   17.0745 | KIV_STEENSTRUP_NODRE_BRAE        |
|  225 | 0.000364528 |  0.0678545 |   18614.4 | KIV_STEENSTRUP_SONDRE_BRAE       |
|  226 | 0.000300914 |  0.0459726 |   15277.6 | NIGERTULUUP_KATTILERTARPIA       |
|  227 | 0.000618851 |  0.0819412 |   13240.9 | GLACIERDEFRANCE                  |
|  228 |     1.23429 |   0.348222 |   28.2123 | MIDGARDGLETSCHER                 |
|  229 | 8.76822e-05 | 0.00994987 |   11347.7 | MIDGARDGLETSCHER                 |
|  230 |     2.74438 |   0.228307 |   8.31907 | FENRISGLETSCHER                  |
|  231 |     28.3759 |    2.23476 |   7.87556 | HELHEIMGLETSCHER                 |
|  235 |    0.465927 |   0.577122 |   123.865 | HEIM_GLETSCHER                   |
|  236 |  0.00251018 |  0.0437202 |   1741.71 | BRCKNER_GLETSCHER                |
|  237 |    0.727763 |   0.561489 |   77.1526 | NONAME_IKERTIVAQ_N               |
|  238 |     7.58332 |   0.891979 |   11.7624 | IKERTIVAQ_NN                     |
|  239 |     10.3018 |   0.945436 |   9.17739 | IKERTIVAQ_M                      |
|  240 |  0.00296942 |  0.0191137 |   643.684 | NONAME_IKERTIVAQ_S               |
|  243 |    0.002139 |   0.155148 |   7253.29 | SE_NONAME1                       |
|  244 |     3.97901 |   0.852601 |   21.4275 | KOGE_BUGT_N                      |
|  245 |     16.5818 |   0.776811 |   4.68471 | KOGE_BUGT_C                      |
|  246 |    0.286414 |   0.012137 |   4.23755 | KOGE_BUGT_S                      |
|  251 |     6.25444 |   0.330864 |   5.29007 | KOGE_BUGT_S                      |
|  252 |    0.405083 |  0.0310792 |    7.6723 | KOGE_BUGT_S                      |
|  254 | 0.000476612 |  0.0881848 |   18502.4 | KOGE_BUGT_SS                     |
|  257 | 0.000940643 |   0.165067 |   17548.3 | KOGE_BUGT_SS                     |
|  258 |  0.00166026 |    0.11882 |   7156.68 | KOGE_BUGT_SS                     |
|  259 |   0.0053018 |   0.325812 |   6145.31 | UMIIVIK_FJORD                    |
|  260 |  0.00244804 |  0.0272499 |   1113.13 | UMIIVIK_FJORD                    |
|  262 |     2.68931 |   0.273666 |   10.1761 | NARSAP_SERMIA                    |
|  263 |   0.0148826 |   0.199411 |   1339.89 | UMIIVIK_FJORD                    |
|  264 |     4.54327 |    1.03591 |    22.801 | UMIIVIK_FJORD                    |
|  266 |    0.169451 |   0.108632 |   64.1079 | UMIIVIK_FJORD                    |
|  270 |    0.498188 |  0.0555729 |    11.155 | AKULLERSUUP-QAMANAARSUUP         |
|  271 | 0.000274782 |  0.0575628 |   20948.5 | APUSEERSERPIA                    |
|  272 |     4.34363 |   0.590233 |   13.5885 | GRAULV                           |
|  274 |    0.205523 |   0.028599 |   13.9153 | GRAULV                           |
|  275 |     5.03253 |   0.522981 |    10.392 | KANGIATA_NUNAATA_SERMIA          |
|  276 |     4.74497 |   0.281126 |   5.92472 | GYLDENLOVE                       |
|  277 |    0.132893 |   0.290371 |   218.501 | GYLDENLOVE_S                     |
|  278 |  2.8184e-05 | 0.00448207 |   15902.9 | SE_NONAME2                       |
|  280 | 0.000322359 |  0.0686486 |   21295.7 | GYLDENLOVE_SS                    |
|  281 | 0.000454846 |  0.0715212 |   15724.3 | GYLDENLOVE_S                     |
|  282 | 3.29127e-05 | 0.00523086 |   15893.1 | SE_NONAME2                       |
|  283 | 7.61328e-05 |  0.0116113 |   15251.4 | SE_NONAME2                       |
|  284 | 0.000866503 |   0.154398 |   17818.6 | SE_NONAME2                       |
|  285 | 0.000512678 |  0.0943475 |   18402.9 | SE_NONAME2                       |
|  286 | 0.000503471 |   0.063902 |   12692.3 | FIMBULGETLSCHER                  |
|  287 |  0.00212486 |   0.354715 |   16693.6 | FIMBULGETLSCHER                  |
|  288 |  7.2802e-05 | 0.00889059 |     12212 | SE_NONAME2                       |
|  289 | 0.000892266 |   0.174267 |   19530.9 | SE_NONAME2                       |
|  290 |     3.80157 |   0.301286 |    7.9253 | AP_BERNSTOFF_GLETSCHER           |
|  292 |      1.1574 |  0.0669075 |   5.78082 | AP_BERNSTOFF_GLETSCHER           |
|  295 | 0.000255828 |  0.0436295 |   17054.2 | SE_NONAME2                       |
|  296 | 0.000252462 |  0.0424767 |     16825 | SE_NONAME2                       |
|  299 |     1.07737 |   0.254791 |   23.6493 | MAELKEVEJEN                      |
|  300 |  0.00277807 |   0.012022 |   432.748 | SKINFAXE                         |
|  302 |     1.55004 |   0.224873 |   14.5075 | SKINFAXE                         |
|  303 |     1.87072 |   0.105903 |   5.66107 | RIMFAXE                          |
|  304 |     1.35502 |     0.1138 |    8.3984 | HEIMDAL_GLETSCHER                |
|  305 |   0.0521568 | 0.00787523 |   15.0991 | TINGMIARMIUT_FJORD               |
|  306 |     7.88829 |   0.646318 |   8.19339 | TINGMIARMIUT_FJORD               |
|  307 |   0.0767972 |  0.0146471 |   19.0725 | MOGENS_HEINESEN_N                |
|  308 |     2.06156 |   0.312754 |   15.1707 | MOGENS_HEINESEN_N                |
|  309 |    0.974754 |   0.118258 |   12.1321 | MOGENS_HEINESEN_C                |
|  310 |     4.76843 |   0.171368 |    3.5938 | MOGENS_HEINESEN_S                |
|  311 | 0.000279193 |  0.0520355 |   18637.8 | MOGENS_HEINESEN_SS_SSS           |
|  312 |    0.128705 |  0.0322384 |   25.0483 | AVANNARLEQ-NIGERLIKASIK          |
|  314 |    0.447875 |  0.0633354 |   14.1413 | MOGENS_HEINESEN_SS_SSS           |
|  315 |   0.0113678 |  0.0059108 |   51.9958 | AVANNARLEQ-NIGERLIKASIK          |
|  316 |     4.37051 |   0.368132 |   8.42309 | PUISORTOQ_N                      |
|  317 |     1.78383 |   0.169431 |   9.49815 | UKAASORSUAQ                      |
|  318 |    0.823701 |   0.125904 |   15.2851 | PUISORTOQ_S                      |
|  319 |   0.0108862 |  0.0065084 |   59.7857 | PUISORTOQ_S                      |
|  320 |    0.374217 |  0.0651766 |   17.4168 | NAPASORSUAQ_N                    |
|  322 |    0.349705 |  0.0723664 |   20.6936 | NAPASORSUAQ_N                    |
|  323 | 7.64832e-05 |  0.0160352 |   20965.6 | NAPASORSUAQ_C_S                  |
|  324 | 0.000108454 |  0.0172894 |   15941.7 | NAPASORSUAQ_C_S                  |
|  325 | 6.43811e-05 | 0.00945635 |   14688.1 | NAPASORSUAQ_C_S                  |
|  326 |     4.41149 |   0.399073 |    9.0462 | ANORITUUP_KANGERLUA              |
|  327 |    0.487421 |   0.042182 |   8.65412 | SERMILIGAARSSUK_BRAE             |
|  328 |  6.8588e-05 | 0.00796309 |     11610 | ANORITUUP_KANGERLUA              |
|  329 |    0.325979 |   0.099656 |   30.5713 | ANORITUUP_KANGERLUA              |
|  331 |   0.0013534 |   0.259317 |   19160.4 | UNNAMED_ANORITUUP_KANGERLUA_S    |
|  332 | 0.000125657 |  0.0235513 |   18742.6 | UNNAMED_ANORITUUP_KANGERLUA_SS   |
|  333 | 0.000157755 |  0.0272631 |   17281.9 | UNNAMED_ANORITUUP_KANGERLUA_SS   |
|  334 | 0.000215261 |   0.028888 |     13420 | UNNAMED_ANORITUUP_KANGERLUA_SS   |
|  335 |    0.729977 |  0.0809549 |   11.0901 | QAJUUTTAP_SERMIA                 |
|  336 |    0.984474 |   0.231078 |   23.4723 | UNNAMED_HERLUF_TROLLE_N          |
|  337 |    0.119701 |  0.0331975 |   27.7337 | EQALORUTSIT_KILLIIT_SERMIAT      |
|  338 |     1.68952 |    1.43696 |   85.0517 | EQALORUTSIT_KILLIIT_SERMIAT      |
|  340 |    0.867976 |   0.144974 |   16.7025 | KIATTUUT-QOOQQUP                 |
|  341 |     1.64827 |   0.166902 |   10.1259 | UNNAMED_HERLUF_TROLLE_S          |
|  342 |   0.0611434 |   0.298648 |   488.439 | UNNAMED_KANGERLULUK              |
|  343 | 0.000406285 |   0.101505 |   24983.6 | NAAJAT_SERMIAT                   |
|  344 |    0.193898 |   0.156242 |   80.5793 | SERMILIK                         |
|  345 | 5.21983e-05 | 0.00781245 |   14966.9 | HERLUF_TROLLE-KANGERLULUK-DANELL |
|  346 | 0.000292309 |   0.038651 |   13222.6 | UNNAMED_KANGERLULUK              |
|  347 | 0.000101103 |  0.0131135 |   12970.4 | UNNAMED_KANGERLULUK              |
|  349 |    0.436155 |   0.127036 |   29.1263 | UNNAMED_DANELL_FJORD             |
|  350 |    0.118661 | 0.00703144 |   5.92567 | UNNAMED_SOUTH_DANELL_FJORD       |
|  352 | 6.05612e-05 | 0.00952727 |   15731.6 | SOUTHERN_TIP                     |
|  353 | 0.000162942 |  0.0297611 |   18264.9 | SOUTHERN_TIP                     |
|  354 |  6.0955e-05 | 0.00177019 |    2904.1 | SOUTHERN_TIP                     |
|  355 | 0.000142931 |  0.0184732 |   12924.5 | SOUTHERN_TIP                     |
|  356 |  6.6866e-05 | 0.00864522 |   12929.2 | SOUTHERN_TIP                     |
|  357 | 0.000303222 |  0.0335544 |     11066 | SOUTHERN_TIP                     |
|  GIS |     471.543 |      50.19 |   10.6438 |                                  |


** Raw data to discharge product
:PROPERTIES:
:header-args:jupyter-python+: :tangle raw2discharge.py :session discharge
:END:
*** Load data

+ What columns are in the file?
+ Don't show all the "vel_eff_YYYY_MM_DD" and "err_eff_YYYY_MM_DD" columns.

#+BEGIN_SRC bash :results verbatim :tangle no :eval no-export
head -n1 ./tmp/dat_100_5000.csv | tr ',' '\n' | grep -v "vel_eff_*" | grep -v "err_eff_*" | grep -v "dh_*" | sort | uniq | tr '\n' '\t'
echo "also: dh_YYYY@elev, vel_eff_YYYY_MM_DD@various, etc."
#+END_SRC

#+RESULTS:
: bed_0@Millan_2018	bed@BedMachine	day@GIMP.0715	dem@GIMP.0715	err_2D	errbed@BedMachine	ex_baseline@MEaSUREs.0478	ey_baseline@MEaSUREs.0478	gates_gateID@gates_100_5000	gates_x@gates_100_5000	gates_y@gates_100_5000	lat	lon	regions@Mouginot_2019	sectors@Mouginot_2019	surface@BedMachine	thickness_0@Millan_2018	thickness@Bamber_2013	thickness@BedMachine	vel_baseline@MEaSUREs.0478	vel_err_baseline@MEaSUREs.0478	vx_baseline@MEaSUREs.0478	vy_baseline@MEaSUREs.0478	x	y	also: dh_YYYY@elev, vel_eff_YYYY_MM_DD@various, etc.

#+NAME: load_data
#+BEGIN_SRC jupyter-python :exports none :results none
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import datetime as dt

# pd.options.display.notebook_repr_html = False

###
### Load metadata
### 
meta_cols = ["x", "y", "err_2D", 
             "regions@Mouginot_2019", "sectors@Mouginot_2019", "gates_gateID@gates_100_5000"]
meta = pd.read_csv("./tmp/dat_100_5000.csv", usecols=meta_cols)
# rename columns
meta.rename(inplace=True, columns={'regions@Mouginot_2019':'regions', 
                                   'sectors@Mouginot_2019':'sectors',
                                   'gates_gateID@gates_100_5000':'gates'})
regions = {1:'NO', 2:'NE', 3:'CE', 4:'SE', 5:'SW', 6:'CW', 7:'NW'}
meta['regions'] = meta['regions'].map(regions.get) # Convert sector numbers to meaningful names
meta['ones'] = 1

R = pd.read_csv('./out/gate_meta.csv.zip')
meta['name'] = ''
for g in meta['gates'].unique(): meta.loc[meta['gates'] == g, 'name'] = R[R['gate'] == g]['Mouginot_2019'].values

###
### Load BASELINE velocity
###
vel_baseline = pd.read_csv("./tmp/dat_100_5000.csv", usecols=['vel_baseline@MEaSUREs.0478'])
vel_baseline.rename(inplace=True, columns={'vel_baseline@MEaSUREs.0478':'vel'})

###
### Load all velocity
###
vel = pd.read_csv("./tmp/dat_100_5000.csv", usecols=(lambda c: ('vel_eff' in c)))
vel.rename(columns=lambda c: dt.datetime(int(c[8:12]), int(c[13:15]), int(c[16:18])), inplace=True)
# vel.drop(columns=dt.datetime(1999, 7, 1), inplace=True) # bad year?
vel.replace(0, np.nan, inplace=True)
# vel = vel.loc[:,vel.columns.year < 2018] # drop 2018
vel = vel.loc[:,vel.columns.year >= 1985] # drop early years
vel.sort_index(axis='columns', inplace=True)
vel.drop(labels=vel.columns[vel.columns.duplicated(keep='first')], axis='columns', inplace=True)

####################
# Filter Velocity: Rolling Windows
##################
def filter_bad_v(v):
    WINDOW=30
    SIGMA=2
    vel_rolling = v.T.rolling(window=WINDOW, center=True, min_periods=1).mean().T
    vel_residual = v - vel_rolling
    vel_std = vel_residual.T.rolling(window=WINDOW, center=True, min_periods=1).std().T
    vel_outlier = (v > vel_rolling+SIGMA*vel_std) | ( v < vel_rolling-SIGMA*vel_std)
    v[vel_outlier] = np.nan
    return v
####################
vel = filter_bad_v(vel)
vel = filter_bad_v(vel)
vel = filter_bad_v(vel)

fill = vel.copy() / vel # 1 where data, nan where not

vel = vel.interpolate(method='time', axis='columns', limit_area='inside', limit_direction='both')
vel.fillna(method='ffill', axis=1, inplace=True)
vel.fillna(method='bfill', axis=1, inplace=True)

# vel[meta.name == TESTNAME].T.sort_index().head()
# fill[meta.name == TESTNAME].T.sort_index().head()

# vel.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()/1E6


###
### Load all velocity ERROR
###
err = pd.read_csv("./tmp/dat_100_5000.csv", usecols=(lambda c: ('err_eff' in c)))
err.rename(columns=lambda c: dt.datetime(int(c[8:12]), int(c[13:15]), int(c[16:18])), inplace=True)
err.replace(0, np.nan, inplace=True)
err = err.loc[:,err.columns.year > 1985] # drop early years
err.sort_index(axis='columns', inplace=True)
err.drop(labels=err.columns[err.columns.duplicated(keep='first')], axis='columns', inplace=True)
# err.interpolate(method='time', limit_area='inside', axis=1 inplace=True)
err.fillna(method='ffill', axis=1, inplace=True)
err.fillna(method='backfill', axis=1, inplace=True)

for c in err.columns[err.columns.duplicated()]:
    err.drop(columns=c, inplace=True)

# make sure we have error (even if 0) for each velocity, and no err w/o vel
for c in vel.columns:
    if c not in err.columns:
        err[c] = np.nan

for c in err.columns:
    if c not in vel.columns:
        err.drop(columns=c, inplace=True)
    
err.sort_index(axis='columns', inplace=True)

# tmp = np.array([c if c not in err.columns else None for c in vel.columns]); print(tmp[tmp != None])


###
### Thickness
###
th = pd.read_csv("./tmp/dat_100_5000.csv", usecols=["thickness@BedMachine",
                                           "surface@BedMachine",
                                           "bed@BedMachine",
                                           "errbed@BedMachine",
                                           "bed_0@Millan_2018",
                                           "thickness_0@Millan_2018",
                                           "gates_gateID@gates_100_5000"])
th.rename(inplace=True, columns={'thickness@BedMachine':'thick',
                                 'bed_0@Millan_2018':'bed@Millan_2018',
                                 'thickness_0@Millan_2018':'thickness@Millan_2018',
                                 'errbed@BedMachine': 'err',
                                 'gates_gateID@gates_100_5000':'gates'})
th_GIMP = pd.read_csv("./tmp/dat_100_5000.csv", usecols=(lambda c: ('@GIMP.0715' in c)))
th_GIMP['day'] = [dt.datetime(2000,1,1) + dt.timedelta(days=np.int(_)) for _ in th_GIMP['day@GIMP.0715']]
for _ in th_GIMP.columns: th[_] = th_GIMP[_]
del(th_GIMP)


###
### dh/dt
###
dhdt = pd.read_csv("./tmp/dat_100_5000.csv", usecols=(lambda c: ('dh' in c)))
mv = {}
for c in dhdt.columns: mv[c] = np.int(c.split('@')[0].split('_')[1])
dhdt.rename(inplace=True, columns=mv)

# assume linear trend average of adjacent 3 years for missing years
# dhdt[2018] = dhdt.loc[:,2015:2017].mean(axis='columns')
# dhdt[2019] = dhdt.loc[:,2015:2017].mean(axis='columns')
dhdt[2018] = 0
dhdt[2019] = 0
dhdt[2020] = 0
for y in np.arange(1985,1994+1): dhdt[y] = dhdt.loc[:,1995:1997].mean(axis='columns')
dhdt.sort_index(axis='columns', inplace=True)

# what is the unadjusted discharge using BedMachine thickness?
D = (vel).apply(lambda c: c * (200 * th['thick'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()
#+END_SRC


*** Adjust thickness 
**** Millan 2018
What are the changes in discharge in Millan 2018 region?

#+NAME: millan_2018
#+BEGIN_SRC jupyter-python :exports none :results raw drawer
th['thick_max'] = np.maximum(th['thick'].values, th['thickness@Millan_2018'].values)

D_tmp = pd.DataFrame(index=th.index, columns=['BedMachine','Millan','Max'])

D_tmp['BedMachine'] = vel_baseline.apply(lambda c: c * th['thick'].values, axis=0) * 200 * 917 / 1E12
D_tmp['Millan'] = vel_baseline.apply(lambda c: c * th['thickness@Millan_2018'].values, axis=0) * 200 * 917 / 1E12
D_tmp['Max'] = vel_baseline.apply(lambda c: c * th['thick_max'].values, axis=0) * 200 * 917 / 1E12

D_tmp.index.name = "Discharge [Gt]"
D_tmp[D_tmp['Millan'] != 0].sum(axis=0)
#+END_SRC



Decision: Use Millan (2018) where it exists. Then adjust as per BedMachine for thickness <= 20 m.

**** Adjust "bad" thickness
Here we perform a few thickness adjustments:

First, patch in Millan (2018) where it exists.

+ 300 :: All ice <= 20 m thick is assumed bad and set to the minimum
         "good" thickness in a gate if good exists, or 300 m if it
         does not exist
+ 400 :: All ice <= 50 m thick is set to 400 m thick
+ fit :: All ice <= 20 m thick is fit to the log10(thickness) v.
         log10(velocity) relationship, even though it is not a good
         fit.

For testing, gate clumps 9 (all bad) and 546 (some bad)

#+CALL: load_data[:results none]()

#+NAME: adjust_thickness
#+BEGIN_SRC jupyter-python :exports none :results none

# Patch in Millan (2018) where that data set has thickness > 0.
th.loc[th['thickness@Millan_2018'] > 0, 'thick'] = th.loc[th['thickness@Millan_2018'] > 0, 'thickness@Millan_2018']

th['bad'] = th['thick'] <= 20

th['thick_adj_300'] = th['thick']
th['thick_adj_300_err'] = th['err']
for g in th[th['bad']]['gates'].unique(): # only work on gates with some (or all) bad thickness
    if all(th[th['gates'] == g]['bad']): # If all bad, set to 300
        th.loc[th['gates'] == g, 'thick_adj_300'] = 300
        th.loc[th['gates'] == g, 'thick_adj_300_err'] = 300/2.

    elif any(th[th['gates'] == g]['bad']): # If any bad, set to minimum of good.
        th.loc[(th['gates'] == g) & (th['bad']), 'thick_adj_300'] = \
        (th.loc[(th['gates'] == g) & (~th['bad']), 'thick']).min()
        th.loc[(th['gates'] == g) & (th['bad']), 'thick_adj_300_err'] = 300/2.

# aggressive: Anything <= 50 gets 400 m thickness
th['thick_adj_400'] = [400 if T <= 50 else T for T in th['thick']]
th['thick_adj_400_err'] = [400/2. if T[0] <= 50 else T[1] for T in zip(th['thick'],th['err'])]
#+END_SRC


#+BEGIN_SRC jupyter-python :exports none :results raw drawer :display text/org :session discharge :tangle no :eval no-export
<<load_data>>
<<millan_2018>>
<<adjust_thickness>>

th.describe().T
#+END_SRC

#+RESULTS:
|                       | count |    mean |     std |      min |     25% |     50% |     75% |     max |
|-----------------------+-------+---------+---------+----------+---------+---------+---------+---------|
| gates                 |  5829 | 162.334 |  98.702 |        1 |      73 |     158 |     239 |     357 |
| bed@BedMachine        |  5829 | 21.1621 | 375.987 |     -990 |    -229 |     -22 |     300 |    1433 |
| thick                 |  5829 |  401.49 | 258.313 |        0 | 206.316 |     406 |     577 |    1265 |
| surface@BedMachine    |  5829 | 416.305 | 227.998 |       61 |     241 |     378 |     538 |    1444 |
| bed@Millan_2018       |  5829 | 80.9647 | 224.577 | -824.832 |       0 |       0 |       0 | 1430.48 |
| thickness@Millan_2018 |  5829 |  91.966 | 201.534 | -35.2671 |       0 |       0 | 0.54737 | 1141.83 |
| err                   |  5829 | 65.3481 | 56.2126 |       10 |      27 |      46 |      83 |     304 |
| dem@GIMP.0715         |  5829 |  436.62 | 236.144 |  72.2317 |  252.42 | 392.626 | 572.721 | 1490.26 |
| day@GIMP.0715         |  5829 | 4765.93 | 1336.71 |        0 |    4549 |    5225 |    5555 |    5782 |
| thick_max             |  5829 | 407.221 | 260.286 |        0 |     213 |     414 |     581 |    1265 |
| thick_adj_300         |  5829 | 429.216 | 228.073 |  20.3686 |     300 |     406 |     577 |    1265 |
| thick_adj_300_err     |  5829 |  66.041 | 53.7579 |       10 |      27 |      48 |      88 |     304 |
| thick_adj_400         |  5829 | 453.789 | 208.427 |       51 |     343 |     406 |     577 |    1265 |
| thick_adj_400_err     |  5829 | 75.0142 | 65.7903 |       10 |      28 |      50 |      94 |     288 |

#+BEGIN_SRC jupyter-python :exports none :results raw drawer :display text/org :session discharge :eval no-export
D0 = (vel).apply(lambda c: c * (200 * th['thick'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D1 = (vel).apply(lambda c: c * (200 * th['thick_adj_300'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D0 = D0.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()
D1 = D1.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()
pd.concat([D0,D1, D1-D0], axis='columns', keys=['BedMachine','300','diff'])
#+END_SRC

#+RESULTS:
|                     | BedMachine |     300 |    diff |
|---------------------+------------+---------+---------|
| 1985-12-31 00:00:00 |    386.954 | 399.031 | 12.0771 |
| 1986-12-31 00:00:00 |     398.67 | 410.438 | 11.7685 |
| 1987-12-31 00:00:00 |    399.729 | 409.989 | 10.2599 |
| 1988-12-31 00:00:00 |    389.776 | 398.686 | 8.91048 |
| 1989-12-31 00:00:00 |    390.452 | 399.543 |  9.0913 |
| 1990-12-31 00:00:00 |    389.166 | 399.553 | 10.3863 |
| 1991-12-31 00:00:00 |    378.089 |  387.33 | 9.24096 |
| 1992-12-31 00:00:00 |    383.836 |  393.05 | 9.21352 |
| 1993-12-31 00:00:00 |    388.328 | 397.293 | 8.96515 |
| 1994-12-31 00:00:00 |     397.71 | 407.257 | 9.54711 |
| 1995-12-31 00:00:00 |    380.816 | 390.477 | 9.66136 |
| 1996-12-31 00:00:00 |    381.668 | 390.836 | 9.16837 |
| 1997-12-31 00:00:00 |    388.841 | 397.362 |   8.521 |
| 1998-12-31 00:00:00 |    393.985 | 401.815 |  7.8297 |
| 1999-12-31 00:00:00 |    394.704 | 402.444 | 7.74052 |
| 2000-12-31 00:00:00 |    397.448 | 404.696 |  7.2478 |
| 2001-12-31 00:00:00 |    402.279 | 409.534 |  7.2542 |
| 2002-12-31 00:00:00 |    419.328 | 426.712 | 7.38389 |
| 2003-12-31 00:00:00 |      433.5 | 441.149 | 7.64892 |
| 2004-12-31 00:00:00 |    446.764 | 454.607 | 7.84295 |
| 2005-12-31 00:00:00 |     458.48 | 466.319 | 7.83887 |
| 2006-12-31 00:00:00 |    452.752 | 460.494 | 7.74172 |
| 2007-12-31 00:00:00 |    445.822 | 453.544 | 7.72238 |
| 2008-12-31 00:00:00 |    450.372 | 458.357 | 7.98452 |
| 2009-12-31 00:00:00 |    458.691 |  466.75 | 8.05813 |
| 2010-12-31 00:00:00 |    462.608 | 470.711 | 8.10229 |
| 2011-12-31 00:00:00 |    467.551 | 475.526 |  7.9752 |
| 2012-12-31 00:00:00 |    467.766 | 475.682 | 7.91611 |
| 2013-12-31 00:00:00 |    473.138 | 480.956 | 7.81788 |
| 2014-12-31 00:00:00 |     479.03 | 486.703 | 7.67315 |
| 2015-12-31 00:00:00 |    483.012 | 490.638 | 7.62585 |
| 2016-12-31 00:00:00 |    478.882 | 486.243 | 7.36085 |
| 2017-12-31 00:00:00 |    486.201 | 493.321 | 7.12098 |
| 2018-12-31 00:00:00 |    477.085 | 484.375 | 7.28981 |
| 2019-12-31 00:00:00 |    478.904 | 486.412 | 7.50878 |
| 2020-12-31 00:00:00 |    485.676 | 493.438 | 7.76212 |


**** Adjust thickness w thickness v. velocity fit.

#+NAME: adjust_thickness_fit
#+BEGIN_SRC jupyter-python :exports none :results raw drawer :display text/plain :eval no-export
CUTOFF = 20
df = vel_baseline.join(th['thick'])
max_vel = df.loc[df['thick'] <= CUTOFF, 'vel'].max() # limit fit to velocities where data is missing
# df = df[(df['thick'] > CUTOFF) & (df['vel'] <= max_vel)]
df = df[df['thick'] > CUTOFF]
# df = df[df['vel'] <= max_vel]

import statsmodels.api as sm
y = (df['thick'])
X = np.log10(df['vel'])
X = sm.add_constant(X)
model = sm.OLS(y, X)
fits = model.fit()
# print(fits.summary())
predictions = fits.predict(X)

from statsmodels.sandbox.regression.predstd import wls_prediction_std
XX = np.linspace(X['vel'].min(), X['vel'].max(), 50)
XX = sm.add_constant(XX)
yy = fits.predict(XX)
sdev, lower, upper = wls_prediction_std(fits, exog=XX, alpha=0.05)

# fig = plt.figure(1, figsize=(4,4)) # w,h
# # get_current_fig_manager().window.move(0,0)
# fig.clf()
# # fig.set_tight_layout(True)

# ax = fig.add_subplot(111)
# im = ax.scatter(X['vel'], y, alpha=0.1, color='k')
# xl, yl = ax.get_xlim(), ax.get_ylim()
# ax.set_ylabel('Thickness [m]')
# ax.set_xlabel('Velocity [m yr$^{-1}$]')
# ax.plot(XX[:,1], yy, 'r--')
# ax.fill_between(XX[:,1], lower, upper, color='#888888', alpha=0.4)
# ax.fill_between(XX[:,1], lower, upper, color='#888888', alpha=0.1)
# # ax.set_xlim(50,xl[1])
# ax.set_ylim(0,yl[1])
# plt.savefig('./tmp/vel_thick_fit.png', transparent=True, bbox_inches='tight', dpi=300)
# plt.savefig('./tmp/vel_thick_fit.pdf', transparent=True, bbox_inches='tight', dpi=300)
            
th['fit'] = th['thick']
vel_where_thick_bad = vel_baseline.loc[th['bad'] == True, 'vel']
th.loc[th['bad'] == True, 'fit'] = fits.predict(sm.add_constant(np.log10(vel_where_thick_bad)))
# set err to thickness where fit
th['fit_err'] = th['err']
th.loc[th['bad'] == True, 'fit_err'] = th.loc[th['bad'] == True, 'fit'] /2.


fits.summary()


D0 = (vel).apply(lambda c: c * (200 * th['thick_adj_300'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D1 = (vel).apply(lambda c: c * (200 * th['fit'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D0 = D0.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()
D1 = D1.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()
pd.concat([D0,D1, D1-D0], axis='columns', keys=['300','fit','diff'])

#+END_SRC

#+RESULTS: adjust_thickness_fit
#+begin_example
                   300         fit      diff
1985-12-31  399.031420  403.121067  4.089646
1986-12-31  410.438102  414.469430  4.031329
1987-12-31  409.988512  413.608803  3.620292
1988-12-31  398.686155  401.837577  3.151422
1989-12-31  399.542975  402.712811  3.169836
1990-12-31  399.552651  403.207026  3.654375
1991-12-31  387.329646  390.507844  3.178198
1992-12-31  393.049579  396.162632  3.113053
1993-12-31  397.293011  400.314087  3.021076
1994-12-31  407.257194  410.358419  3.101226
1995-12-31  390.476922  393.838937  3.362015
1996-12-31  390.835898  394.279859  3.443961
1997-12-31  397.361775  400.582674  3.220899
1998-12-31  401.814872  405.132359  3.317487
1999-12-31  402.444449  405.929645  3.485196
2000-12-31  404.696171  408.087146  3.390975
2001-12-31  409.533536  412.860311  3.326775
2002-12-31  426.712068  430.043968  3.331900
2003-12-31  441.148668  444.566065  3.417397
2004-12-31  454.607372  458.120626  3.513254
2005-12-31  466.319195  469.819737  3.500543
2006-12-31  460.493926  464.003819  3.509893
2007-12-31  453.544097  457.081317  3.537220
2008-12-31  458.356556  462.025354  3.668797
2009-12-31  466.749541  470.453459  3.703919
2010-12-31  470.710783  474.407107  3.696325
2011-12-31  475.526385  479.278522  3.752137
2012-12-31  475.682132  479.459931  3.777799
2013-12-31  480.956113  484.685712  3.729599
2014-12-31  486.702790  490.302451  3.599661
2015-12-31  490.637524  494.100384  3.462860
2016-12-31  486.243258  489.633019  3.389762
2017-12-31  493.321487  496.546776  3.225289
2018-12-31  484.374633  487.620463  3.245830
2019-12-31  486.412417  489.821312  3.408895
2020-12-31  493.437977  496.997156  3.559179
#+end_example

**** Table of thickness adjustments
:PROPERTIES:
:ID:       62f5d28c-c704-422d-9e9b-c0771d5b86ee
:END:

#+BEGIN_SRC jupyter-python :exports none :results raw drawer :display text/org :eval no-export
th[['thick','thick_adj_300','thick_adj_400','fit']].describe()
#+END_SRC

#+RESULTS:
|       |   thick | thick_adj_300 | thick_adj_400 |     fit |
|-------+---------+---------------+---------------+---------|
| count |    5829 |          5829 |          5829 |    5829 |
| mean  |  401.49 |       429.216 |       453.789 |  436.88 |
| std   | 258.313 |       228.073 |       208.427 | 223.066 |
| min   |       0 |       20.3686 |            51 | 20.3686 |
| 25%   | 206.316 |           300 |           343 |     290 |
| 50%   |     406 |           406 |           406 |     417 |
| 75%   |     577 |           577 |           577 | 577.813 |
| max   |    1265 |          1265 |          1265 |    1265 |


**** Baseline discharge values for various thickness adjustments
Here we calculate:
+ D_baseline_th_noadj :: Discharge with no thickness adjustment
+ D_baseline_th_300 :: The baseline discharge
+ D_baseline_th_400 :: The discharge assuming the aggressive thickness adjustment
+ D_baseline_th_fit :: The discharge assuming the fitted thickness adjustment
+ D_baseline :: The baseline discharge - picked from our favorite of the above. TBD

#+NAME: discharge_th
#+BEGIN_SRC jupyter-python :exports none :results raw drawer :eval no-export
D_th = pd.DataFrame(index=th.index,
                    columns=['NoAdj','NoAdj_err','300','300_err','400','400_err','fit','fit_err'])

# + D_baseline_th_noadj :: Discharge with no thickness adjustment
D_th['NoAdj'] = vel_baseline.apply(lambda c: c * (th['thick'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

# should match HeatMap
D_th['NoMillan'] = vel_baseline.apply(lambda c: c * ((th['surface@BedMachine']-th['bed@BedMachine']).values * 200), axis=0) * 917 / 1E12

# D_baseline_th_noadj_err ::
D_th['NoAdj_err'] = vel_baseline.apply(lambda c: c * (th['err'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

D_th['300'] = vel_baseline.apply(lambda c: c * (th['thick_adj_300'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12
D_th['300_err'] = vel_baseline.apply(lambda c: c * (th['thick_adj_300_err'].values  * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

D_th['400'] = vel_baseline.apply(lambda c: c * (th['thick_adj_400'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12
D_th['400_err'] = vel_baseline.apply(lambda c: c * (th['thick_adj_400_err'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

D_th['fit'] = vel_baseline.apply(lambda c: c * (th['fit'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12
D_th['fit_err'] = vel_baseline.apply(lambda c: c * (th['fit_err'].values* 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

D_th.sum(axis=0)
#+END_SRC

#+RESULTS: discharge_th
: NoAdj        481.499868
: NoAdj_err     49.851751
: 300          489.703317
: 300_err       49.768335
: 400          495.959841
: 400_err       52.190290
: fit          493.665593
: fit_err       51.320493
: NoMillan     472.176686
: dtype: float64

**** Map of where thickness adjustments occur

#+BEGIN_SRC jupyter-python :session gate_map :exports none :results raw drawer :tangle no
import matplotlib.pyplot as plt
import numpy as np

from grass_session import Session
from grass.pygrass.modules.shortcuts import general as g
from grass.pygrass.modules.shortcuts import raster as r
from grass.pygrass.modules.shortcuts import vector as v
from grass.pygrass.modules.shortcuts import display as d
from grass.script import array as garray

from grass.pygrass.modules.shortcuts import vector as v
import shapefile

if 'th' not in locals():
    <<load_data>>
    <<millan_2018>>
    <<adjust_thickness>>
    <<adjust_thickness_fit>>
    # <<discharge>>

# th['bad'] = th['thick'] <= 20
th['all_bad'] = False
for g in th[th['bad']]['gates'].unique():
    if all(th[th['gates'] == g]['bad']):
        th.loc[th['gates'] == g, 'all_bad'] = True
        
tmp = meta.copy()
tmp['vel'] = vel_baseline
gates = pd.DataFrame(index=th['gates'].unique())
id = 'gates' #_gateID@gates_100_5000'
gates['x'] = tmp.groupby(id).mean()['x']
gates['y'] = tmp.groupby(id).mean()['y']
gates['all_bad'] = th.groupby('gates').mean()['all_bad']
gates['bad'] = th.groupby('gates').mean()['bad']
gates['regions'] = tmp.groupby(id).first()['regions']
gates['vel_all_bad'] = tmp[th['all_bad'] == 1].groupby(id).mean()['vel']
gates['vel_part_bad'] = tmp[th['bad']>0].groupby(id).mean()['vel']
gates['vel_gd'] = tmp[th['bad'] == 0].groupby(id).mean()['vel']

fig = plt.figure(1, figsize=(8,6)) # w,h
fig.clf()
fig.set_tight_layout(True)

from matplotlib import rc
rc('font', size=12)
rc('text', usetex=False)

import matplotlib.gridspec as gridspec
gs = gridspec.GridSpec(2, 2) #h, w
ax1 = plt.subplot(gs[:,0])
ax2 = plt.subplot(gs[0,1])
ax3 = plt.subplot(gs[1,1])

SIZE=4

# Write out the vector from GRASS to disk
if 'r_regions' not in locals():
    with Session(gisdb="./", location="G", mapset="Mouginot_2019", create_opts=""):
        # r.to.vect input=regions output=regions type=area
        # v.out.ogr -c input=tmp output=tmp.shp format=ESRI_Shapefile --o
        r_regions = shapefile.Reader("./tmp/SHP/tmp.shp")

sf = r_regions

for shape in list(sf.iterShapes()):
   x_lon = np.zeros(len(shape.points))
   y_lat = np.zeros(len(shape.points))
   for ip in range(len(shape.points)):
       x_lon[ip] = shape.points[ip][0]
       y_lat[ip] = shape.points[ip][1]

   dist = np.sqrt(x_lon**2 + y_lat**2)
   dist_d = np.abs(np.diff(dist))
   bad = np.where(dist_d > 5000)[0]
   x_lon[bad] = np.nan; y_lat[bad] = np.nan
   ax1.plot(x_lon, y_lat, 'k', color='lightgray', zorder=-999)
   ax1.text(-130000,-2750000, 'SW')
   ax1.text(-130000,-2125000, 'CW')
   ax1.text(-130000,-1750000, 'NW')
   ax1.text(-135000,-1200000, 'NO')
   ax1.text(260000,-1.35E6, 'NE')
   ax1.text(370000,-2.1E6, 'CE')
   ax1.text(200000,-2.5E6, 'SE')

ax1.scatter(gates['x'],gates['y'], marker='o', color='k', s=SIZE, label="0 % Invalid")
ax1.scatter(gates.loc[gates['all_bad'] == True, 'x'],
            gates.loc[gates['all_bad'] == True, 'y'],
            marker='v', color='r', s=SIZE, label="100 % Invalid")
ax1.scatter(gates.loc[(gates['bad'] > 0) & (gates['bad'] < 1), 'x'], # partial bad
            gates.loc[(gates['bad'] > 0) & (gates['bad'] < 1), 'y'],
            marker='s', color='b', s=SIZE, label="Partial")
ax1.set_yticklabels([])
ax1.set_xticklabels([])
ax1.legend(fontsize=10, markerscale=5)

MS=4

gs = gates.sort_values(by='regions')
gs.index = np.arange(gs['bad'].size)
ax2.plot(gs.loc[gs['bad'] == 1, 'bad']*100, '.', color='r', marker='v', markersize=MS, markerfacecolor='None')
ax2.plot(gs.loc[gs['bad']%1 != 0, 'bad']*100, '.', color='b', marker='s', markersize=MS, markerfacecolor='None')
ax2.plot(gs.loc[gs['bad'] == 0, 'bad']*100, '.', color='k')
ax2.set_ylabel('Invalid thickness\npixels in gate [%]')
ax2.set_xlabel('Gate [#]')

ax3.plot(gs['vel_gd'], '.', color='k', label='Gate pixels all good')
ax3.plot(gs['vel_part_bad'], '.', color='b', label='Gate pixels partial bad', marker='s', markersize=MS, markerfacecolor='None')
ax3.plot(gs['vel_all_bad'], '.', color='r', label='Gate pixels all bad', marker='v', markersize=MS, markerfacecolor='None')
ax3.set_ylabel('Gate average speed [m yr$^{-1}$]')
ax3.set_xlabel('Gate [#]')
ax3.set_yscale('log')
# ax3.legend()

# print region label on ax4. Shade ax4 and ax5 every 2nd region
for n,R in enumerate(gs['regions'].unique()):
    ax2.text(np.mean(gs[gs['regions'] == R].index), 50, R, horizontalalignment='center', rotation=90)
    for a in [ax2,ax3]:
        if n % 2 == 0:
            a.axvspan(gs[gs['regions'] == R].index[0],
                      gs[gs['regions'] == R].index[-1],
                      alpha=0.1, color='k')
             
print("Gates: ", gates.shape[0])
print("Gates w/ any bad pixels: ", gates[gates['bad'] > 0].shape[0])
print("Gates w/ >50% bad pixels: ", gates[gates['bad'] > 0.5].shape[0])
print("Gates w/ all bad pixels: ", gates[gates['bad'] == 1].shape[0])
print("Gates w/ all bad pixels: ", gates[gates['all_bad'] == True].shape[0])
    
plt.savefig('./figs/gate_map.png', transparent=True, bbox_inches='tight', dpi=300)
# plt.savefig('./figs/gate_map.pdf', transparent=True, bbox_inches='tight', dpi=300)

print(tmp[th['bad'] == 0]['vel'].describe())
print(tmp[th['bad'] > 0]['vel'].describe())
#+END_SRC

**** Temporal changes in thickness
+ For each pixel, make daily time series of thickness changes from citet:khan_2016_geodetic
+ Then set 0 to GIMP.0715 date for each pixel
+ Then add them together

#+NAME: adjust_thickness_ts
#+BEGIN_SRC jupyter-python :exports none :results raw drawer
dhdt_ts = dhdt.copy(deep=True)
# dhdt_ts[2016] = dhdt_ts[2015] # assume annual dh/dt continues at fixed rate
# dhdt_ts[2017] = dhdt_ts[2015]
# dhdt_ts[2018] = dhdt_ts[2015]
# dhdt_ts[2016] = 0
# dhdt_ts[2017] = 0
# dhdt_ts[2018] = 0
dhdt_ts[dhdt.columns.max()+1] = 0
dhdt_ts = dhdt_ts.reindex(sorted(dhdt_ts.columns), axis='columns')
dhdt_ts = dhdt_ts.cumsum(axis='columns')
dhdt_ts.columns = dhdt_ts.columns.astype(np.str).astype('datetime64[ns]')
dhdt_ts = dhdt_ts.T.resample('1D').interpolate().T
# from above: daily accumulated change at each discharge pixel for SEC time series

# expand from SEC 1st time to velocity 1st time, assuming no changes in SEC
dhdt_ts[dhdt_ts.columns.min()] = dhdt_ts[dhdt_ts.columns.min()]
dhdt_ts[vel.columns.min()] = dhdt_ts[dhdt_ts.columns.min()]
dhdt_ts = dhdt_ts.T.resample('1D').interpolate().T

th_ts = pd.DataFrame().reindex_like(dhdt_ts)
for idx in th.index:
    t0_pix = th.loc[idx]
    # adjusted thickness at t0_pix['day']
    t0_pix_th = t0_pix['fit'] + (th.loc[idx]['dem@GIMP.0715'] - th.loc[idx]['surface@BedMachine'])

    # now using that thickness, put it in a time Series
    dhdt_pix = dhdt_ts.loc[idx]
    dhdt_pix = dhdt_pix - dhdt_pix.loc[t0_pix['day']]
    th_ts.loc[idx] = t0_pix_th + dhdt_pix

th_ts = th_ts[vel.columns]

# Re-adjust th_ts where thickness < 20 m.
bad = th_ts.min(axis=1) < 20 # Pixels with bad thickness somewhere in the time series
for px in bad[bad == True].index:
    th_ts.loc[px] = fits.predict(np.log10([1,vel_baseline.iloc[px].values[0]]))
#+END_SRC

*** Discharge

And more importantly and long-term, we calculate the following time series discharge products, using our preferred method (fill w/ 300 m):
+ D :: Discharge at gate scale
+ D_err :: The discharge error at gate scale
+ D_fill :: The fill percentage for each gate at each point in time
+ D_sector :: Same, but at Mouginot 2019 sector scale
+ D_sector_err ::
+ D_sector_fill :: 
+ D_region :: Same, but at Mouginot 2019 region scale
+ D_region_err ::
+ D_region_fill ::
+ D_all :: Same, but all GIS
+ D_all_err ::
+ D_all_fill ::

#+BEGIN_SRC jupyter-python :display text/plain :session test :tangle no
import pandas as pd
import numpy as np
filled_D = pd.DataFrame(index=['A','B'], columns=['t1','t3','t4'], data=[[8,9,7],[4,2,1]])
fill = filled_D/filled_D
fill.loc['B','t3'] = np.nan

no_filled_D = filled_D * fill
# filled_weighted_D = filled_D / filled_D.sum()
no_filled_weighted_D = no_filled_D / filled_D.sum()

r = ((filled_D*fill)/filled_D.sum()).sum()
r.round(2)                        
#+END_SRC

#+NAME: discharge
#+BEGIN_SRC jupyter-python :exports none :results raw drawer
# D :: Discharge at pixel scale
# D_err :: The discharge error at pixel scale
# D_fill :: The fill percentage for each pixel at each point in time
D = (vel*th_ts).apply(lambda c: c * (200 * meta['err_2D'].values), axis=0) * 917 / 1E12
# Don't adjust thickness over time
# D = (vel).apply(lambda c: c * (200 * meta['err_2D'].values * th['thick'].values), axis=0) * 917 / 1E12

D_err = vel.apply(lambda c: c * (th['fit_err'] * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

[DD,DD_err] = [_.copy() for _ in [D,D_err]]
DD[['gates','sectors','regions','ones','name']] = meta[['gates','sectors','regions','ones','name']]
DD_err[['gates','sectors','regions','ones','name']] = meta[['gates','sectors','regions','ones','name']]


# D_gate :: Same, but at the gate scale
# D_gate_err ::
# D_gate_fill ::
D_gates = DD.groupby('gates').sum().drop(['ones','sectors'], axis=1)
D_gates_err = DD_err.groupby('gates').sum().drop(['ones','sectors'], axis=1)
D_gates_fill_weight = pd.DataFrame().reindex_like(D_gates)
for g in D_gates.index:
    g_idx = (DD['gates'] == g)
    D_gates_fill_weight.loc[g] = ((D[g_idx]*fill[g_idx])/D[g_idx].sum()).sum()

D_gates.columns = D_gates.columns.astype(np.str).astype('datetime64[ns]')
D_gates_err.columns = D_gates_err.columns.astype(np.str).astype('datetime64[ns]')
D_gates_fill_weight.columns = D_gates_fill_weight.columns.astype(np.str).astype('datetime64[ns]')
D_gates_fill_weight.clip(lower=0, upper=1, inplace=True)



# D_sector :: Same, but at Mouginot sector scale
# D_sector_err ::
# D_sector_fill ::
D_sectors = DD.groupby('name').sum().drop(['ones','sectors','gates'], axis=1)
D_sectors_err = DD_err.groupby('name').sum().drop(['ones','sectors','gates'], axis=1)
D_sectors_fill_weight = pd.DataFrame().reindex_like(D_sectors)
for s in D_sectors.index:
    s_idx = (DD['name'] == s)
    D_sectors_fill_weight.loc[s] = ((D[s_idx]*fill[s_idx])/D[s_idx].sum()).sum()

D_sectors.columns = D_sectors.columns.astype(np.str).astype('datetime64[ns]')
D_sectors_err.columns = D_sectors_err.columns.astype(np.str).astype('datetime64[ns]')
D_sectors_fill_weight.columns = D_sectors_fill_weight.columns.astype(np.str).astype('datetime64[ns]')
D_sectors_fill_weight.clip(lower=0, upper=1, inplace=True)


# D_region :: Same, but at Mouginot region scale
# D_region_err ::
# D_region_fill ::
D_regions = DD.groupby('regions').sum().drop(['ones','sectors','gates'], axis=1)
D_regions_err = DD_err.groupby('regions').sum().drop(['ones','sectors','gates'], axis=1)
D_regions_fill_weight = pd.DataFrame().reindex_like(D_regions)
for r in D_regions.index:
    r_idx = DD['regions'] == r
    D_regions_fill_weight.loc[r] = ((D[r_idx]*fill[r_idx])/D[r_idx].sum()).sum()
    
    # # or, broken apart into simple steps.
    # # Whether any given pixel is filled (1) or not (0).
    # r_fill = fill[DD['regions'] == r].fillna(value=0)
    # # Discharge for each pixel in this region, using filling
    # r_filled_D = DD[DD['regions'] == r].drop(['sectors','regions','ones'], axis=1)
    # # weighted filling for this region
    # r_fill_weight = ((r_filled_D*r_fill)/r_filled_D.sum()).sum()
    # D_regions_fill_weight.loc[r] = r_fill_weight
    
D_regions.columns = D_regions.columns.astype(np.str).astype('datetime64[ns]')
D_regions_err.columns = D_regions_err.columns.astype(np.str).astype('datetime64[ns]')
D_regions_fill_weight.columns = D_regions_fill_weight.columns.astype(np.str).astype('datetime64[ns]')
D_regions_fill_weight.clip(lower=0, upper=1, inplace=True)


# D_all :: Same, but all GIS
# D_all_err ::
# D_all_fill ::
D_all = DD.drop(['regions','sectors','ones','name','gates'], axis=1).sum()
D_all_err = DD_err.drop(['regions','sectors','ones','name','gates'], axis=1).sum()
D_all_fill_weight = pd.Series().reindex_like(D_all)
for c in D.columns:
    D_all_fill_weight.loc[c] = (fill[c] * (D[c] / D[c].sum())).sum()
#+END_SRC

*** SAVE & RESTORE STATE

#+BEGIN_SRC jupyter-python :results raw drawer :tangle no
%store D
%store D_err
%store fill
%store D_gates
%store D_gates_err
%store D_gates_fill_weight
%store D_sectors
%store D_sectors_err
%store D_sectors_fill_weight
%store D_regions
%store D_regions_err
%store D_regions_fill_weight
%store D_all
%store D_all_err
%store D_all_fill_weight
%store meta
#+END_SRC

#+BEGIN_SRC jupyter-python :results raw drawer :tangle no
%store -r

D = D.T['2000':].T
D_err = D_err.T['2000':].T
fill = fill.T['2000':].T
D_gates = D_gates.T['2000':].T
D_gates_err = D_gates_err.T['2000':].T
D_gates_fill_weight = D_gates_fill_weight.T['2000':].T
D_sectors = D_sectors.T['2000':].T
D_sectors_err = D_sectors_err.T['2000':].T
D_sectors_fill_weight = D_sectors_fill_weight.T['2000':].T
D_regions = D_regions.T['2000':].T
D_regions_err = D_regions_err.T['2000':].T
D_regions_fill_weight = D_regions_fill_weight.T['2000':].T
D_all = D_all.T['2000':].T
D_all_err = D_all_err.T['2000':].T
D_all_fill_weight = D_all_fill_weight.T['2000':].T
#+END_SRC


*** Export Data
**** Crop time series
#+BEGIN_SRC jupyter-python :exports both :results raw drawer

STARTDATE='1986'
D_all = D_all.T[STARTDATE:].T
D_all_err = D_all_err.T[STARTDATE:].T
D_all_fill_weight = D_all_fill_weight.T[STARTDATE:].T
D_gates = D_gates.T[STARTDATE:].T
D_gates_err = D_gates_err.T[STARTDATE:].T
D_gates_fill_weight = D_gates_fill_weight.T[STARTDATE:].T
D_sectors = D_sectors.T[STARTDATE:].T
D_sectors_err = D_sectors_err.T[STARTDATE:].T
D_sectors_fill_weight = D_sectors_fill_weight.T[STARTDATE:].T
D_regions = D_regions.T[STARTDATE:].T
D_regions_err = D_regions_err.T[STARTDATE:].T
D_regions_fill_weight = D_regions_fill_weight.T[STARTDATE:].T
D_all = D_all.T[STARTDATE:].T
D_all_err = D_all_err.T[STARTDATE:].T
D_all_fill_weight = D_all_fill_weight.T[STARTDATE:].T

#+END_SRC

**** README

#+BEGIN_SRC bash :mkdirp ./out :eval no-export
cat << EOF > ./out/README.txt
<<README>>
EOF

cat << EOF | cut -c2- >> ./out/README.txt 
 * Version

 This version of this README generated from git commit: $(git describe --always)
EOF

#+END_SRC

#+RESULTS:

#+NAME: README
#+BEGIN_SRC org
README for "Greenland Ice Sheet solid ice discharge from 1986 through March 2020"
 
Reference paper: doi:10.5194/essd-12-1367-2020  https://doi.org/10.5194/essd-12-1367-2020
Data Citations: doi:10.22008/promice/data/ice_discharge

Source: https://github.com/mankoff/ice_discharge

,* Usage instructions:

When using any of the following data, you are required to cite the paper and the data set.

,* Data Descriptions

Data sets released as part of this work include:
+ Discharge data
+ Gates
+ Surface Elevation Change
+ Code

Each are described briefly below.

,** Discharge Data

This data set is made up of the following files

| Filename            | Description                                                            |
|---------------------+------------------------------------------------------------------------|
| GIS_D.csv           | Greenland Ice Sheet cumulative discharge by timestamp                  |
| GIS_err.csv         | Errors for GIS_D.csv                                                   |
| GIS_coverage.csv    | Coverage for GIS_D.csv                                                 |
| GIS.nc              | Discharge, errors, and covarge for GIS                                 |
| region_D.csv        | Regional discharge                                                     |
| region_err.csv      | Errors for region_D.csv                                                |
| region_coverage.csv | Coverage for region_D.csv                                              |
| region.nc           | Discharge, errors, and covarge for GIS regions                         |
| sector_D.csv        | Sector discharge                                                       |
| sector_err.csv      | Errors for sector_D.csv                                                |
| sector_coverage.csv | Coverage for sector_D.csv                                              |
| sector.nc           | Discharge, errors, and covarge for GIS sectors                         |
| gate_D.csv          | Gate discharge                                                         |
| gate_err.csv        | Errors for gate_D.csv                                                  |
| gate_coverage.csv   | Coverage for gate_D.csv                                                |
| gate.nc             | Discharge, errors, and covarge for GIS gates - including gate metadata |
|---------------------+------------------------------------------------------------------------|
| gate_meta.csv       | Metadata for each gate                                                 |

D and err data have units [Gt yr-1].
Coverage is in range [0, 1]

,** Surface elevation change

See doi:10.22008/promice/data/DTU/surface_elevation_change/v1.0.0

,** Code

See https://github.com/mankoff/ice_discharge

#+END_SRC

**** Gates
***** D, err, coverage
#+BEGIN_SRC jupyter-python :exports both :results raw drawer
D_gatesT = D_gates.T
D_gates_errT = D_gates_err.T
D_gates_fill_weightT = D_gates_fill_weight.T

D_gatesT.index.name = "Date"
D_gates_errT.index.name = "Date"
D_gates_fill_weightT.index.name = "Date"

D_gatesT.to_csv('./out/gate_D.csv.zip', float_format='%.3f', compression='zip')
D_gates_errT.to_csv('./out/gate_err.csv.zip', float_format='%.3f', compression='zip')
D_gates_fill_weightT.to_csv('./out/gate_coverage.csv.zip', float_format='%.3f', compression='zip')
#+END_SRC

**** Sectors
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org
# meta_sector = pd.DataFrame(index=meta.groupby('sectors').first().index)
# meta_sector['mean x'] = meta.groupby('sectors').mean()['x'].round().astype(np.int)
# meta_sector['mean y'] = meta.groupby('sectors').mean()['y'].round().astype(np.int)
# meta_sector['n gates'] = meta.groupby('sectors').count()['gates'].round().astype(np.int)
# meta_sector['region'] = meta.groupby('sectors').first()['regions']

D_sectorsT = D_sectors.T
D_sectors_errT = D_sectors_err.T
D_sectors_fill_weightT = D_sectors_fill_weight.T

D_sectorsT.index.name = "Date"
D_sectors_errT.index.name = "Date"
D_sectors_fill_weightT.index.name = "Date"

# meta_sector.to_csv('./out/sector_meta.csv')
D_sectorsT.to_csv('./out/sector_D.csv.zip', float_format='%.3f', compression='zip')
D_sectors_errT.to_csv('./out/sector_err.csv.zip', float_format='%.3f', compression='zip')
D_sectors_fill_weightT.to_csv('./out/sector_coverage.csv.zip', float_format='%.3f', compression='zip')

# meta_sector.head(10)
#+END_SRC

**** Regions
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org
# meta_region = pd.DataFrame(index=meta.groupby('regions').first().index)
# meta_region['n gates'] = meta.groupby('regions').count()['gates'].round().astype(np.int)

D_regionsT = D_regions.T
D_regions_errT = D_regions_err.T
D_regions_fill_weightT = D_regions_fill_weight.T
D_regionsT.index.name = "Date"
D_regions_errT.index.name = "Date"
D_regions_fill_weightT.index.name = "Date"

# meta_region.to_csv('./out/region_meta.csv')
D_regionsT.to_csv('./out/region_D.csv.zip', float_format='%.3f', compression='zip')
D_regions_errT.to_csv('./out/region_err.csv.zip', float_format='%.3f', compression='zip')
D_regions_fill_weightT.to_csv('./out/region_coverage.csv.zip', float_format='%.3f', compression='zip')

# meta_region.head(10)
#+END_SRC


**** GIS
#+BEGIN_SRC jupyter-python :exports both :results raw drawer
D_all.index.name = "Date"
D_all_err.index.name = "Date"
D_all_fill_weight.index.name = "Date"

D_all.to_csv('./out/GIS_D.csv.zip', float_format='%.3f', header=["Discharge [Gt yr-1]"], compression='zip')
D_all_err.to_csv('./out/GIS_err.csv.zip', float_format='%.3f', header=["Discharge Error [Gt yr-1]"], compression='zip')
D_all_fill_weight.to_csv('./out/GIS_coverage.csv.zip', float_format='%.3f', header=["Coverage [unit]"], compression='zip')
#+END_SRC

**** Gates
#+BEGIN_SRC bash :results verbatim :tangle gate_export.sh
g.mapset gates_100_5000

v.out.ogr input=gates_final output=./out/gates.kml format=KML --o
(cd out; zip gates.kmz gates.kml; rm gates.kml)
v.out.ogr input=gates_final output=./out/gates.gpkg format=GPKG --o
#+END_SRC

**** Elevation change

Done manually. See DOI

**** TODO Code

Make sure this Org file is tidy enough...

**** TODO Distribute
#+BEGIN_SRC bash :results verbatim :tangle no
(cd out; zip -e /media/kdm/promicedata/ice_discharge/gates/gates.zip gates*)
(cd out; zip -e /media/kdm/promicedata/ice_discharge/d/D.zip D*csv)
cp ./out/README.txt /media/kdm/promicedata/ice_discharge/

zip -e /media/kdm/promicedata/ice_discharge/code/mankoff_et_al.zip ice_discharge.org

cp ${DATADIR}/Khan_2016/dhdt_1995-2015_GrIS.txt /media/kdm/promicedata/ice_discharge/surface_elevation_change

#+END_SRC

** CSV to NetCDF
:PROPERTIES:
:header-args:jupyter-python+: :tangle csv2nc.py :session discharge :eval no-export
:END:

#+BEGIN_SRC jupyter-python
import pandas as pd
import xarray as xr
import numpy as np
import subprocess
import datetime
#+END_SRC

#+RESULTS:

*** GIS
#+BEGIN_SRC jupyter-python
csvfile = 'GIS'

df_D = pd.read_csv('./out/' + csvfile + '_D.csv.zip', index_col=0, parse_dates=True)
df_err = pd.read_csv('./out/' + csvfile + '_err.csv.zip', index_col=0, parse_dates=True)
df_coverage = pd.read_csv('./out/' + csvfile + '_coverage.csv.zip', index_col=0, parse_dates=True)

# ds = df_D.to_xarray()

# ds = xr.Dataset({'time': df_D})
ds = xr.Dataset()

ds["time"] = ("time", df_D.index)
ds["time"].attrs["long_name"] = "time of measurement"
ds["time"].attrs["standard_name"] = "time"
ds["time"].attrs["axis"] = "T"
ds["time"].attrs["cf_role"] = "timeseries_id"

ds["discharge"] = ("time", df_D['Discharge [Gt yr-1]'].astype(np.float32))
ds["discharge"].attrs["long_name"] = "Discharge"
ds["discharge"].attrs["standard_name"] = "land_ice_volume_flow_rate_due_to_calving_and_ice_front_melting"
ds["discharge"].attrs["units"] = "km3 yr-1"
ds["discharge"].attrs["coordinates"] = "time"

ds["err"] = ("time", df_err['Discharge Error [Gt yr-1]'].astype(np.float32))
ds["err"].attrs["long_name"] = "Error"
ds["err"].attrs["standard_name"] = "Uncertainty"
ds["err"].attrs["units"] = "km3 yr-1"
ds["err"].attrs["coordinates"] = "time"

ds["coverage"] = ("time", df_coverage['Coverage [unit]'].astype(np.float32))
ds["coverage"].attrs["long_name"] = "Coverage"
ds["coverage"].attrs["standard_name"] = "Coverage"
# ds["coverage"].attrs["units"] = "-"
ds["coverage"].attrs["coordinates"] = "time"

ds.attrs["featureType"] = "timeSeries"
ds.attrs["title"] = "Greenland discharge"
ds.attrs["summary"] = "Greenland discharge"
ds.attrs["keywords"] = "Greenland; Ice Discharge; Calving; Submarine Melt"
# ds.attrs["Conventions"] = "CF-1.8"
ds.attrs["source"] = "git commit: " + subprocess.check_output(["git", "describe", "--always"]).strip().decode('UTF-8')
# ds.attrs["comment"] = "TODO"
# ds.attrs["acknowledgment"] = "TODO"
# ds.attrs["license"] = "TODO"
# ds.attrs["date_created"] = datetime.datetime.now().strftime("%Y-%m-%d")
ds.attrs["creator_name"] = "Ken Mankoff"
ds.attrs["creator_email"] = "kdm@geus.dk"
ds.attrs["creator_url"] = "http://kenmankoff.com"
ds.attrs["institution"] = "GEUS"
# ds.attrs["time_coverage_start"] = "TODO"
# ds.attrs["time_coverage_end"] = "TODO"
# ds.attrs["time_coverage_resolution"] = "TODO"
ds.attrs["references"] = "10.22008/promice/ice_discharge"
ds.attrs["product_version"] = 2.0

# NOTE: Compression here does not save space
# comp = dict(zlib=True, complevel=5)
# encoding = {var: comp for var in ds.data_vars} # all
# encoding = {var: comp for var in ['time','coverage']} # some

ds.to_netcdf('./out/GIS.nc', mode='w')#, encoding=encoding)
#+END_SRC

#+RESULTS:

*** Region
#+BEGIN_SRC jupyter-python

csvfile = 'region'

df_D = pd.read_csv('./out/' + csvfile + '_D.csv.zip', index_col=0, parse_dates=True)
df_err = pd.read_csv('./out/' + csvfile + '_err.csv.zip', index_col=0, parse_dates=True)
df_coverage = pd.read_csv('./out/' + csvfile + '_coverage.csv.zip', index_col=0, parse_dates=True)

ds = xr.Dataset()

ds["time"] = (("time"), df_D.index)
ds["time"].attrs["cf_role"] = "timeseries_id"
ds["time"].attrs["standard_name"] = "time"
# ds["time"].attrs["units"] = "day of year"
# ds["time"].attrs["calendar"] = "julian"
ds["time"].attrs["axis"] = "T"

ds["region"] = (("region"), df_D.columns)
ds["region"].attrs["long_name"] = "Region"
ds["region"].attrs["standard_name"] = "N/A"
ds["region"].attrs["comment"] = "Regions from Mouginot (2019)"

ds["discharge"] = (("region", "time"), df_D.T.values.astype(np.float32))
ds["discharge"].attrs["long_name"] = "Discharge"
ds["discharge"].attrs["standard_name"] = "land_ice_volume_flow_rate_due_to_calving_and_ice_front_melting"
ds["discharge"].attrs["units"] = "km3 yr-1"
ds["discharge"].attrs["coordinates"] = "time region"

ds["err"] = (("region", "time"), df_err.T.values.astype(np.float32))
ds["err"].attrs["long_name"] = "Error"
ds["err"].attrs["standard_name"] = "Uncertainty"
ds["err"].attrs["units"] = "km3 yr-1"
ds["err"].attrs["coordinates"] = "time region"

ds["coverage"] = (("region", "time"), df_coverage.T.values.astype(np.float32))
ds["coverage"].attrs["long_name"] = "Coverage"
ds["coverage"].attrs["standard_name"] = "Coverage"
# ds["coverage"].attrs["units"] = "-"
ds["coverage"].attrs["coordinates"] = "time region"

# ds["lat"] = (("station"), meta.loc['lat'].astype(np.float32))
# #ds["lat"].attrs["coordinates"] = "station"
# ds["lat"].attrs["long_name"] = "latitude"
# ds["lat"].attrs["standard_name"] = "latitude"
# ds["lat"].attrs["units"] = "degrees_north"
# ds["lat"].attrs["axis"] = "Y"

# ds["lon"] = (("station"), meta.loc['lon'].astype(np.float32))
# #ds["lon"].attrs["coordinates"] = "station"
# ds["lon"].attrs["long_name"] = "longitude"
# ds["lon"].attrs["standard_name"] = "longitude"
# ds["lon"].attrs["units"] = "degrees_east"
# ds["lon"].attrs["axis"] = "X"

# ds["alt"] = (("station"), meta.loc['elev'].astype(np.float32))
# ds["alt"].attrs["long_name"] = "height_above_mean_sea_level"
# ds["alt"].attrs["standard_name"] = "altitude"
# # ds["alt"].attrs["long_name"] = "height above mean sea level"
# # ds["alt"].attrs["standard_name"] = "height"
# ds["alt"].attrs["units"] = "m"
# ds["alt"].attrs["positive"] = "up"
# ds["alt"].attrs["axis"] = "Z"

ds.attrs["featureType"] = "timeSeries"
ds.attrs["title"] = "Greenland discharge"
ds.attrs["summary"] = "Greenland discharge per region"
ds.attrs["keywords"] = "Greenland; Ice Discharge; Calving; Submarine Melt"
# ds.attrs["Conventions"] = "CF-1.8"
ds.attrs["source"] = "git commit: " + subprocess.check_output(["git", "describe", "--always"]).strip().decode('UTF-8')
# ds.attrs["comment"] = "TODO"
# ds.attrs["acknowledgment"] = "TODO"
# ds.attrs["license"] = "TODO"
# ds.attrs["date_created"] = datetime.datetime.now().strftime("%Y-%m-%d")
ds.attrs["creator_name"] = "Ken Mankoff"
ds.attrs["creator_email"] = "kdm@geus.dk"
ds.attrs["creator_url"] = "http://kenmankoff.com"
ds.attrs["institution"] = "GEUS"
# ds.attrs["time_coverage_start"] = "TODO"
# ds.attrs["time_coverage_end"] = "TODO"
# ds.attrs["time_coverage_resolution"] = "TODO"
ds.attrs["references"] = "10.22008/promice/ice_discharge"
ds.attrs["product_version"] = 2.0

comp = dict(zlib=True, complevel=9)
encoding = {var: comp for var in ds.data_vars} # all

ds.to_netcdf('./out/region.nc', mode='w', encoding=encoding)
#+END_SRC

#+RESULTS:

*** Sectors
#+BEGIN_SRC jupyter-python

csvfile = 'sector'

df_D = pd.read_csv('./out/' + csvfile + '_D.csv.zip', index_col=0, parse_dates=True)
df_err = pd.read_csv('./out/' + csvfile + '_err.csv.zip', index_col=0, parse_dates=True)
df_coverage = pd.read_csv('./out/' + csvfile + '_coverage.csv.zip', index_col=0, parse_dates=True)

ds = xr.Dataset()

ds["time"] = (("time"), df_D.index)
ds["time"].attrs["cf_role"] = "timeseries_id"
ds["time"].attrs["standard_name"] = "time"
# ds["time"].attrs["units"] = "day of year"
# ds["time"].attrs["calendar"] = "julian"
ds["time"].attrs["axis"] = "T"

ds["sector"] = (("sector"), df_D.columns)
ds["sector"].attrs["long_name"] = "Sector"
ds["sector"].attrs["standard_name"] = "N/A"
ds["sector"].attrs["comment"] = "Sectors from Mouginot (2019)"

ds["discharge"] = (("sector", "time"), df_D.T.values.astype(np.float32))
ds["discharge"].attrs["long_name"] = "Discharge"
ds["discharge"].attrs["standard_name"] = "land_ice_volume_flow_rate_due_to_calving_and_ice_front_melting"
ds["discharge"].attrs["units"] = "km3 yr-1"
ds["discharge"].attrs["coordinates"] = "time sector"

ds["err"] = (("sector", "time"), df_err.T.values.astype(np.float32))
ds["err"].attrs["long_name"] = "Error"
ds["err"].attrs["standard_name"] = "Uncertainty"
ds["err"].attrs["units"] = "km3 yr-1"
ds["err"].attrs["coordinates"] = "time sector"

ds["coverage"] = (("sector", "time"), df_coverage.T.values.astype(np.float32))
ds["coverage"].attrs["long_name"] = "Coverage"
ds["coverage"].attrs["standard_name"] = "Coverage"
# ds["coverage"].attrs["units"] = "-"
ds["coverage"].attrs["coordinates"] = "time sector"

# ds["lat"] = (("station"), meta.loc['lat'].astype(np.float32))
# #ds["lat"].attrs["coordinates"] = "station"
# ds["lat"].attrs["long_name"] = "latitude"
# ds["lat"].attrs["standard_name"] = "latitude"
# ds["lat"].attrs["units"] = "degrees_north"
# ds["lat"].attrs["axis"] = "Y"

# ds["lon"] = (("station"), meta.loc['lon'].astype(np.float32))
# #ds["lon"].attrs["coordinates"] = "station"
# ds["lon"].attrs["long_name"] = "longitude"
# ds["lon"].attrs["standard_name"] = "longitude"
# ds["lon"].attrs["units"] = "degrees_east"
# ds["lon"].attrs["axis"] = "X"

# ds["alt"] = (("station"), meta.loc['elev'].astype(np.float32))
# ds["alt"].attrs["long_name"] = "height_above_mean_sea_level"
# ds["alt"].attrs["standard_name"] = "altitude"
# # ds["alt"].attrs["long_name"] = "height above mean sea level"
# # ds["alt"].attrs["standard_name"] = "height"
# ds["alt"].attrs["units"] = "m"
# ds["alt"].attrs["positive"] = "up"
# ds["alt"].attrs["axis"] = "Z"

ds.attrs["featureType"] = "timeSeries"
ds.attrs["title"] = "Greenland discharge"
ds.attrs["summary"] = "Greenland discharge per sector"
ds.attrs["keywords"] = "Greenland; Ice Discharge; Calving; Submarine Melt"
# ds.attrs["Conventions"] = "CF-1.8"
ds.attrs["source"] = "git commit: " + subprocess.check_output(["git", "describe", "--always"]).strip().decode('UTF-8')
# ds.attrs["comment"] = "TODO"
# ds.attrs["acknowledgment"] = "TODO"
# ds.attrs["license"] = "TODO"
# ds.attrs["date_created"] = datetime.datetime.now().strftime("%Y-%m-%d")
ds.attrs["creator_name"] = "Ken Mankoff"
ds.attrs["creator_email"] = "kdm@geus.dk"
ds.attrs["creator_url"] = "http://kenmankoff.com"
ds.attrs["institution"] = "GEUS"
# ds.attrs["time_coverage_start"] = "TODO"
# ds.attrs["time_coverage_end"] = "TODO"
# ds.attrs["time_coverage_resolution"] = "TODO"
ds.attrs["references"] = "10.22008/promice/ice_discharge"
ds.attrs["product_version"] = 2.0

comp = dict(zlib=True, complevel=9)
encoding = {var: comp for var in ds.data_vars} # all

ds.to_netcdf('./out/sector.nc', mode='w', encoding=encoding)
#+END_SRC

#+RESULTS:

*** Gates

#+BEGIN_SRC jupyter-python

csvfile = 'gate'

df_D = pd.read_csv('./out/' + csvfile + '_D.csv.zip', index_col=0, parse_dates=True)
df_err = pd.read_csv('./out/' + csvfile + '_err.csv.zip', index_col=0, parse_dates=True)
df_coverage = pd.read_csv('./out/' + csvfile + '_coverage.csv.zip', index_col=0, parse_dates=True)

meta = pd.read_csv("./out/gate_meta.csv.zip")

ds = xr.Dataset()

ds["time"] = (("time"), df_D.index)
ds["time"].attrs["cf_role"] = "timeseries_id"
ds["time"].attrs["standard_name"] = "time"
# ds["time"].attrs["units"] = "day of year"
# ds["time"].attrs["calendar"] = "julian"
ds["time"].attrs["axis"] = "T"

ds["gate"] = (("gate"), df_D.columns.astype(np.int32))
ds["gate"].attrs["long_name"] = "Gate"
ds["gate"].attrs["standard_name"] = "N/A"

ds["discharge"] = (("gate", "time"), df_D.T.values.astype(np.float32))
ds["discharge"].attrs["long_name"] = "Discharge"
ds["discharge"].attrs["standard_name"] = "land_ice_volume_flow_rate_due_to_calving_and_ice_front_melting"
ds["discharge"].attrs["units"] = "km3 yr-1"
ds["discharge"].attrs["coordinates"] = "time gate"

ds["err"] = (("gate", "time"), df_err.T.values.astype(np.float32))
ds["err"].attrs["long_name"] = "Error"
ds["err"].attrs["standard_name"] = "Uncertainty"
ds["err"].attrs["units"] = "km3 yr-1"
ds["err"].attrs["coordinates"] = "time gate"

ds["coverage"] = (("gate", "time"), df_coverage.T.values.astype(np.float32))
ds["coverage"].attrs["long_name"] = "Coverage"
ds["coverage"].attrs["standard_name"] = "Coverage"
# ds["coverage"].attrs["units"] = "-"
ds["coverage"].attrs["coordinates"] = "time gate"

ds["mean_x"] = (("gate"), meta.mean_x.astype(np.int32))
ds["mean_x"].attrs["long_name"] = "Mean x coordinate of gate in EPSG:3413"
ds["mean_x"].attrs["standard_name"] = "Mean x"

ds["mean_y"] = (("gate"), meta.mean_y.astype(np.int32))
ds["mean_y"].attrs["long_name"] = "Mean y coordinate of gate in EPSG:3413"
ds["mean_y"].attrs["standard_name"] = "Mean y"

ds["mean_lon"] = (("gate"), meta.lon.astype(np.float32))
ds["mean_lon"].attrs["long_name"] = "Mean lon coordinate of gate"
ds["mean_lon"].attrs["standard_name"] = "Longitude"

ds["mean_lat"] = (("gate"), meta.lat.astype(np.float32))
ds["mean_lat"].attrs["long_name"] = "Mean lat coordinate of gate"
ds["mean_lat"].attrs["standard_name"] = "Latitude"

ds["sector"] = (("gate"), meta.sector.astype(np.int32))
ds["sector"].attrs["long_name"] = "Sector containing gate"

ds["region"] = (("gate"), meta.region)
ds["region"].attrs["long_name"] = "Region containing gate"

ds["name_Bjørk"] = (("gate"), meta.Bjork_2015)
ds["name_Bjørk"].attrs["long_name"] = "Nearest name from Bjørk (2015)"

ds["name_Mouginot"] = (("gate"), meta.Mouginot_2019)
ds["name_Mouginot"].attrs["long_name"] = "Nearest name from Mouginot (2019)"

ds.attrs["featureType"] = "timeSeries"
ds.attrs["title"] = "Greenland discharge"
ds.attrs["summary"] = "Greenland discharge per gate"
ds.attrs["keywords"] = "Greenland; Ice Discharge; Calving; Submarine Melt"
# ds.attrs["Conventions"] = "CF-1.8"
ds.attrs["source"] = "git commit: " + subprocess.check_output(["git", "describe", "--always"]).strip().decode('UTF-8')
# ds.attrs["comment"] = "TODO"
# ds.attrs["acknowledgment"] = "TODO"
# ds.attrs["license"] = "TODO"
# ds.attrs["date_created"] = datetime.datetime.now().strftime("%Y-%m-%d")
ds.attrs["creator_name"] = "Ken Mankoff"
ds.attrs["creator_email"] = "kdm@geus.dk"
ds.attrs["creator_url"] = "http://kenmankoff.com"
ds.attrs["institution"] = "GEUS"
# ds.attrs["time_coverage_start"] = "TODO"
# ds.attrs["time_coverage_end"] = "TODO"
# ds.attrs["time_coverage_resolution"] = "TODO"
ds.attrs["references"] = "10.22008/promice/ice_discharge"
ds.attrs["product_version"] = 2.0

comp = dict(zlib=True, complevel=9)
encoding = {var: comp for var in ds.data_vars} # all

ds.to_netcdf('./out/gate.nc', mode='w', encoding=encoding)
#+END_SRC

#+RESULTS:


** Figures
:PROPERTIES:
:header-args:jupyter-python+: :tangle figures.py
:header-args:jupyter-python+: :session sob_figures
:END:
*** Overview
:PROPERTIES:
:header-args:jupyter-python+: :tangle no
:END:
**** Top contributors
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
import pandas as pd

# annual average
df = pd.read_csv('./out/sector_D.csv.zip', index_col=0, parse_dates=True)\
       .resample('1D')\
       .mean()\
       .interpolate(method='time')\
       .resample('A')\
       .mean()\

top_few = df.iloc[-1].sort_values(ascending=False).head(8)
# names = {}
# for m in mouginot_names: names[m] = ""
# names["JAKOBSHAVN_ISBRAE"] = "Sermeq Kujalleq (Jakobshavn Isbræ)"
# names["KOGE_BUGT_C"] = "(Køge Bugt C)"
# names["ZACHARIAE_ISSTROM"] = "Zachariae Isstrøm"
# names["RINK_ISBRAE"] = 'Kangilliup Sermia (Rink Isbræ)',
# names["NIOGHALVFJERDSFJORDEN"] = "(Nioghalvfjerdsfjorden)"

meta = pd.read_csv("./out/gate_meta.csv.zip")

out = pd.DataFrame(index=top_few.index, columns=["D","x","y"])
for name in out.index:
    out.loc[name]["D"] = top_few[name]
    out.loc[name]["x"] = meta[meta["Mouginot_2019"] == name]["mean_x"].values[0]
    out.loc[name]["y"] = meta[meta["Mouginot_2019"] == name]["mean_y"].values[0]

out.to_csv('./tmp/overview_D.csv.zip')
out
#+END_SRC

#+RESULTS:
|                       |       D |       x |            y |
|-----------------------+---------+---------+--------------|
| JAKOBSHAVN_ISBRAE     | 37.3928 | -182123 |  -2.2672e+06 |
| HELHEIMGLETSCHER      | 32.0162 |  304157 | -2.57653e+06 |
| KANGERLUSSUAQ         | 26.9205 |  487300 | -2.28998e+06 |
| ZACHARIAE_ISSTROM     | 16.1877 |  488407 | -1.10017e+06 |
| KOGE_BUGT_C           | 15.5831 |  184648 | -2.72185e+06 |
| NIOGHALVFJERDSFJORDEN | 13.6186 |  439187 |  -1.0736e+06 |
| RINK_ISBRAE           | 12.5282 | -224240 | -1.97637e+06 |
| PETERMANN_GLETSCHER   | 12.0545 | -261888 |      -996839 |

**** Prep data

#+BEGIN_SRC bash :results verbatim
grass -c ./G/fig_overview
g.region -d
r.mask -r


###
### vel
###
r.mask mask_GIC@Mouginot_2019 --o
r.mapcalc "vel = vel_baseline@MEaSUREs.0478" --o
r.mask -r

r.mapcalc "vel2 = if(vel < 100, null(), vel)" --o
# r.mapcalc "vel2 = if(vel2 > max(vel2)*0.5, max(vel2)*0.5, vel2)" --o
# r.colors -g map=vel2 color=oranges

cat << EOF | r.colors map=vel2 rules=-
0 255:255:255
99 255:255:255
100 255:235:215
500 255:128:0
15000 255:128:0
nv 255:255:255
default 255:255:255
EOF

g.copy vector=sectors@Mouginot_2019,sectors --o
g.copy vector=regions@Mouginot_2019,regions --o
g.copy vector=gates_final@gates_100_5000,gates --o


### get baseline discharge at each gate
v.in.ascii input=./tmp/overview_D.csv.zip output=overview_D separator=, skip=1 x=2 y=3 --o


###
### Ocean Basemap
###
r.mask -i mask@BedMachine
g.region res=1000
r.relief input=bed@BedMachine output=ocean_relief zscale=30  --o
# r.colors map=bed@BedMachine color=srtm_plus
r.colors -ne map=bed@BedMachine color=water
r.shade shade=ocean_relief color=bed@BedMachine output=ocean_shade --o
g.region -d


r.mask -r 
g.region res=2500
r.relief input=bed@BedMachine output=land_relief zscale=30  --o
r.mapcalc "land_relief = land_relief" --o
# r.colors map=bed@BedMachine color=srtm_plus
# r.shade shade=land_relief color=bed@BedMachine output=land_shade --o
g.region -d




g.region -d
r.mask -r
g.copy mask_ice@BedMachine,ice --o
# r.mapcalc "ice = if(isnull(ice), 2, 1)" --o
cat << EOF | r.colors map=ice rules=-
# 2 0:0:0
1 255:255:255
EOF



r.mask -r
d.mon start=wx0
d.erase
d.rast land_relief
d.rast ocean_shade
# d.rast ocean_relief
# d.rast land_shade
d.rast ice
d.rast vel2


## now patch them all to there R,G,B channels so we can produce a single ps.map raster.

g.region res=1000
r.mapcalc --o <<EOF
ocean.r = if(isnull(ocean_shade), null(), r#ocean_shade)
ocean.g = if(isnull(ocean_shade), null(), g#ocean_shade)
ocean.b = if(isnull(ocean_shade), null(), b#ocean_shade)
land.r = if(isnull(land_relief), null(), r#land_relief)
land.g = if(isnull(land_relief), null(), g#land_relief)
land.b = if(isnull(land_relief), null(), b#land_relief)
ice.r = if(isnull(ice), null(), r#ice)
ice.g = if(isnull(ice), null(), g#ice)
ice.b = if(isnull(ice), null(), b#ice)
vel.r = if(isnull(vel2), null(), r#vel2)
vel.g = if(isnull(vel2), null(), g#vel2)
vel.b = if(isnull(vel2), null(), b#vel2)
EOF

r.patch -s input=vel.r,ice.r,ocean.r,land.r output=rr --o
r.patch -s input=vel.g,ice.g,ocean.g,land.g output=gg --o
r.patch -s input=vel.b,ice.b,ocean.b,land.b output=bb --o

r.colors map=rr,gg,bb color=grey

d.erase
d.rgb -n red=rr green=gg blue=bb


g.region res=1000
cat << EOF | ps.map input=- output=./figs/psmap/BASE.ps --o
border n
rgb rr gg bb
EOF
g.region -d
# convert ${CONVERTOPTS} -transparent white ./figs/psmap/vel.ps ./figs/psmap/vel.png



# gates at each of the top 7 dischargers
# for row in $(db.select -c table=overview_D | tr ' ' '_' | tac); do
g.region -d
r.mapcalc "vel3 = vel2" --o

# r.colors map=vel3 color=oranges
cat << EOF | r.colors map=vel3 rules=-
0 255:255:255
99 255:255:255
100 255:235:215
10000 255:128:0
20000 255:128:0
nv 255:255:255
default 255:255:255
EOF



mkdir -p ./figs/psmap
id=$(db.select -c sql='select cat from overview_D'|head -n1) # DEBUG
for id in $(db.select -c sql='select cat from overview_D'); do
  xy=$(db.select -c sql="select int_1,int_2 from overview_D where cat == '${id}'")
  x=$(echo ${xy}|cut -d"|" -f1)
  y=$(echo ${xy}|cut -d"|" -f2)
  g.region w=$x s=$y e=$(( $x + 1 )) n=$(( $y + 1))
  g.region w=w-15000 s=s-15000 e=e+15000 n=n+15000 res=200
  g.region save=${id} --o

  cat << EOF | ps.map input=- output=./figs/psmap/${id}.ps --o
border n
raster vel3
vareas gates
  color black
  end
EOF
  convert -trim ./figs/psmap/${id}.{ps,png}
done


# overview map w/ boxes
# db.select -c sql='select cat from overview_D'
# 1 through 8

g.region -d res=1000
cat << EOF | ps.map input=- output=./figs/psmap/BASE_boxes.ps --o
border n
rgb rr gg bb
region 1
  color black
  width 1
  end  
region 2
  color black
  width 1
  end  
region 3
  color black
  width 1
  end  
region 4
  color black
  width 1
  end  
region 5
  color black
  width 1
  end  
region 6
  color black
  width 1
  end  
region 7
  color black
  width 1
  end  
region 8
  color black
  width 1
  end  
EOF
g.region -d
#+END_SRC

**** ps.map overview
+ create named regions with
  + d.mon start=wx0
  + d.rast vel
  + d.rast gates color=red
  + zoom, then "set computational region extent from display"
  + then "g.region save=<name>"

#+BEGIN_SRC bash :results verbatim
g.mapset fig_overview
g.list type=region mapset=.
# g.remove -f type=region pattern=*
#+END_SRC


#+BEGIN_SRC PSMAP :tangle overview.psmap
border n

rgb rr gg bb

# raster vel2
#+END_SRC

**** ps.map inset

#+BEGIN_SRC PSMAP :tangle overview_inset.psmap
border n

raster vel3

vareas gates
  color black
  end

end
#+END_SRC

**** Run psmap

#+BEGIN_SRC bash :results verbatim
g.region -d res=5000 -pa
ps.map input=overview.psmap output=overview.ps --o; o overview.ps
# ps.map -e input=overview.psmap output=overview.eps --o; o overview.eps

region=$(g.list type=region mapset=.|head -n1) # DEBUG
for region in $(g.list type=region mapset=.); do
  g.region ${region}
  g.region res=100
  ps.map input=overview_inset.psmap output=${region}.ps --o; 
  # o ${region}.ps
  convert -trim -transparent white ${region}.ps ./figs/psmap/${region}.png
  rm ${region}.ps
  # o ./figs/psmap/${region}.png
done
#+END_SRC

**** Configure in Inkscape

Manually align and adjust in Inkscape, add text, boxes, etc. then...

#+BEGIN_SRC bash :results verbatim
inkscape -z ./figs/overview.svg -e ./figs/overview.png
#+END_SRC

*** Discharge Time Series - GIS
#+NAME: fig:discharge_ts
#+BEGIN_SRC jupyter-python :results raw drawer :display text/plain :eval no-export
import matplotlib.gridspec as gridspec
import numpy as np
import pandas as pd
from adjust_spines import adjust_spines as adj
import matplotlib.pyplot as plt
import datetime as dt

plt.close(1)

fig = plt.figure(1, figsize=(9,5)) # w,h
fig.clf()
grid = plt.GridSpec(2, 1, height_ratios=[1,5], hspace=0.1) # h, w

ax_D = fig.add_subplot(grid[1,:])
ax_coverage = fig.add_subplot(grid[0,:], sharex=ax_D)

adj(ax_D, ['left','bottom'])
adj(ax_coverage, ['left'])
ax_coverage.minorticks_off()
ax_coverage.tick_params(length=0, which='both', axis='x')

D = pd.read_csv("./out/GIS_D.csv.zip", index_col=0, parse_dates=True)
err = pd.read_csv("./out/GIS_err.csv.zip", index_col=0, parse_dates=True)
coverage = pd.read_csv("./out/GIS_coverage.csv.zip", index_col=0, parse_dates=True)

THRESH = coverage.values.flatten() < 0.5
D[THRESH] = np.nan
err[THRESH] = np.nan
coverage[THRESH] = np.nan

# Add t0 and t_end so that graph covers a nice time span
def pad_df(df):
    df = df.append(pd.DataFrame(index=np.array(['1986-01-01']).astype('datetime64[ns]')), sort=True)
    idx = str(df.index.year.max())+'-12-31'
    df = df.append(pd.DataFrame(index=np.array([idx]).astype('datetime64[ns]')), sort=True)
    df = df.sort_index()
    return df

D = pad_df(D)
err = pad_df(err)
coverage = pad_df(coverage)

MS=4
ax_D.errorbar(err.index, D.values, fmt='o', mfc='none', mec='k', ms=MS)
for i in np.arange(D.values.size):
    ax_D.errorbar(D.index[i], D.values[i],
                  yerr=err.values[i], ecolor='grey',
                  alpha=coverage.values[i][0],
                  marker='o', ms=MS, mfc='k', mec='k')

# Take annual average from daily interpolated rather than the existing samples.
D_day_year = D.resample('1D').mean().interpolate(method='time',limit_area='inside',axis=0).resample('A').mean()
err_day_year = err.resample('1D').mean().interpolate(method='time',limit_area='inside',axis=0).resample('A').mean()

# No annual average if few sample
num_obs = D.resample('Y').count().values
D_day_year[num_obs < 4] = np.nan
err_day_year[num_obs < 4] = np.nan

Z=99
D_day_year.plot(drawstyle='steps', linewidth=3, ax=ax_D, alpha=0.75, color='orange', zorder=Z)

ax_D.legend("", framealpha=0)
ax_D.set_xlabel('Time [Years]')
ax_D.set_ylabel('Discharge [Gt yr$^{-1}$]')

import matplotlib.dates as mdates
ax_D.xaxis.set_major_locator(mdates.YearLocator())
ax_D.minorticks_off()
ax_D.xaxis.set_tick_params(rotation=-90) #, ha="left", rotation_mode="anchor")
for tick in ax_D.xaxis.get_majorticklabels():
    tick.set_horizontalalignment("left")

ax_D.set_xlim(D.index[0], D.index[-1])

###
### Coverage
###

ax_coverage.scatter(coverage.index, coverage.values*100,
                    color='k',
                    marker='.',
                    alpha=0.25)
                  # linewidth=3,
ax_coverage.set_ylim(45,105)
ax_coverage.set_yticks([50,100])
ax_coverage.spines['left'].set_bounds(ax_coverage.get_ylim()[0],100)
ax_coverage.set_ylabel('Coverage [%]')

plt.savefig('./figs/discharge_ts.png', transparent=False, bbox_inches='tight', dpi=300)

disp = pd.DataFrame(index = D_day_year.index.year,
                    data = {'D' : D_day_year.values.flatten(), 
                            'err' : err_day_year.values.flatten()})
disp.index.name = 'Year'
disp
#+END_SRC

#+RESULTS: fig:discharge_ts
#+begin_example
               D        err
Year                       
1986         NaN        NaN
1987  451.164297  46.446428
1988  443.219029  45.239233
1989         NaN        NaN
1990         NaN        NaN
1991         NaN        NaN
1992         NaN        NaN
1993         NaN        NaN
1994         NaN        NaN
1995         NaN        NaN
1996         NaN        NaN
1997         NaN        NaN
1998         NaN        NaN
1999         NaN        NaN
2000  441.526774  43.963446
2001  446.174762  44.229103
2002  463.633305  45.887799
2003  474.837355  47.056122
2004  487.215455  48.619623
2005  498.297984  49.601245
2006  489.633611  48.971416
2007  480.982937  48.443685
2008  483.915329  49.300849
2009  490.040056  49.970107
2010  493.989798  50.597119
2011  496.318168  50.946029
2012  492.069664  51.058259
2013  495.813092  51.092726
2014  498.359667  51.217713
2015  501.348847  51.393434
2016  496.924815  51.056236
2017  504.872364  51.345507
2018  496.173151  50.461346
2019  498.833473  51.069499
2020  506.045755  51.970284
#+end_example





*** Discharge Time Series - Regions
#+NAME: fig:discharge_ts_regions
#+BEGIN_SRC jupyter-python :results raw drawer :display text/plain :eval no-export
import matplotlib.gridspec as gridspec
import numpy as np
import pandas as pd
from adjust_spines import adjust_spines as adj
import datetime as dt

plt.close(1)

fig = plt.figure(1, figsize=(9,7)) # w,h
fig.clf()
# fig.set_tight_layout(True)
grid = plt.GridSpec(2, 1, height_ratios=[1,6], hspace=0.1) # h, w

ax_D = fig.add_subplot(grid[1,:])
ax_coverage = fig.add_subplot(grid[0,:], sharex=ax_D)

from adjust_spines import adjust_spines as adj
adj(ax_D, ['left','bottom'])
adj(ax_coverage, ['left'])
ax_coverage.minorticks_off()
ax_coverage.tick_params(length=0, which='both', axis='x')


D = pd.read_csv("./out/region_D.csv.zip", index_col=0, parse_dates=True)
err = pd.read_csv("./out/region_err.csv.zip", index_col=0, parse_dates=True)
coverage = pd.read_csv("./out/region_coverage.csv.zip", index_col=0, parse_dates=True)

THRESH = coverage < 0.5
D[THRESH] = np.nan
err[THRESH] = np.nan
coverage[THRESH] = np.nan

def pad_df(df):
    df = df.append(pd.DataFrame(index=np.array(['1986-01-01']).astype('datetime64[ns]')), sort=True)
    idx = str(df.index.year.max())+'-12-31'
    df = df.append(pd.DataFrame(index=np.array([idx]).astype('datetime64[ns]')), sort=True)
    df = df.sort_index()
    return df

D = pad_df(D)
err = pad_df(err)
coverage = pad_df(coverage)

### Take annual average from daily interpolated rather than the existing samples.
D_day_year = D.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()
err_day_year=err.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

# No annual average if few sample
num_obs = D.resample('Y').count().values
D_day_year[num_obs<=3] = np.nan
err_day_year[num_obs<=3] = np.nan

MS=4
Z=99
for r in D.columns:
    e = ax_D.errorbar(D[r].index, D[r].values, fmt='o', mfc='none', ms=MS)
    C = e.lines[0].get_color()
    D_day_year[r].plot(drawstyle='steps', linewidth=2, ax=ax_D,
                       color=C,
                       # color='orange'
                       alpha=0.75, zorder=Z)
    for i in np.arange(D.index.size):
        ax_D.errorbar(D.iloc[i].name, D.iloc[i][r],
                      yerr=err.iloc[i][r], ecolor='gray',
                      marker='o', ms=MS,
                      # mfc='k', mec='k',
                      mfc=C, mec=C,
                      alpha=coverage.iloc[i][r])

    tx = pd.Timestamp(str(D[r].dropna().index[-1].year) + '-01-01') + dt.timedelta(days=380)
    ty = D_day_year[r].iloc[-1]
    # if r in ['CE', 'SW']: ty=ty-4
    # if r == 'NE': ty=ty+4
    # if r == 'NO': ty=ty-2
    ax_D.text(tx, ty, r, verticalalignment='center', horizontalalignment='left')

    # if r in ['CE','NE','SE']:
    ax_coverage.scatter(coverage.index, coverage[r]*100,
                        marker='.',
                        alpha=0.25,
                        color=C)

ax_coverage.set_ylabel('Coverage [%]')
ax_coverage.set_ylim(45,105)
ax_coverage.set_yticks([50,100])
ax_coverage.spines['left'].set_bounds(ax_coverage.get_ylim()[0],100)
    
import matplotlib.dates as mdates
ax_D.xaxis.set_major_locator(mdates.YearLocator())

# plt.legend()
ax_D.legend("", framealpha=0)
ax_D.set_xlabel('Time [Years]')
ax_D.set_ylabel('Discharge [Gt yr$^{-1}$]')
ax_D.set_xlim(D.index[0], D.index[-1])
ax_D.set_xticklabels(D.index.year.unique())
# ax_D.set_yscale('log')

ax_D.xaxis.set_tick_params(rotation=-90)
for tick in ax_D.xaxis.get_majorticklabels():
    tick.set_horizontalalignment("left")

plt.savefig('./figs/discharge_ts_regions.png', transparent=False, bbox_inches='tight', dpi=300)
# plt.savefig('./figs/discharge_ts_regions.pdf', transparent=True, bbox_inches='tight', dpi=300)

Err_pct = (err_day_year.values/D_day_year.values*100).round().astype(np.int).astype(np.str)
Err_pct[Err_pct.astype(np.float)<0] = 'NaN'
tbl = (D_day_year.round().fillna(value=0).astype(np.int).astype(np.str) + ' ('+Err_pct+')')
tbl.index = tbl.index.year.astype(np.str)
tbl.columns = [_ + ' (Err %)' for _ in tbl.columns]
tbl
#+END_SRC

#+RESULTS: fig:discharge_ts_regions
#+begin_example
     CE (Err %) CW (Err %) NE (Err %) NO (Err %) NW (Err %) SE (Err %) SW (Err %)
1986    69 (11)    0 (NaN)     23 (8)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)
1987    67 (11)     71 (8)     22 (8)    0 (NaN)     95 (8)    0 (NaN)    0 (NaN)
1988    67 (11)     69 (8)     22 (8)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)
1989    68 (11)     69 (8)     22 (8)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)
1990    70 (12)     68 (8)     22 (8)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)
1991    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)
1992    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)
1993    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    22 (14)
1994    69 (12)     70 (8)     23 (8)    0 (NaN)     95 (8)    0 (NaN)    0 (NaN)
1995    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)
1996    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)
1997    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)
1998    71 (11)     74 (8)     22 (8)    0 (NaN)     92 (8)   138 (12)    0 (NaN)
1999    69 (11)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)    0 (NaN)
2000    68 (11)     80 (8)     23 (8)    0 (NaN)     91 (8)   137 (12)    21 (14)
2001    69 (11)     81 (8)    0 (NaN)    0 (NaN)     92 (8)   137 (12)    20 (14)
2002    69 (11)     82 (8)    0 (NaN)    0 (NaN)     92 (8)   148 (11)    20 (14)
2003    71 (11)     85 (8)    0 (NaN)    0 (NaN)     94 (9)    0 (NaN)    0 (NaN)
2004    74 (11)     85 (8)    0 (NaN)    0 (NaN)     97 (9)   164 (11)    0 (NaN)
2005    84 (10)     84 (8)    0 (NaN)    0 (NaN)     97 (9)   164 (11)    0 (NaN)
2006    84 (10)     86 (8)     25 (8)    0 (NaN)     97 (9)   153 (12)    22 (15)
2007    80 (11)     87 (8)    0 (NaN)    0 (NaN)     96 (9)   147 (12)    21 (15)
2008    79 (11)     89 (8)    0 (NaN)    0 (NaN)     98 (9)   149 (12)    20 (15)
2009    78 (11)     90 (9)     25 (8)    0 (NaN)    100 (9)   155 (12)    20 (15)
2010    77 (11)     89 (9)    0 (NaN)    0 (NaN)    103 (9)   155 (12)    19 (16)
2011    79 (11)     88 (9)    0 (NaN)    0 (NaN)    105 (9)   153 (12)    21 (15)
2012    77 (11)     91 (9)    0 (NaN)    0 (NaN)    105 (9)   149 (12)    21 (16)
2013    78 (11)     94 (9)     26 (8)    0 (NaN)    106 (9)   148 (12)    21 (15)
2014    76 (11)     93 (9)     27 (9)    0 (NaN)    110 (9)   148 (12)    20 (15)
2015    76 (11)     93 (9)     28 (9)     25 (7)    110 (9)   150 (12)    20 (15)
2016    74 (11)     92 (9)     28 (9)     25 (7)    112 (9)   145 (12)    19 (15)
2017    78 (11)     83 (9)     29 (9)     27 (7)    115 (9)   153 (12)    20 (15)
2018    79 (11)     76 (9)     30 (9)     27 (7)    114 (9)   150 (12)    19 (15)
2019    79 (11)     78 (9)     30 (9)     27 (8)    110 (9)   156 (12)    19 (16)
2020    83 (11)     80 (9)     31 (9)     27 (7)    109 (9)   156 (12)    20 (15)
#+end_example

*** Region & Catchment Contributions
:PROPERTIES:
:header-args:jupyter-python+: :tangle no
:END:
**** 2000 to present mean
:PROPERTIES:
:ID:       eca400fe-cffc-4e6b-8fc1-694945093adb
:END:
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
D = pd.read_csv("./out/GIS_D.csv.zip", index_col=0, parse_dates=True)
err = pd.read_csv("./out/GIS_err.csv.zip", index_col=0, parse_dates=True)

D = D[D.index.year >= 2000]\
    .resample('1D',axis='rows')\
    .mean()\
    .interpolate(method='time',limit_area='inside')\
    .mean()

err = err[err.index.year >= 2000]\
      .resample('1D',axis='rows')\
      .mean()\
      .interpolate(method='time',limit_area='inside')\
      .mean()

print(D.values)
print(err.values)
#+END_SRC

#+RESULTS:
: [487.19668648]
: [49.41159182]




**** Discharge time series
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
D = pd.read_csv("./out/GIS_D.csv.zip", index_col=0, parse_dates=True)
err = pd.read_csv("./out/GIS_err.csv.zip", index_col=0, parse_dates=True)

D = D.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()
err = err.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

df = pd.DataFrame(index=D.index)
df['D'] = D
df['err'] = err

print("Min: ", df.loc[df['D'].idxmin])
print("Max: ", df.loc[df['D'].idxmin])
df
#+END_SRC

#+RESULTS:
:RESULTS:
: Min:  D      427.827952
: err     43.942927
: Name: 1991-12-31 00:00:00, dtype: float64
: Max:  D      427.827952
: err     43.942927
: Name: 1991-12-31 00:00:00, dtype: float64
| Date                |       D |     err |
|---------------------+---------+---------|
| 1986-12-31 00:00:00 | 460.657 | 48.8118 |
| 1987-12-31 00:00:00 | 454.746 | 47.241  |
| 1988-12-31 00:00:00 | 441.12  | 45.1609 |
| 1989-12-31 00:00:00 | 441.391 | 45.371  |
| 1990-12-31 00:00:00 | 442.079 | 46.2904 |
| 1991-12-31 00:00:00 | 427.828 | 43.9429 |
| 1992-12-31 00:00:00 | 433.964 | 44.2778 |
| 1993-12-31 00:00:00 | 437.895 | 44.3714 |
| 1994-12-31 00:00:00 | 449.451 | 45.4712 |
| 1995-12-31 00:00:00 | 430.565 | 43.6006 |
| 1996-12-31 00:00:00 | 428.762 | 43.882  |
| 1997-12-31 00:00:00 | 434.898 | 44.2766 |
| 1998-12-31 00:00:00 | 439.858 | 44.6603 |
| 1999-12-31 00:00:00 | 440.027 | 44.473  |
| 2000-12-31 00:00:00 | 441.409 | 44.0145 |
| 2001-12-31 00:00:00 | 445.557 | 44.233  |
| 2002-12-31 00:00:00 | 462.181 | 45.7331 |
| 2003-12-31 00:00:00 | 475.607 | 47.1169 |
| 2004-12-31 00:00:00 | 487.994 | 48.697  |
| 2005-12-31 00:00:00 | 498.405 | 49.635  |
| 2006-12-31 00:00:00 | 490.129 | 49.0221 |
| 2007-12-31 00:00:00 | 481.175 | 48.5049 |
| 2008-12-31 00:00:00 | 484.41  | 49.3283 |
| 2009-12-31 00:00:00 | 490.827 | 49.9816 |
| 2010-12-31 00:00:00 | 492.548 | 50.3766 |
| 2011-12-31 00:00:00 | 494.851 | 50.82   |
| 2012-12-31 00:00:00 | 492.288 | 51.1389 |
| 2013-12-31 00:00:00 | 495.925 | 51.1525 |
| 2014-12-31 00:00:00 | 498.919 | 51.3055 |
| 2015-12-31 00:00:00 | 501.462 | 51.4154 |
| 2016-12-31 00:00:00 | 496.946 | 51.0601 |
| 2017-12-31 00:00:00 | 504.878 | 51.3457 |
| 2018-12-31 00:00:00 | 496.305 | 50.4733 |
| 2019-12-31 00:00:00 | 498.833 | 51.0695 |
| 2020-12-31 00:00:00 | 506.046 | 51.9703 |
:END:


**** Contribution from SE
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
D = pd.read_csv("./out/region_D.csv.zip", index_col=0, parse_dates=True)
err = pd.read_csv("./out/region_err.csv.zip", index_col=0, parse_dates=True)

D = D.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()
err = err.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

print("D SE described:\n", D['SE'].describe())
print("\nD SE err percent:", (err['SE']/D['SE']*100).describe())

df = pd.DataFrame(index=D.index)
df['SE'] = D['SE']
df['SEerr'] = err['SE']
df
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
D SE described:
 count     35.000000
mean     148.216740
std        7.518810
min      136.531765
25%      142.593549
50%      148.150348
75%      153.733441
max      164.116536
Name: SE, dtype: float64

D SE err percent: count    35.000000
mean     11.940055
std       0.388591
min      11.250882
25%      11.729914
50%      11.887551
75%      12.181052
max      13.187159
Name: SE, dtype: float64
#+end_example
| Date                |      SE |   SEerr |
|---------------------+---------+---------|
| 1986-12-31 00:00:00 | 154.51  | 20.3755 |
| 1987-12-31 00:00:00 | 155.589 | 19.4583 |
| 1988-12-31 00:00:00 | 143.789 | 17.5009 |
| 1989-12-31 00:00:00 | 136.532 | 16.9245 |
| 1990-12-31 00:00:00 | 136.677 | 17.0721 |
| 1991-12-31 00:00:00 | 138.163 | 16.9269 |
| 1992-12-31 00:00:00 | 143.461 | 17.375  |
| 1993-12-31 00:00:00 | 145.099 | 17.4024 |
| 1994-12-31 00:00:00 | 152.55  | 17.8827 |
| 1995-12-31 00:00:00 | 144.904 | 17.1129 |
| 1996-12-31 00:00:00 | 140.925 | 17.2418 |
| 1997-12-31 00:00:00 | 141.726 | 17.3649 |
| 1998-12-31 00:00:00 | 139.523 | 17.0091 |
| 1999-12-31 00:00:00 | 140.59  | 17.0134 |
| 2000-12-31 00:00:00 | 136.541 | 16.182  |
| 2001-12-31 00:00:00 | 136.56  | 15.9836 |
| 2002-12-31 00:00:00 | 147.5   | 16.8723 |
| 2003-12-31 00:00:00 | 157.014 | 17.7174 |
| 2004-12-31 00:00:00 | 164.117 | 18.4646 |
| 2005-12-31 00:00:00 | 163.722 | 18.4991 |
| 2006-12-31 00:00:00 | 152.905 | 17.7299 |
| 2007-12-31 00:00:00 | 148.15  | 17.3889 |
| 2008-12-31 00:00:00 | 149.647 | 17.8218 |
| 2009-12-31 00:00:00 | 154.769 | 18.1922 |
| 2010-12-31 00:00:00 | 155.697 | 18.3898 |
| 2011-12-31 00:00:00 | 152.957 | 18.4033 |
| 2012-12-31 00:00:00 | 148.889 | 18.1826 |
| 2013-12-31 00:00:00 | 147.836 | 17.9259 |
| 2014-12-31 00:00:00 | 147.752 | 17.6807 |
| 2015-12-31 00:00:00 | 150.237 | 17.6784 |
| 2016-12-31 00:00:00 | 145.052 | 17.2432 |
| 2017-12-31 00:00:00 | 152.533 | 17.7075 |
| 2018-12-31 00:00:00 | 149.597 | 17.4287 |
| 2019-12-31 00:00:00 | 155.741 | 18.3721 |
| 2020-12-31 00:00:00 | 156.331 | 18.4468 |
:END:

**** Contribution from SE relative to the total
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
D = pd.read_csv("./out/region_D.csv.zip", index_col=0, parse_dates=True)
err = pd.read_csv("./out/region_err.csv.zip", index_col=0, parse_dates=True)

D = D.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()
err = err.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

D_SE = D['SE']
# D_rest = D.drop(columns='SE').sum(axis='columns')
D_rest = D.sum(axis='columns')

print((D_SE/D_rest*100).describe())
print("")
print(D_SE/D_rest*100)
#+END_SRC

#+RESULTS:
#+begin_example
count    35.000000
mean     31.674791
std       1.359291
min      29.188697
25%      30.841011
50%      31.532302
75%      32.858512
max      34.214474
dtype: float64

Date
1986-12-31    33.541327
1987-12-31    34.214474
1988-12-31    32.596328
1989-12-31    30.932115
1990-12-31    30.916842
1991-12-31    32.294077
1992-12-31    33.058273
1993-12-31    33.135595
1994-12-31    33.941474
1995-12-31    33.654447
1996-12-31    32.867846
1997-12-31    32.588313
1998-12-31    31.720110
1999-12-31    31.950266
2000-12-31    30.932915
2001-12-31    30.649259
2002-12-31    31.913929
2003-12-31    33.013441
2004-12-31    33.630838
2005-12-31    32.849178
2006-12-31    31.196881
2007-12-31    30.789330
2008-12-31    30.892693
2009-12-31    31.532302
2010-12-31    31.610644
2011-12-31    30.909600
2012-12-31    30.244193
2013-12-31    29.810164
2014-12-31    29.614447
2015-12-31    29.959786
2016-12-31    29.188697
2017-12-31    30.211934
2018-12-31    30.142139
2019-12-31    31.221116
2020-12-31    30.892720
Freq: A-DEC, dtype: float64
#+end_example


**** Contribution from others relative to the total
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
D = pd.read_csv("./out/region_D.csv.zip", index_col=0, parse_dates=True)
err = pd.read_csv("./out/region_err.csv.zip", index_col=0, parse_dates=True)

D = D.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()
err = err.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

print("\nNO+NE+NW:", (D[['NO','NE','NW']].sum(axis='columns')).describe()[['min','max']])

# print("\nERR NO+NE+NW:", (err[['NO','NE','NW']].sum(axis='columns')).describe()[['mean']])

print("\nNO+NE+NW%:", (D[['NO','NE','NW']].sum(axis='columns')/D.sum(axis='columns')*100).describe()[['mean']])

print("\nNW increase:", D['NW'])
      
# D_SE = D['SE']
# # D_rest = D.drop(columns='SE').sum(axis='columns')
# D_rest = D.sum(axis='columns')

# print((D_SE/D_rest*100).describe())
# print("")
# print(D_SE/D_rest*100)
#+END_SRC

#+RESULTS:
#+begin_example

NO+NE+NW: min    132.818011
max    171.885698
dtype: float64

NO+NE+NW%: mean    31.368645
dtype: float64

NW increase: Date
1986-12-31     96.632079
1987-12-31     92.951264
1988-12-31     95.026052
1989-12-31    101.058073
1990-12-31    101.083113
1991-12-31     91.213774
1992-12-31     88.795538
1993-12-31     90.946641
1994-12-31     95.294116
1995-12-31     90.531060
1996-12-31     89.202549
1997-12-31     89.838192
1998-12-31     91.812808
1999-12-31     89.469858
2000-12-31     90.765209
2001-12-31     90.738768
2002-12-31     91.953105
2003-12-31     93.367870
2004-12-31     96.560084
2005-12-31     96.611972
2006-12-31     96.869609
2007-12-31     96.162150
2008-12-31     97.848132
2009-12-31     99.940477
2010-12-31    102.367833
2011-12-31    105.008360
2012-12-31    104.316671
2013-12-31    106.460941
2014-12-31    109.626124
2015-12-31    109.820132
2016-12-31    112.405059
2017-12-31    115.429466
2018-12-31    114.504113
2019-12-31    109.654736
2020-12-31    109.053012
Freq: A-DEC, Name: NW, dtype: float64
#+end_example

**** Sermeq Kujalleq (Jakobshavn Isbræ)
#+BEGIN_SRC jupyter-python :exports both :results raw drawer :display text/org :eval no-export
D = pd.read_csv("./out/sector_D.csv.zip", index_col=0, parse_dates=True)
err = pd.read_csv("./out/sector_err.csv.zip", index_col=0, parse_dates=True)

D = D['JAKOBSHAVN_ISBRAE'].resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

err = err['JAKOBSHAVN_ISBRAE'].resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

print("Jakobshavn described:\n", D.describe())

df = pd.DataFrame(index=D.index)
df['Jako'] = D
df['err'] = err
df
#+END_SRC

#+RESULTS:
:RESULTS:
: Jakobshavn described:
:  count    35.000000
: mean     36.475012
: std       9.383378
: min      22.670240
: 25%      26.806800
: 50%      37.112764
: 75%      45.088111
: max      50.865673
: Name: JAKOBSHAVN_ISBRAE, dtype: float64
| Date                |    Jako |     err |
|---------------------+---------+---------|
| 1986-12-31 00:00:00 | 29.1558 | 3.03729 |
| 1987-12-31 00:00:00 | 27.439  | 2.80639 |
| 1988-12-31 00:00:00 | 25.2394 | 2.55343 |
| 1989-12-31 00:00:00 | 26.8701 | 2.69433 |
| 1990-12-31 00:00:00 | 25.5253 | 2.4713  |
| 1991-12-31 00:00:00 | 22.9716 | 2.19825 |
| 1992-12-31 00:00:00 | 22.6702 | 2.18419 |
| 1993-12-31 00:00:00 | 24.2521 | 2.29701 |
| 1994-12-31 00:00:00 | 25.6049 | 2.39126 |
| 1995-12-31 00:00:00 | 23.9047 | 2.19525 |
| 1996-12-31 00:00:00 | 25.7197 | 2.31924 |
| 1997-12-31 00:00:00 | 26.7435 | 2.38738 |
| 1998-12-31 00:00:00 | 31.3503 | 2.86247 |
| 1999-12-31 00:00:00 | 33.0524 | 2.9232  |
| 2000-12-31 00:00:00 | 35.8629 | 3.1497  |
| 2001-12-31 00:00:00 | 37.1128 | 3.24836 |
| 2002-12-31 00:00:00 | 38.5192 | 3.38152 |
| 2003-12-31 00:00:00 | 41.1211 | 3.6446  |
| 2004-12-31 00:00:00 | 42.8632 | 3.84119 |
| 2005-12-31 00:00:00 | 43.4067 | 3.93917 |
| 2006-12-31 00:00:00 | 44.7881 | 4.11274 |
| 2007-12-31 00:00:00 | 44.825  | 4.14659 |
| 2008-12-31 00:00:00 | 45.6984 | 4.23475 |
| 2009-12-31 00:00:00 | 46.4171 | 4.32163 |
| 2010-12-31 00:00:00 | 46.5667 | 4.36192 |
| 2011-12-31 00:00:00 | 45.3512 | 4.27409 |
| 2012-12-31 00:00:00 | 49.5756 | 4.74749 |
| 2013-12-31 00:00:00 | 50.8657 | 4.93618 |
| 2014-12-31 00:00:00 | 49.8204 | 4.88354 |
| 2015-12-31 00:00:00 | 48.2843 | 4.80196 |
| 2016-12-31 00:00:00 | 48.3417 | 4.79277 |
| 2017-12-31 00:00:00 | 39.5205 | 3.95575 |
| 2018-12-31 00:00:00 | 33.8476 | 3.30606 |
| 2019-12-31 00:00:00 | 35.9456 | 3.48159 |
| 2020-12-31 00:00:00 | 37.3928 | 3.60347 |
:END:

*** Discharge Time Series - Sectors
#+BEGIN_SRC jupyter-python :results raw drawer :display text/plain :eval no-export
import matplotlib.gridspec as gridspec
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

plt.close(1)

fig = plt.figure(1, figsize=(9,5)) # w,h
fig.clf()
# fig.set_tight_layout(True)
grid = plt.GridSpec(2, 1, height_ratios=[1,10], hspace=0.1) # h, w


ax_D = fig.add_subplot(grid[1,:])
ax_coverage = fig.add_subplot(grid[0,:], sharex=ax_D)

from adjust_spines import adjust_spines as adj
adj(ax_D, ['left','bottom'])
adj(ax_coverage, ['left'])
ax_coverage.minorticks_off()
ax_coverage.tick_params(length=0, which='both', axis='x')


D = pd.read_csv("./out/sector_D.csv.zip", index_col=0, parse_dates=True)
err = pd.read_csv("./out/sector_err.csv.zip", index_col=0, parse_dates=True)
coverage = pd.read_csv("./out/sector_coverage.csv.zip", index_col=0, parse_dates=True)

THRESH = coverage < 0.5
D[THRESH] = np.nan
err[THRESH] = np.nan
coverage[THRESH] = np.nan


def pad_df(df):
    df = df.append(pd.DataFrame(index=np.array(['1986-01-01']).astype('datetime64[ns]')), sort=True)
    idx = str(df.index.year.max())+'-12-31'
    df = df.append(pd.DataFrame(index=np.array([idx]).astype('datetime64[ns]')), sort=True)
    df = df.sort_index()
    return df

D = pad_df(D)
err = pad_df(err)
coverage = pad_df(coverage)

### Take annual average from daily interpolated rather than the existing samples.
D_day_year = D.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()
err_day_year=err.resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()


# No annual average if few sample
num_obs = D.resample('Y').count()
D_day_year[num_obs<=3] = np.nan
err_day_year[num_obs<=3] = np.nan


# largest average for last year
D_sort = D.resample('Y', axis='rows')\
          .mean()\
          .iloc[-1]\
          .sort_values(ascending=False)

LABELS={}
# for k in D_sort.head(8).index: LABELS[k] = k
# Use the last       ^ glaciers

# Make legend pretty
LABELS['JAKOBSHAVN_ISBRAE'] = 'Sermeq Kujalleq (Jakobshavn Isbræ)'
LABELS['HELHEIMGLETSCHER'] = 'Helheim Gletsjer'
LABELS['KANGERLUSSUAQ'] = 'Kangerlussuaq Gletsjer'
LABELS['KOGE_BUGT_C'] = '(Køge Bugt C)'
LABELS['ZACHARIAE_ISSTROM'] = 'Zachariae Isstrøm'
LABELS['RINK_ISBRAE'] = 'Kangilliup Sermia (Rink Isbræ)'
LABELS['NIOGHALVFJERDSFJORDEN'] = '(Nioghalvfjerdsbrae)'
LABELS['PETERMANN_GLETSCHER'] ='Petermann Gletsjer'

SYMBOLS={}
SYMBOLS['JAKOBSHAVN_ISBRAE'] = 'o'
SYMBOLS['HELHEIMGLETSCHER'] = 's'
SYMBOLS['KANGERLUSSUAQ'] = 'v'
SYMBOLS['KOGE_BUGT_C'] = '^'
SYMBOLS['NIOGHALVFJERDSFJORDEN'] = 'v'
SYMBOLS['RINK_ISBRAE'] = 's'
SYMBOLS['ZACHARIAE_ISSTROM'] = 'o'
SYMBOLS['PETERMANN_GLETSCHER'] ='^'

MS=4
Z=99
for g in LABELS.keys(): # for each glacier

    # scatter of symbols
    e = ax_D.errorbar(D.loc[:,g].index,
                      D.loc[:,g].values,
                      label=LABELS[g],
                      fmt=SYMBOLS[g],
                      mfc='none',
                      ms=MS)

    # Annual average
    C = e.lines[0].get_color()
    D_day_year.loc[:,g].plot(drawstyle='steps', linewidth=2,
                             label='',
                             ax=ax_D,
                             alpha=0.75, color=C, zorder=Z)

    # Error bars, each one w/ custom opacity.
    # Also, fill symbols w/ same opacity.
    for i,idx in enumerate(D.loc[:,g].index):
        ax_D.errorbar(D.loc[:,g].index[i],
                      D.loc[:,g].values[i],
                      yerr=err.loc[:,g].values[i],
                      alpha=coverage.loc[:,g].values[i],
                      label='',
                      marker=SYMBOLS[g],
                      ecolor='grey',
                      mfc=C, mec=C,
                      ms=MS)


    # Coverage scatter on top axis
    ax_coverage.scatter(D.loc[:,g].index,
                        coverage.loc[:,g].values*100,
                        alpha=0.25,
                        marker=SYMBOLS[g],
                        facecolor='none',
                        s=10,
                        color=C)

# yl = ax_D.get_ylim()

ax_D.legend(fontsize=8, ncol=2, loc=(0.0, 0.82), fancybox=False, frameon=False)
ax_D.set_xlabel('Time [Years]')
ax_D.set_ylabel('Discharge [Gt yr$^{-1}$]')
ax_D.set_xlim(D.index[0], D.index[-1])
ax_D.set_xticklabels(D.index.year.unique())

import matplotlib.dates as mdates
ax_D.xaxis.set_major_locator(mdates.YearLocator())
ax_D.xaxis.set_tick_params(rotation=-90)
for tick in ax_D.xaxis.get_majorticklabels():
    tick.set_horizontalalignment("left")

ax_coverage.set_ylabel('Coverage [%]')
ax_coverage.set_ylim([45,105])
ax_coverage.set_yticks([50,100])
ax_coverage.spines['left'].set_bounds(ax_coverage.get_ylim()[0],100)

plt.savefig('./figs/discharge_ts_topfew.png', transparent=False, bbox_inches='tight', dpi=300)

Err_pct = (err_day_year / D_day_year*100).round().fillna(value=0).astype(np.int).astype(np.str)
Err_pct = Err_pct[list(LABELS.keys())]
tbl = D_day_year[list(LABELS.keys())].round().fillna(value=0).astype(np.int).astype(np.str) + ' (' + Err_pct+')'
tbl.index = tbl.index.year.fillna(value=0).astype(np.str)
tbl.columns = [_ + ' (%)' for _ in tbl.columns]
tbl
#+END_SRC

#+RESULTS:
#+begin_example
     JAKOBSHAVN_ISBRAE (%) HELHEIMGLETSCHER (%) KANGERLUSSUAQ (%) KOGE_BUGT_C (%)  \
1986                 0 (0)               33 (6)            16 (7)          16 (5)   
1987                 0 (0)               33 (6)            16 (7)          16 (5)   
1988               25 (10)               30 (6)            16 (7)           0 (0)   
1989               27 (10)               27 (6)            17 (7)           0 (0)   
1990               25 (10)               27 (6)            19 (7)           0 (0)   
1991                 0 (0)                0 (0)             0 (0)           0 (0)   
1992                 0 (0)                0 (0)             0 (0)           0 (0)   
1993                 0 (0)                0 (0)             0 (0)           0 (0)   
1994                26 (9)                0 (0)            18 (8)           0 (0)   
1995                 0 (0)                0 (0)             0 (0)           0 (0)   
1996                 0 (0)                0 (0)             0 (0)           0 (0)   
1997                 0 (0)                0 (0)             0 (0)           0 (0)   
1998                32 (9)               23 (7)            22 (7)           0 (0)   
1999                 0 (0)                0 (0)             0 (0)           0 (0)   
2000                36 (9)               24 (7)            20 (8)          15 (5)   
2001                37 (9)               24 (7)            21 (8)          16 (5)   
2002                39 (9)               27 (7)            20 (8)           0 (0)   
2003                41 (9)               30 (7)            21 (8)           0 (0)   
2004                43 (9)               32 (7)            23 (8)          18 (5)   
2005                43 (9)                0 (0)            34 (8)          18 (5)   
2006                45 (9)               29 (7)            34 (8)          17 (5)   
2007                45 (9)               29 (7)            30 (8)          15 (5)   
2008                46 (9)               27 (7)            27 (8)           0 (0)   
2009                46 (9)               29 (8)            26 (8)          18 (5)   
2010                47 (9)               28 (8)            26 (8)           0 (0)   
2011                45 (9)               27 (8)            27 (8)           0 (0)   
2012               50 (10)               26 (8)            27 (8)          17 (5)   
2013               51 (10)               27 (8)            27 (8)          16 (5)   
2014               50 (10)               26 (8)            26 (8)          17 (5)   
2015               48 (10)               29 (7)            25 (8)          17 (5)   
2016               48 (10)               28 (7)            24 (8)          14 (5)   
2017               40 (10)               33 (7)            27 (8)          15 (5)   
2018               34 (10)               31 (7)            28 (8)          16 (5)   
2019               36 (10)               34 (7)            27 (8)          15 (5)   
2020               37 (10)               33 (7)            27 (8)          16 (5)   

     ZACHARIAE_ISSTROM (%) RINK_ISBRAE (%) NIOGHALVFJERDSFJORDEN (%) PETERMANN_GLETSCHER (%)  
1986               10 (10)          13 (6)                    12 (5)                   0 (0)  
1987                9 (10)          13 (6)                    12 (5)                   0 (0)  
1988                9 (10)          13 (6)                    12 (5)                   0 (0)  
1989               10 (10)          13 (6)                    11 (5)                   0 (0)  
1990               10 (10)          13 (6)                    11 (5)                   0 (0)  
1991                 0 (0)           0 (0)                     0 (0)                   0 (0)  
1992                 0 (0)           0 (0)                     0 (0)                   0 (0)  
1993                 0 (0)           0 (0)                     0 (0)                   0 (0)  
1994               10 (10)           0 (0)                     0 (0)                   0 (0)  
1995                 0 (0)           0 (0)                     0 (0)                   0 (0)  
1996                 0 (0)           0 (0)                     0 (0)                   0 (0)  
1997                 0 (0)           0 (0)                     0 (0)                   0 (0)  
1998                9 (10)           0 (0)                    12 (5)                   0 (0)  
1999                9 (10)           0 (0)                     0 (0)                   0 (0)  
2000               10 (10)          14 (6)                    12 (5)                   0 (0)  
2001                 0 (0)          14 (7)                     0 (0)                   0 (0)  
2002                 0 (0)          14 (7)                     0 (0)                   0 (0)  
2003                 0 (0)           0 (0)                     0 (0)                   0 (0)  
2004                 0 (0)          14 (7)                     0 (0)                   0 (0)  
2005                 0 (0)          13 (7)                     0 (0)                   0 (0)  
2006                 0 (0)          14 (7)                    12 (5)                   0 (0)  
2007               12 (10)          13 (7)                     0 (0)                   0 (0)  
2008                 0 (0)          14 (7)                     0 (0)                   0 (0)  
2009               12 (10)          13 (7)                     0 (0)                   0 (0)  
2010                 0 (0)          13 (7)                     0 (0)                   0 (0)  
2011                 0 (0)          13 (7)                     0 (0)                   0 (0)  
2012                 0 (0)          13 (7)                    12 (5)                   0 (0)  
2013               13 (10)          13 (7)                     0 (0)                   0 (0)  
2014               14 (10)          13 (7)                    13 (5)                   0 (0)  
2015               14 (10)          13 (6)                    13 (5)                  12 (4)  
2016               15 (10)          14 (6)                    13 (5)                  12 (4)  
2017               15 (10)          13 (6)                    13 (5)                  12 (4)  
2018               16 (10)          12 (7)                    13 (5)                  12 (4)  
2019               16 (10)          13 (7)                    14 (5)                  12 (4)  
2020               16 (10)          13 (7)                    14 (5)                  12 (4)  
#+end_example

:END:
:END:
:end:

*** Køge Bugt
:PROPERTIES:
:header-args:jupyter-python+: :tangle no
:END:

#+BEGIN_SRC jupyter-python :session koge_bugt :results drawer
import os
import numpy as np
import shapefile

import matplotlib.pyplot as plt
from grass_session import Session
from grass.pygrass.modules.shortcuts import general as g
from grass.pygrass.modules.shortcuts import raster as r
from grass.pygrass.modules.shortcuts import vector as v
from grass.pygrass.modules.shortcuts import display as d
from grass.script import array as garray
from grass.script import core as gcore

if 'bamber' not in locals():
    PERMANENT = Session()
    PERMANENT.open(gisdb="./", location="G", mapset="tmp_KogeBugt", create_opts="")
    
    x = garray.array("x@PERMANENT", null=np.nan)
    y = garray.array("y@PERMANENT", null=np.nan)
    vel = garray.array("vel_baseline@MEaSUREs.0478", null=np.nan)
    vx = garray.array("vx_baseline@MEaSUREs.0478", null=np.nan)
    vy = garray.array("vy_baseline@MEaSUREs.0478", null=np.nan)
    z_s = garray.array("surface@BedMachine", null=np.nan)
    z_b = garray.array("bed@BedMachine", null=np.nan)
    bamber = garray.array("thickness@Bamber_2013", null=np.nan)
    bamber[bamber == 0] = np.nan
    z_s[z_s == 0] = np.nan
    z_b[z_s == 0] = np.nan
    thick = z_s - z_b
    diff = thick - bamber
    gates = garray.array("gates_final@gates_100_5000", null=np.nan)

    # v.out_ogr(input='gate_lines', output='./tmp/SHP/E2014_gates.shp', format='ESRI_Shapefile', overwrite=True)
    # gates_E2014 = shapefile.Reader("./tmp/SHP/E2014_gates.shp")
    PERMANENT.close()

# get numbers below by zooming in, then plt.xlim(), plt.ylim()    
#     a.set_xlim([160000, 200000])
#     a.set_ylim([-2750000, -2710000])

if 'x_koge' not in locals():
    idx_x0 = np.where(x[0,:] > 170000)[0][0]    
    idx_x1 = np.where(x[0,:] > 200000)[0][0]
    idx_y0 = np.where(y[:,0] < -2710000)[0][0]
    # idx_y1 = np.where(y[:,0] < -2750000)[0][0]
    idx_y1 = np.where(y[:,0] < -2735000)[0][0]
    vel_koge = vel[idx_y0:idx_y1, idx_x0:idx_x1]
    vx_koge = vx[idx_y0:idx_y1, idx_x0:idx_x1]
    vy_koge = vy[idx_y0:idx_y1, idx_x0:idx_x1]
    thick_koge = thick[idx_y0:idx_y1, idx_x0:idx_x1]
    bamber_koge = bamber[idx_y0:idx_y1, idx_x0:idx_x1]
    diff_koge = diff[idx_y0:idx_y1, idx_x0:idx_x1]
    x_koge = x[idx_y0:idx_y1, idx_x0:idx_x1]
    y_koge = y[idx_y0:idx_y1, idx_x0:idx_x1]

# plt.close(1)
plt.clf()
fig = plt.figure(1, figsize=(8,6)) # w,h
# get_current_fig_manager().window.move(0,0)
fig.clf()
fig.set_tight_layout(True)

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax3 = fig.add_subplot(223)
ax4 = fig.add_subplot(224)

# extent = [x.min(),x.max(),y.min(),y.max()]
extent = [x_koge.min(), x_koge.max(), y_koge.min(), y_koge.max()]

plt.cm.Blues.set_bad('gray', 0.3)
plt.cm.RdBu_r.set_bad('gray', 0.3)
plt.cm.viridis.set_bad('gray', 0.3)
im1 = ax1.imshow(np.log10(vel_koge), extent=extent)
im2 = ax2.imshow(thick_koge, extent=extent, cmap=plt.cm.Blues, vmin=0, vmax=1500)
im3 = ax3.imshow(bamber_koge, extent=extent, cmap=plt.cm.Blues, vmin=0, vmax=1500)
im4 = ax4.imshow(diff_koge, extent=extent, cmap=plt.cm.RdBu_r, vmin=-1500, vmax=1500)

label = ['a','b','c','d']  
for i,a in enumerate([ax1,ax2,ax3,ax4]):
    C = plt.cm.gray_r if a == ax1 else plt.cm.gray
    a.imshow(gates[idx_y0:idx_y1, idx_x0:idx_x1], extent=extent, cmap=C)
    C = 'w' if i <= 2 else 'k'
    a.text(0.03,0.88,label[i], transform=a.transAxes, color=C, fontsize=14)
    a.set_yticklabels([])
    a.set_xticklabels([])

from mpl_toolkits.axes_grid1 import make_axes_locatable
# for i,a in zip([im1,im2,im3,im4],[ax1,ax2,ax3,ax4]):
divider = make_axes_locatable(ax1); cax = divider.append_axes("right", size="5%", pad=0.05)
c = fig.colorbar(im1, cax=cax); c.set_label('log$_{10}$ Speed [m yr$^{-1}$]')
divider = make_axes_locatable(ax2); cax = divider.append_axes("right", size="5%", pad=0.05)
c = fig.colorbar(im2, cax=cax); c.set_label('Thickness [m]')
divider = make_axes_locatable(ax3); cax = divider.append_axes("right", size="5%", pad=0.05)
c = fig.colorbar(im3, cax=cax); c.set_label('Thickness [m]')
divider = make_axes_locatable(ax4); cax = divider.append_axes("right", size="5%", pad=0.05)
c = fig.colorbar(im4, cax=cax); c.set_label('$\Delta$ Thickness [m]')

plt.savefig('./figs/koge_bugt.png', transparent=True, bbox_inches='tight', dpi=300)
plt.savefig('./figs/koge_bugt.pdf', transparent=True, bbox_inches='tight', dpi=300)
#+END_SRC

*** Adjust Spines

http://matplotlib.org/examples/pylab_examples/spine_placement_demo.html

#+BEGIN_SRC python :tangle adjust_spines.py
def adjust_spines(ax,spines, offset=10):
    for loc, spine in ax.spines.items():
        if loc in spines:
            spine.set_position(('outward', offset)) # outward by 10 points
            #spine.set_smart_bounds(True)
        else:
            spine.set_color('none') # don't draw spine

        # turn off ticks where there is no spine
        if 'left' in spines:
            ax.yaxis.set_tick_params(length=5)
            ax.yaxis.set_tick_params(direction='out')
            ax.yaxis.set_ticks_position('left')
            ax.yaxis.set_label_position('left')
        elif 'right' in spines:
            ax.yaxis.set_tick_params(length=5)
            ax.yaxis.set_tick_params(direction='out')
            ax.yaxis.set_ticks_position('right')
            ax.yaxis.set_label_position('right')
        else: # no yaxis ticks
            ax.yaxis.set_ticks([])

        if 'bottom' in spines:
            ax.xaxis.set_ticks_position('bottom')
            ax.xaxis.set_tick_params(length=5)
            ax.xaxis.set_tick_params(direction='out')
            ax.xaxis.set_label_position('bottom')
        elif 'top' in spines:
            ax.xaxis.set_ticks_position('top')
            ax.xaxis.set_tick_params(length=5)
            ax.xaxis.set_tick_params(direction='out')
            ax.xaxis.set_label_position('top')
        else: # no xaxis ticks
            ax.xaxis.set_ticks([])


if __name__ == "__main__":
    import numpy as np            
    x = np.random.random(100)
    fig = plt.figure(100)
    fig.clf()
    ax = fig.add_axes([0.1,0.1,0.8,0.8])
    ax.plot(x)
    adjust_spines(ax,["left","bottom"])

#+END_SRC
#+RESULTS:

* Supplementary Material                                :noexport:
:PROPERTIES:
:header-args:jupyter-python+: :tangle no
:END:
** Errors by gate sorted by total D, err, err %
**** Top by Discharge
#+BEGIN_SRC jupyter-python :results raw drawer :session discharge :display text/org :eval no-export
import pandas as pd
import numpy as np

err_gate = pd.read_csv('./tmp/err_gate.csv', index_col=0)
err_gate.loc['GIS'] = np.nan
err_gate.dropna(inplace=True)
err_gate.rename(columns = {'D':'D [Gt]', 
                           'E':'Error [Gt]',
                           'E%':'Error [%]'}, inplace=True)
 
err_gate.sort_values('D [Gt]', inplace=True, ascending=False)
err_gate = err_gate.iloc[:25]
err_gate
#+END_SRC

#+RESULTS:
| Gate |  D [Gt] | Error [Gt] | Error [%] | name                      |
|------+---------+------------+-----------+---------------------------|
|  184 | 45.8327 |    4.25735 |   9.28889 | JAKOBSHAVN_ISBRAE         |
|  231 | 28.3759 |    2.23476 |   7.87556 | HELHEIMGLETSCHER          |
|  190 |   25.69 |    2.10264 |   8.18466 | KANGERLUSSUAQ             |
|  245 | 16.5818 |   0.776811 |   4.68471 | KOGE_BUGT_C               |
|   31 | 14.3226 |    1.46042 |   10.1966 | ZACHARIAE_ISSTROM         |
|  143 | 12.9161 |   0.860943 |   6.66564 | RINK_ISBRAE               |
|   29 | 12.2803 |   0.662151 |   5.39196 | NIOGHALVFJERDSFJORDEN     |
|   27 | 11.3084 |    0.48615 |     4.299 | PETERMANN_GLETSCHER       |
|  239 | 10.3018 |   0.945436 |   9.17739 | IKERTIVAQ_M               |
|  140 | 9.21617 |   0.672305 |   7.29484 | DAUGAARD-JENSEN           |
|   73 | 8.37833 |   0.428752 |    5.1174 | KONG_OSCAR_GLETSCHER      |
|  165 | 8.37552 |   0.669684 |   7.99573 | STORE_GLETSCHER           |
|   79 |  8.2212 |   0.472487 |   5.74718 | NORDENSKIOLD_GLESCHER_NW  |
|  306 | 7.88829 |   0.646318 |   8.19339 | TINGMIARMIUT_FJORD        |
|  103 | 7.80872 |   0.861927 |    11.038 | HAYES_GLETSCHER_N_NN      |
|  238 | 7.58332 |   0.891979 |   11.7624 | IKERTIVAQ_NN              |
|  210 | 7.53807 |   0.211834 |   2.81018 | UNNAMED_DECEPTION_O_CN_CS |
|  134 | 7.42538 |   0.762106 |   10.2635 | UPERNAVIK_ISSTROM_N       |
|  169 | 7.31806 |   0.612554 |   8.37045 | SERMEQ_KUJALLEQ           |
|  135 | 6.59969 |   0.819664 |   12.4197 | UPERNAVIK_ISSTROM_C       |
|  251 | 6.25444 |   0.330864 |   5.29007 | KOGE_BUGT_S               |
|  129 | 6.21867 |   0.256793 |    4.1294 | KAKIVFAAT_SERMIAT         |
|   28 |  6.0462 |   0.343538 |   5.68188 | HUMBOLDT_GLETSCHER        |
|   95 | 5.69675 |   0.692471 |   12.1555 | KJER_GLETSCHER            |
|   91 | 5.50316 |   0.469718 |   8.53541 | SVERDRUP_GLETSCHER        |

**** Top by Error [Gt]
#+BEGIN_SRC jupyter-python :results value :session discharge :display text/org :eval no-export
import pandas as pd
err_gate = pd.read_csv('./tmp/err_gate.csv', index_col=0)
err_gate.loc['GIS'] = np.nan
err_gate.dropna(inplace=True)
err_gate.rename(columns = {'D':'D [Gt]', 
                           'E':'Error [Gt]',
                           'E%':'Error [%]',
                           'Ew':'Error Weighted',
                           'Ew%':'Error Weighted %'}, inplace=True)

err_gate.sort_values('Error [Gt]', inplace=True, ascending=False)
err_gate = err_gate.iloc[:25]
err_gate
#+END_SRC

#+RESULTS:
| Gate |   D [Gt] | Error [Gt] | Error [%] | name                        |
|------+----------+------------+-----------+-----------------------------|
|  184 |  45.8327 |    4.25735 |   9.28889 | JAKOBSHAVN_ISBRAE           |
|  231 |  28.3759 |    2.23476 |   7.87556 | HELHEIMGLETSCHER            |
|  190 |    25.69 |    2.10264 |   8.18466 | KANGERLUSSUAQ               |
|   31 |  14.3226 |    1.46042 |   10.1966 | ZACHARIAE_ISSTROM           |
|  338 |  1.68952 |    1.43696 |   85.0517 | EQALORUTSIT_KILLIIT_SERMIAT |
|  264 |  4.54327 |    1.03591 |    22.801 | UMIIVIK_FJORD               |
|  239 |  10.3018 |   0.945436 |   9.17739 | IKERTIVAQ_M                 |
|  238 |  7.58332 |   0.891979 |   11.7624 | IKERTIVAQ_NN                |
|  103 |  7.80872 |   0.861927 |    11.038 | HAYES_GLETSCHER_N_NN        |
|  143 |  12.9161 |   0.860943 |   6.66564 | RINK_ISBRAE                 |
|  244 |  3.97901 |   0.852601 |   21.4275 | KOGE_BUGT_N                 |
|  135 |  6.59969 |   0.819664 |   12.4197 | UPERNAVIK_ISSTROM_C         |
|  224 |  4.68071 |   0.799209 |   17.0745 | KIV_STEENSTRUP_NODRE_BRAE   |
|  245 |  16.5818 |   0.776811 |   4.68471 | KOGE_BUGT_C                 |
|  134 |  7.42538 |   0.762106 |   10.2635 | UPERNAVIK_ISSTROM_N         |
|   95 |  5.69675 |   0.692471 |   12.1555 | KJER_GLETSCHER              |
|  140 |  9.21617 |   0.672305 |   7.29484 | DAUGAARD-JENSEN             |
|  165 |  8.37552 |   0.669684 |   7.99573 | STORE_GLETSCHER             |
|   29 |  12.2803 |   0.662151 |   5.39196 | NIOGHALVFJERDSFJORDEN       |
|  306 |  7.88829 |   0.646318 |   8.19339 | TINGMIARMIUT_FJORD          |
|  169 |  7.31806 |   0.612554 |   8.37045 | SERMEQ_KUJALLEQ             |
|  113 |   5.4707 |   0.600724 |   10.9807 | ALISON_GLETSCHER            |
|  272 |  4.34363 |   0.590233 |   13.5885 | GRAULV                      |
|  235 | 0.465927 |   0.577122 |   123.865 | HEIM_GLETSCHER              |
|  237 | 0.727763 |   0.561489 |   77.1526 | NONAME_IKERTIVAQ_N          |


**** Top by Error [%]
#+BEGIN_SRC jupyter-python :results value :session discharge :display text/org :eval no-export
import pandas as pd
err_gate = pd.read_csv('./tmp/err_gate.csv', index_col=0)
err_gate.loc['GIS'] = np.nan
err_gate.dropna(inplace=True)
err_gate.rename(columns = {'D':'D [Gt]', 
                           'E':'Error [Gt]',
                           'E%':'Error [%]',
                           'Ew':'Error Weighted',
                           'Ew%':'Error Weighted %'}, inplace=True)

err_gate.sort_values('Error [%]', inplace=True, ascending=False)
err_gate = err_gate.iloc[:25]
err_gate
#+END_SRC

#+RESULTS:
| Gate |      D [Gt] | Error [Gt] | Error [%] | name                           |
|------+-------------+------------+-----------+--------------------------------|
|  343 | 0.000406285 |   0.101505 |   24983.6 | NAAJAT_SERMIAT                 |
|  280 | 0.000322359 |  0.0686486 |   21295.7 | GYLDENLOVE_SS                  |
|  323 | 7.64832e-05 |  0.0160352 |   20965.6 | NAPASORSUAQ_C_S                |
|  271 | 0.000274782 |  0.0575628 |   20948.5 | APUSEERSERPIA                  |
|  148 | 0.000214731 |   0.042169 |     19638 | GEIKIE3                        |
|  289 | 0.000892266 |   0.174267 |   19530.9 | SE_NONAME2                     |
|  331 |   0.0013534 |   0.259317 |   19160.4 | UNNAMED_ANORITUUP_KANGERLUA_S  |
|  332 | 0.000125657 |  0.0235513 |   18742.6 | UNNAMED_ANORITUUP_KANGERLUA_SS |
|  311 | 0.000279193 |  0.0520355 |   18637.8 | MOGENS_HEINESEN_SS_SSS         |
|  225 | 0.000364528 |  0.0678545 |   18614.4 | KIV_STEENSTRUP_SONDRE_BRAE     |
|  254 | 0.000476612 |  0.0881848 |   18502.4 | KOGE_BUGT_SS                   |
|  285 | 0.000512678 |  0.0943475 |   18402.9 | SE_NONAME2                     |
|  353 | 0.000162942 |  0.0297611 |   18264.9 | SOUTHERN_TIP                   |
|  284 | 0.000866503 |   0.154398 |   17818.6 | SE_NONAME2                     |
|  257 | 0.000940643 |   0.165067 |   17548.3 | KOGE_BUGT_SS                   |
|  333 | 0.000157755 |  0.0272631 |   17281.9 | UNNAMED_ANORITUUP_KANGERLUA_SS |
|  295 | 0.000255828 |  0.0436295 |   17054.2 | SE_NONAME2                     |
|  223 |  0.00193743 |   0.329281 |   16995.7 | UNNAMED_LAUBE_S                |
|  296 | 0.000252462 |  0.0424767 |     16825 | SE_NONAME2                     |
|  216 | 0.000397872 |  0.0664788 |   16708.6 | UNNAMED_LAUBE_S                |
|  287 |  0.00212486 |   0.354715 |   16693.6 | FIMBULGETLSCHER                |
|  324 | 0.000108454 |  0.0172894 |   15941.7 | NAPASORSUAQ_C_S                |
|  278 |  2.8184e-05 | 0.00448207 |   15902.9 | SE_NONAME2                     |
|  282 | 3.29127e-05 | 0.00523086 |   15893.1 | SE_NONAME2                     |
|  352 | 6.05612e-05 | 0.00952727 |   15731.6 | SOUTHERN_TIP                   |

**** Bottom by Error [%]
#+BEGIN_SRC jupyter-python :results value :session discharge :display text/org :eval no-export
import pandas as pd
err_gate = pd.read_csv('./tmp/err_gate.csv', index_col=0)
err_gate.loc['GIS'] = np.nan
err_gate.dropna(inplace=True)
err_gate.rename(columns = {'D':'D [Gt]', 
                           'E':'Error [Gt]',
                           'E%':'Error [%]',
                           'Ew':'Error Weighted',
                           'Ew%':'Error Weighted %'}, inplace=True)

err_gate.sort_values('Error [%]', inplace=True, ascending=True)
err_gate = err_gate.iloc[:25]
err_gate
#+END_SRC

#+RESULTS:
| Gate |    D [Gt] | Error [Gt] | Error [%] | name                      |
|------+-----------+------------+-----------+---------------------------|
|  209 |   2.04015 |  0.0460258 |     2.256 | UNNAMED_DECEPTION_O_CN_CS |
|   69 |    1.0023 |  0.0280765 |    2.8012 | ISSUUARSUIT_SERMIA        |
|  210 |   7.53807 |   0.211834 |   2.81018 | UNNAMED_DECEPTION_O_CN_CS |
|  310 |   4.76843 |   0.171368 |    3.5938 | MOGENS_HEINESEN_S         |
|  127 |  0.722277 |  0.0267532 |   3.70401 | QEQERTARSUUP_SERMIA       |
|   71 |    1.1039 |  0.0416315 |   3.77131 | ISSUUARSUIT_SERMIA        |
|  192 |  0.782581 |  0.0303407 |     3.877 | UNNAMED_KANGER_W          |
|   10 |   2.56798 |    0.10477 |   4.07984 | RYDER_GLETSCHER           |
|  129 |   6.21867 |   0.256793 |    4.1294 | KAKIVFAAT_SERMIAT         |
|   78 | 0.0623227 |  0.0026047 |   4.17937 | NORDENSKIOLD_GLESCHER_NW  |
|  246 |  0.286414 |   0.012137 |   4.23755 | KOGE_BUGT_S               |
|  211 |    5.1197 |   0.217338 |   4.24513 | UNNAMED_UUNARTIT_ISLANDS  |
|   27 |   11.3084 |    0.48615 |     4.299 | PETERMANN_GLETSCHER       |
|   46 |  0.880626 |  0.0390674 |   4.43633 | HARALD_MOLTKE_BRAE        |
|  245 |   16.5818 |   0.776811 |   4.68471 | KOGE_BUGT_C               |
|  177 |  0.987068 |  0.0470645 |   4.76811 | KANGILERNGATA_SERMIA      |
|   67 |   3.46136 |    0.17273 |   4.99025 | ISSUUARSUIT_SERMIA        |
|  187 | 0.0774279 | 0.00387909 |   5.00994 | KONG_CHRISTIAN            |
|   30 |  0.211186 |  0.0106246 |   5.03091 | HUMBOLDT_GLETSCHER        |
|  163 |  0.351213 |  0.0176866 |   5.03587 | STORE_GLETSCHER           |
|  102 |  0.764497 |  0.0387761 |   5.07211 | HAYES_GLETSCHER_N_NN      |
|   73 |   8.37833 |   0.428752 |    5.1174 | KONG_OSCAR_GLETSCHER      |
|  212 |  0.782933 |   0.040692 |   5.19739 | KRUUSE_FJORD              |
|  153 |  0.666664 |  0.0349643 |   5.24467 | SERMEQ_SILARLEQ           |
|  251 |   6.25444 |   0.330864 |   5.29007 | KOGE_BUGT_S               |


** Annual averages from observations or linear interpolation
Compute the annual average for all GIS and some other glaciers using two methods, and compare the differences
+ Method 1: Annual average from observations
+ Method 2: Annual average after linearly interpolating observations to daily resolution

NOTE - do this with the "rawest" velocity product prior to any interpolation.

#+BEGIN_SRC jupyter-python :session avgmethod :exports both :results raw drawer :display text/org
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import datetime as dt

if 'th' not in locals():
    <<load_data>>
    <<millan_2018>>
    <<adjust_thickness>>
    <<adjust_thickness_fit>>

# What is D where velocity is directly observed, no velocity filling?
D = (fill*vel).apply(lambda c: c * (th['fit'].values * 200), axis=0) * 917 / 1E12

ann = pd.DataFrame(index = D.resample("A", axis='columns').mean().columns)
ann['obs'] = D.sum(axis='rows').resample('A').mean().values
ann['daily'] = np.nan
for y in np.arange(1985,2018):
    ann.loc[ann.index.year == y, 'daily'] \
        = D\
        .T[D.columns.year == y]\
        .T\
        .sum(axis='rows')\
        .resample('1D')\
        .mean()\
        .interpolate(method="time")\
        .resample("A")\
        .mean()\
        .values
    
ann['diff'] = ann['obs'] - ann['daily']
ann['diff [%]'] = 100 - ann['daily']/ann['obs']*100

print(ann.describe())

ann
#+END_SRC

** Køge Bugt Y2K
#+BEGIN_SRC jupyter-python :session kb_y2k :exports both :results raw drawer :display text/org
D = pd.read_csv("./out/sector_D.csv.zip", index_col=0, parse_dates=True)
err = pd.read_csv("./out/sector_err.csv.zip", index_col=0, parse_dates=True)

S = "KOGE_BUGT_C"
D = D[S].resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

err = err[S].resample('1D',axis='rows').mean().interpolate(method='time',limit_area='inside').resample('A',axis='rows').mean()

print("Køge Bugt C described:\n", D.describe())

df = pd.DataFrame(index=D.index)
df['KB'] = D
df['err'] = err
df
#+END_SRC

* QA / QC / tests                                       :noexport:
** Files used in this work                              :noexport:
*** MEaSUREs
**** 0478
***** File List

#+NAME: QC_filelist_NSIDC_0478
#+BEGIN_SRC bash :results verbatim :eval no-export
find ${DATADIR}/MEaSUREs/NSIDC-0478.002 | sed "s:^${DATADIR}::" | LC_ALL=C sort
#+END_SRC

#+RESULTS: QC_filelist_NSIDC_0478
#+begin_example
/MEaSUREs/NSIDC-0478.002
/MEaSUREs/NSIDC-0478.002/2000.09.03
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic500_2000_2001_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2005.12.13
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic500_2005_2006_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2006.12.18
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic500_2006_2007_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2007.09.07
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic500_2007_2008_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2008.09.15
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic500_2008_2009_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2009.09.02
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic500_2009_2010_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2012.11.10
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic500_2012_2013_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2014.09.01
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic500_2014_2015_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2015.09.01
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic200_2015_2016_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic500_2015_2016_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2016.09.01
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic200_2016_2017_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic500_2016_2017_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2017.09.01
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic200_2017_2018_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_browse_v02.1.jpg
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_ex_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_ey_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_v02.1.xml
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_vv_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_vx_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic500_2017_2018_vy_v02.1.tif
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.dbf
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.prj
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.shp
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.shx
/MEaSUREs/NSIDC-0478.002/2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.xml
/MEaSUREs/NSIDC-0478.002/README.org
#+end_example


***** File Metadata

#+NAME: QC_gdalinfo_NSIDC_0478
#+BEGIN_SRC bash :results verbatim :eval no-export
somefile=$(find ${DATADIR}/MEaSUREs/NSIDC-0478.002 -name "*.tif"  | LC_ALL=C sort | grep ".*mosaic200.*vv.*" | head -n1)
md5sum ${somefile}
echo ""
gdalinfo -mm ${somefile}
#+END_SRC

#+RESULTS: QC_gdalinfo_NSIDC_0478
#+begin_example
9bf8fcf0c4add78ed54c4a35b444bdc3  /home/kdm/data/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_vv_v02.1.tif

Driver: GTiff/GeoTIFF
Files: /home/kdm/data/MEaSUREs/NSIDC-0478.002/2014.09.01/greenland_vel_mosaic200_2014_2015_vv_v02.1.tif
Size is 7585, 13700
Coordinate System is:
PROJCRS["unnamed",
    BASEGEOGCRS["WGS 84",
        DATUM["World Geodetic System 1984",
            ELLIPSOID["WGS 84",6378137,298.257223563,
                LENGTHUNIT["metre",1]]],
        PRIMEM["Greenwich",0,
            ANGLEUNIT["degree",0.0174532925199433]],
        ID["EPSG",4326]],
    CONVERSION["Polar Stereographic (variant B)",
        METHOD["Polar Stereographic (variant B)",
            ID["EPSG",9829]],
        PARAMETER["Latitude of standard parallel",70,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8832]],
        PARAMETER["Longitude of origin",-45,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8833]],
        PARAMETER["False easting",0,
            LENGTHUNIT["metre",1],
            ID["EPSG",8806]],
        PARAMETER["False northing",0,
            LENGTHUNIT["metre",1],
            ID["EPSG",8807]]],
    CS[Cartesian,2],
        AXIS["(E)",south,
            MERIDIAN[90,
                ANGLEUNIT["degree",0.0174532925199433,
                    ID["EPSG",9122]]],
            ORDER[1],
            LENGTHUNIT["metre",1]],
        AXIS["(N)",south,
            MERIDIAN[180,
                ANGLEUNIT["degree",0.0174532925199433,
                    ID["EPSG",9122]]],
            ORDER[2],
            LENGTHUNIT["metre",1]]]
Data axis to CRS axis mapping: 1,2
Origin = (-659100.000000000000000,-639100.000000000000000)
Pixel Size = (200.000000000000000,-200.000000000000000)
Metadata:
  AREA_OR_POINT=Area
Image Structure Metadata:
  INTERLEAVE=BAND
Corner Coordinates:
Upper Left  ( -659100.000, -639100.000) ( 90d52'57.45"W, 81d32'23.19"N)
Lower Left  ( -659100.000,-3379100.000) ( 56d 2'13.47"W, 58d58'10.19"N)
Upper Right (  857900.000, -639100.000) (  8d18'55.49"E, 80d 8'52.35"N)
Lower Right (  857900.000,-3379100.000) ( 30d45'16.18"W, 58d35'44.75"N)
Center      (   99400.000,-2009100.000) ( 42d10' 3.39"W, 71d35' 4.30"N)
Band 1 Block=7585x1 Type=Float32, ColorInterp=Gray
    Computed Min/Max=0.002,18831.568
  NoData Value=-1
#+end_example


***** md5sum hashes of all data

#+NAME: QC_md5sum_NSIDC_0478
#+BEGIN_SRC bash :results table :eval no-export
cd ${DATADIR}/MEaSUREs/NSIDC-0478.002
# awk 'NR % 5 == 0' input > output # print every 5th line
# head -n2 # top two files
find . -type f | LC_ALL=C sort | parallel --keep-order "md5sum {}"
#+END_SRC

#+RESULTS: QC_md5sum_NSIDC_0478
| e6867a11fe4f5512b3bbc2c98e898b68 | ./2000.09.03/greenland_vel_mosaic500_2000_2001_browse_v02.1.jpg |
| 5ea53ca6a21c442579c306ad7238de17 | ./2000.09.03/greenland_vel_mosaic500_2000_2001_ex_v02.1.tif     |
| ff11d930cd3f0756bb824921842e6cca | ./2000.09.03/greenland_vel_mosaic500_2000_2001_ey_v02.1.tif     |
| 73a9d1b70b038157693715f3a523e35d | ./2000.09.03/greenland_vel_mosaic500_2000_2001_v02.1.xml        |
| ca9145a87fa424fe8abeb32052267e33 | ./2000.09.03/greenland_vel_mosaic500_2000_2001_vv_v02.1.tif     |
| dc4e91af90f43097f6a4f4ba9597910c | ./2000.09.03/greenland_vel_mosaic500_2000_2001_vx_v02.1.tif     |
| 1d6954709642cec561dc91b90ac7f60f | ./2000.09.03/greenland_vel_mosaic500_2000_2001_vy_v02.1.tif     |
| c84107bba5052e9df4d7ec8701118307 | ./2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.prj           |
| 8e6039ab0f15c9126516065fc287f607 | ./2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.shp           |
| 640c87cc6ce1af1dacb7f66419ecf197 | ./2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.shx           |
| 7b2371d700693f5b3ae689fcfe730cdd | ./2000.09.03/greenland_vel_mosaic_2000_2001_v02.1.xml           |
| 64d246573c12172be2219930ac1e7eda | ./2005.12.13/greenland_vel_mosaic500_2005_2006_browse_v02.1.jpg |
| bb97aa565833a16397581e8de241a812 | ./2005.12.13/greenland_vel_mosaic500_2005_2006_ex_v02.1.tif     |
| 8caba334c0b82f1266bc51370909b4f6 | ./2005.12.13/greenland_vel_mosaic500_2005_2006_ey_v02.1.tif     |
| e2e99719ddb1f48213942b5cbcc41925 | ./2005.12.13/greenland_vel_mosaic500_2005_2006_v02.1.xml        |
| 259b6cf64eb6c0c04bcbc06ba325f3d8 | ./2005.12.13/greenland_vel_mosaic500_2005_2006_vv_v02.1.tif     |
| 03ad1862e1ed6ec439130d9a92817560 | ./2005.12.13/greenland_vel_mosaic500_2005_2006_vx_v02.1.tif     |
| 92135c8aa6ce1ce3cc56d63d008358fa | ./2005.12.13/greenland_vel_mosaic500_2005_2006_vy_v02.1.tif     |
| 47cd89de9cfa4778653c0c83719c6105 | ./2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.prj           |
| 53c6479e54c23fe0e2d1957f9fafeb4f | ./2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.shp           |
| d6e80a79eaa6535ebf68803e951a7f50 | ./2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.shx           |
| 35791a242f3cdf1b6142cbbcaa33fee6 | ./2005.12.13/greenland_vel_mosaic_2005_2006_v02.1.xml           |
| 7d22aa4b7e7bb2222b32d9dff4b6e983 | ./2006.12.18/greenland_vel_mosaic500_2006_2007_browse_v02.1.jpg |
| 5284edf84ebbf582dd3e1fdb8c0a75a2 | ./2006.12.18/greenland_vel_mosaic500_2006_2007_ex_v02.1.tif     |
| 72018561e3234b6e7327ee99f6165fc4 | ./2006.12.18/greenland_vel_mosaic500_2006_2007_ey_v02.1.tif     |
| 8216f1e6e5cd3347308a6dc33b576aac | ./2006.12.18/greenland_vel_mosaic500_2006_2007_v02.1.xml        |
| 7c6ea53e512f5ad44f8e847b29cc5ed6 | ./2006.12.18/greenland_vel_mosaic500_2006_2007_vv_v02.1.tif     |
| b7eb89b5ebd1a9a964aadead2d785460 | ./2006.12.18/greenland_vel_mosaic500_2006_2007_vx_v02.1.tif     |
| ccc099a8bd54b18ca42274fa3b579404 | ./2006.12.18/greenland_vel_mosaic500_2006_2007_vy_v02.1.tif     |
| 36cfad6bdd621148c9f35c3dbd6591ae | ./2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.prj           |
| a92b357d325733c3aaf5311190b7c314 | ./2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.shp           |
| 735fbcc0fcf628874d88b1b6eb1b7676 | ./2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.shx           |
| 26437e169a4c192a6c4b2d5bac3b5cf0 | ./2006.12.18/greenland_vel_mosaic_2006_2007_v02.1.xml           |
| 9bb4a95fec1ffcfe9a0cd78be3787c2d | ./2007.09.07/greenland_vel_mosaic500_2007_2008_browse_v02.1.jpg |
| c44c35a30e1005bc80100377d92c5e0f | ./2007.09.07/greenland_vel_mosaic500_2007_2008_ex_v02.1.tif     |
| 7ebe65a72c1ec39f2e4cacf0a1974a06 | ./2007.09.07/greenland_vel_mosaic500_2007_2008_ey_v02.1.tif     |
| 87c00a4679d0101301155970220c5258 | ./2007.09.07/greenland_vel_mosaic500_2007_2008_v02.1.xml        |
| ba1f857fa37d4283900da6c8765872d2 | ./2007.09.07/greenland_vel_mosaic500_2007_2008_vv_v02.1.tif     |
| b54034263d8097659d47a923cacf42c1 | ./2007.09.07/greenland_vel_mosaic500_2007_2008_vx_v02.1.tif     |
| 68e11a41d9812827fa3f24a94542d0fd | ./2007.09.07/greenland_vel_mosaic500_2007_2008_vy_v02.1.tif     |
| 9a1ec4e17ef3e1f9f47d14c7a5fd5e86 | ./2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.prj           |
| 3aca53c07b1e34aaae7db97ea312c505 | ./2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.shp           |
| f96c1c94232309994639fd42b78a7339 | ./2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.shx           |
| 676dec0bddf08e07f7a1f01e1c5c94ba | ./2007.09.07/greenland_vel_mosaic_2007_2008_v02.1.xml           |
| 36a762e907dbda8829f6869112a1a9d5 | ./2008.09.15/greenland_vel_mosaic500_2008_2009_browse_v02.1.jpg |
| 0a01a2050ca4c0792129755ceca795aa | ./2008.09.15/greenland_vel_mosaic500_2008_2009_ex_v02.1.tif     |
| 94ea8fbabb89f1dfc1fcbaa88ad39796 | ./2008.09.15/greenland_vel_mosaic500_2008_2009_ey_v02.1.tif     |
| c43daa03a92e971e4bd7f7587011ab7f | ./2008.09.15/greenland_vel_mosaic500_2008_2009_v02.1.xml        |
| 018d7bcef3cff89e039484b8a35458eb | ./2008.09.15/greenland_vel_mosaic500_2008_2009_vv_v02.1.tif     |
| 166c6c1f647214ca1e7fc49fe90757a9 | ./2008.09.15/greenland_vel_mosaic500_2008_2009_vx_v02.1.tif     |
| 504b14bde498b6363c408442772a50be | ./2008.09.15/greenland_vel_mosaic500_2008_2009_vy_v02.1.tif     |
| bd3c23e4319c726575e0812067e968c3 | ./2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.prj           |
| fe32ee188b6eebde9e326724ae482152 | ./2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.shp           |
| 8bbdc422f66c7f84b4962b2724927d8d | ./2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.shx           |
| 9c4aca08efd481d81e9131f2f40b1755 | ./2008.09.15/greenland_vel_mosaic_2008_2009_v02.1.xml           |
| ac9d007f4c045d34d305fa7fed5517d6 | ./2009.09.02/greenland_vel_mosaic500_2009_2010_browse_v02.1.jpg |
| 6f467702bf41bdc8055c19b04d87f873 | ./2009.09.02/greenland_vel_mosaic500_2009_2010_ex_v02.1.tif     |
| 42888c41f7207c0654f8e80453e82c6a | ./2009.09.02/greenland_vel_mosaic500_2009_2010_ey_v02.1.tif     |
| 4fee3d32a4558553040da6075e1a93bb | ./2009.09.02/greenland_vel_mosaic500_2009_2010_v02.1.xml        |
| 743829d41ea07969345b6c768303b0e6 | ./2009.09.02/greenland_vel_mosaic500_2009_2010_vv_v02.1.tif     |
| af0583eb16c6d31cb8ceaeb64a3d6acd | ./2009.09.02/greenland_vel_mosaic500_2009_2010_vx_v02.1.tif     |
| 5abb91da20cbbdfe196e4a8bb5cc3e90 | ./2009.09.02/greenland_vel_mosaic500_2009_2010_vy_v02.1.tif     |
| a317e41c220f2f56216750d5b1d9a9c6 | ./2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.prj           |
| 4c73eb0870a52aa74a395eb1ae650b9c | ./2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.shp           |
| 35568d07793ddcc4e93e5089ab4af9df | ./2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.shx           |
| fe7f6ecba95baf148130a0d191898237 | ./2009.09.02/greenland_vel_mosaic_2009_2010_v02.1.xml           |
| cc34a28ba7a906fdbba4b003d3540a83 | ./2012.11.10/greenland_vel_mosaic500_2012_2013_browse_v02.1.jpg |
| 1e08376f4b552e82cb275b225d9a1e5b | ./2012.11.10/greenland_vel_mosaic500_2012_2013_ex_v02.1.tif     |
| 996d97a3ee004397d2185d37ddd5ebfe | ./2012.11.10/greenland_vel_mosaic500_2012_2013_ey_v02.1.tif     |
| fd82349e7193e754b21968bfd0846353 | ./2012.11.10/greenland_vel_mosaic500_2012_2013_v02.1.xml        |
| ca4fc877f5763218db73a19cd6c95a6a | ./2012.11.10/greenland_vel_mosaic500_2012_2013_vv_v02.1.tif     |
| ef668984eea41219fc3128ab83c2db32 | ./2012.11.10/greenland_vel_mosaic500_2012_2013_vx_v02.1.tif     |
| 0905c136d52a61e48fef38a6bafb72f0 | ./2012.11.10/greenland_vel_mosaic500_2012_2013_vy_v02.1.tif     |
| 095b0fc251b7ea2c6c15c28d2b9119a6 | ./2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.prj           |
| ce934db526d861877d2d81ed15192332 | ./2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.shp           |
| f0400a26b83b90f241f62fcb362d1ac9 | ./2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.shx           |
| 4a93e5ec8f254ea59da65ffd43c360a6 | ./2012.11.10/greenland_vel_mosaic_2012_2013_v02.1.xml           |
| 6d7f97224c4f318f984d8b0012be194b | ./2014.09.01/greenland_vel_mosaic200_2014_2015_browse_v02.1.jpg |
| 8529ea4957a4d98c15c6459985cbbac1 | ./2014.09.01/greenland_vel_mosaic200_2014_2015_ex_v02.1.tif     |
| dfcd41f9be8618d272562a0228183c0f | ./2014.09.01/greenland_vel_mosaic200_2014_2015_ey_v02.1.tif     |
| 065db101e178e62ac4589ec7a18f3b8f | ./2014.09.01/greenland_vel_mosaic200_2014_2015_v02.1.xml        |
| 9bf8fcf0c4add78ed54c4a35b444bdc3 | ./2014.09.01/greenland_vel_mosaic200_2014_2015_vv_v02.1.tif     |
| b39158d4fa66121a23543b1cf84eb967 | ./2014.09.01/greenland_vel_mosaic200_2014_2015_vx_v02.1.tif     |
| aadfd0763da9acb5604caa1e3e2a4906 | ./2014.09.01/greenland_vel_mosaic200_2014_2015_vy_v02.1.tif     |
| 48058d4bfba2526b66f74d9e093eaf6b | ./2014.09.01/greenland_vel_mosaic500_2014_2015_browse_v02.1.jpg |
| fa297f954f247cb5e8104c63ddb80def | ./2014.09.01/greenland_vel_mosaic500_2014_2015_ex_v02.1.tif     |
| 5beaf898560f0b53b06e02c00c570680 | ./2014.09.01/greenland_vel_mosaic500_2014_2015_ey_v02.1.tif     |
| c5f0562045c4c30cda5bfaba55269a37 | ./2014.09.01/greenland_vel_mosaic500_2014_2015_v02.1.xml        |
| 0a32de5018bc8779441678b78c0050a8 | ./2014.09.01/greenland_vel_mosaic500_2014_2015_vv_v02.1.tif     |
| 5d9fa64901b201e485b87dd421be0d6b | ./2014.09.01/greenland_vel_mosaic500_2014_2015_vx_v02.1.tif     |
| 1059e370d6b42df96fd096c047d598b7 | ./2014.09.01/greenland_vel_mosaic500_2014_2015_vy_v02.1.tif     |
| 8bed0f9b98bf18e6b230f1763d2d0a85 | ./2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.prj           |
| e3e424bcf9662294c816f097176795e6 | ./2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.shp           |
| 9b736f353dc7dd85fa41404595cdc070 | ./2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.shx           |
| 2b8cc13c69f6e36f7d47d99d9224d1d1 | ./2014.09.01/greenland_vel_mosaic_2014_2015_v02.1.xml           |
| 2cbe77ad0dc94962dd40d91b9d7bc1b9 | ./2015.09.01/greenland_vel_mosaic200_2015_2016_browse_v02.1.jpg |
| e9e3d01d630533d870d552da023a66ba | ./2015.09.01/greenland_vel_mosaic200_2015_2016_ex_v02.1.tif     |
| 1d1b5b0efcdf24218e9f7d75b6750a3d | ./2015.09.01/greenland_vel_mosaic200_2015_2016_ey_v02.1.tif     |
| 6fcbded660bff6d6663fba9f1c9753d3 | ./2015.09.01/greenland_vel_mosaic200_2015_2016_v02.1.xml        |
| c4e31ad76bf8c774d2d2717ee1298a36 | ./2015.09.01/greenland_vel_mosaic200_2015_2016_vv_v02.1.tif     |
| 48bfa5266b6ecf5d4939c306f665ce47 | ./2015.09.01/greenland_vel_mosaic200_2015_2016_vx_v02.1.tif     |
| f68a5bbc76bcbb11b3cfe7a979d64651 | ./2015.09.01/greenland_vel_mosaic200_2015_2016_vy_v02.1.tif     |
| 476cac9fe27f28218ad3bd40a06a8278 | ./2015.09.01/greenland_vel_mosaic500_2015_2016_browse_v02.1.jpg |
| e88ca627886afdb8435205a7b1c3f483 | ./2015.09.01/greenland_vel_mosaic500_2015_2016_ex_v02.1.tif     |
| b91a3cdede19b30f8268c56af97a1401 | ./2015.09.01/greenland_vel_mosaic500_2015_2016_ey_v02.1.tif     |
| 29814600e8360652bad1a92dbb5c12b1 | ./2015.09.01/greenland_vel_mosaic500_2015_2016_v02.1.xml        |
| b56ca5d8e3fabe640802ef10cac98c05 | ./2015.09.01/greenland_vel_mosaic500_2015_2016_vv_v02.1.tif     |
| 94fac5a60e8d74d5daef331437725a2a | ./2015.09.01/greenland_vel_mosaic500_2015_2016_vx_v02.1.tif     |
| 7e62f18ca9a76646329a5c9de0774c70 | ./2015.09.01/greenland_vel_mosaic500_2015_2016_vy_v02.1.tif     |
| c56deac0f504fb790a0d41580ed3b93f | ./2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.prj           |
| 7dbe778bdcfa579fc06c38aaea44ca0b | ./2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.shp           |
| 8c46c7d794b1b41a61c8a768000ddb92 | ./2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.shx           |
| 017ceccd7054a6a5ac467573ec89717b | ./2015.09.01/greenland_vel_mosaic_2015_2016_v02.1.xml           |
| 0aef551d3da1ba45837130be98bf9ee7 | ./2016.09.01/greenland_vel_mosaic200_2016_2017_browse_v02.1.jpg |
| 8cecafd27346f730c02d0c887d608d39 | ./2016.09.01/greenland_vel_mosaic200_2016_2017_ex_v02.1.tif     |
| 56355df21064d121305ead513682222d | ./2016.09.01/greenland_vel_mosaic200_2016_2017_ey_v02.1.tif     |
| ace1b23a7a5c74ba25e1457c830b410f | ./2016.09.01/greenland_vel_mosaic200_2016_2017_v02.1.xml        |
| 0532b20cddc74867a770c5b306c442ec | ./2016.09.01/greenland_vel_mosaic200_2016_2017_vv_v02.1.tif     |
| 522dd0173fad38c99f0a6c896be48914 | ./2016.09.01/greenland_vel_mosaic200_2016_2017_vx_v02.1.tif     |
| 7964dca90e3d5b48fb8e39f0160aa705 | ./2016.09.01/greenland_vel_mosaic200_2016_2017_vy_v02.1.tif     |
| 1d5721a981065aa92b3f1a9b02691f40 | ./2016.09.01/greenland_vel_mosaic500_2016_2017_browse_v02.1.jpg |
| 9bf87cf955a0ef2e1fedab5bbb5e49c0 | ./2016.09.01/greenland_vel_mosaic500_2016_2017_ex_v02.1.tif     |
| f5ba497d91161e2c92e5c6c6333e9dd9 | ./2016.09.01/greenland_vel_mosaic500_2016_2017_ey_v02.1.tif     |
| 3d613e5b8cddfaad13a0bd4226185afc | ./2016.09.01/greenland_vel_mosaic500_2016_2017_v02.1.xml        |
| 7dbfed1d27cb7f53425042170e9f612b | ./2016.09.01/greenland_vel_mosaic500_2016_2017_vv_v02.1.tif     |
| 9e66bb5b796781e50c63ac084268c07f | ./2016.09.01/greenland_vel_mosaic500_2016_2017_vx_v02.1.tif     |
| d13679a8fedfdb88e6ea2bfb1c79c523 | ./2016.09.01/greenland_vel_mosaic500_2016_2017_vy_v02.1.tif     |
| 16acfc18fc991cc3627426695ab78d32 | ./2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.prj           |
| 0314c3b53b2f894bc049468080da81df | ./2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.shp           |
| 0ffbae03976b6d3832b183521c7197ab | ./2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.shx           |
| 4bb7af95ad3aa0a51d36ed87a0f6b894 | ./2016.09.01/greenland_vel_mosaic_2016_2017_v02.1.xml           |
| ab274d74bd6a7cbd39d41989b91b2bcf | ./2017.09.01/greenland_vel_mosaic200_2017_2018_browse_v02.1.jpg |
| fdf36e5a01118dd4e54996665d13c170 | ./2017.09.01/greenland_vel_mosaic200_2017_2018_ex_v02.1.tif     |
| 1b1c7ffae2ea5e2d0b28f0428549c1e2 | ./2017.09.01/greenland_vel_mosaic200_2017_2018_ey_v02.1.tif     |
| 598d5f3645bb378f89e53e2c216ce35d | ./2017.09.01/greenland_vel_mosaic200_2017_2018_v02.1.xml        |
| 00651d98489def32128f3175e6ce67a1 | ./2017.09.01/greenland_vel_mosaic200_2017_2018_vv_v02.1.tif     |
| 6cdb1a1651c843ca9a8d06e069a0cf34 | ./2017.09.01/greenland_vel_mosaic200_2017_2018_vx_v02.1.tif     |
| 1facbb34e2e58b657b8b7f2a4188dde2 | ./2017.09.01/greenland_vel_mosaic200_2017_2018_vy_v02.1.tif     |
| cdf3f2674515176a734df5a7b6f0f297 | ./2017.09.01/greenland_vel_mosaic500_2017_2018_browse_v02.1.jpg |
| 9837baeee2a7e7a12b4c49ac88198d47 | ./2017.09.01/greenland_vel_mosaic500_2017_2018_ex_v02.1.tif     |
| e825dc3f37c4bb36833b073195885a06 | ./2017.09.01/greenland_vel_mosaic500_2017_2018_ey_v02.1.tif     |
| 1c621f7082212eef4c0d189fc9af841a | ./2017.09.01/greenland_vel_mosaic500_2017_2018_v02.1.xml        |
| 59ffa5696a35920d3b8242d81a47421a | ./2017.09.01/greenland_vel_mosaic500_2017_2018_vv_v02.1.tif     |
| 56be38d07feb7a57fe44e1aa4c864a21 | ./2017.09.01/greenland_vel_mosaic500_2017_2018_vx_v02.1.tif     |
| 4027678341666a9cefde6752dfe2d3c1 | ./2017.09.01/greenland_vel_mosaic500_2017_2018_vy_v02.1.tif     |
| e95ef0a9bb8affd130037299b82bbda5 | ./2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.dbf           |
| 46b30532526b6ff959b307123a6d5e71 | ./2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.prj           |
| 952ff8d38c6a7104d15085f665026779 | ./2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.shp           |
| 40bb5405e925c999e34e7b07c78058f5 | ./2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.shx           |
| b4bc3cacacbba2428e706734b8a96b09 | ./2017.09.01/greenland_vel_mosaic_2017_2018_v02.1.xml           |
| 45b436c3ccefeaea2e802c9e2eeecac7 | ./README.org                                                    |


**** 0646
***** List of times, and count of folders at that time

#+NAME: QC_times_NSIDC_0646
#+BEGIN_SRC bash :results table :eval no-export
find ${DATADIR}/MEaSUREs/NSIDC-0646.003/ -type f -name "*vx_v03.0.tif" | rev | cut -d"_" -f3 | rev | LC_ALL=C sort | uniq -c
#+END_SRC

#+RESULTS: QC_times_NSIDC_0646
| 28 | 1985-03 |
| 36 | 1985-04 |
| 41 | 1985-05 |
| 44 | 1985-06 |
| 45 | 1985-07 |
| 49 | 1985-08 |
| 45 | 1985-09 |
| 36 | 1986-04 |
| 39 | 1986-05 |
| 35 | 1986-06 |
| 38 | 1986-07 |
| 44 | 1986-08 |
| 37 | 1986-09 |
|  9 | 1986-10 |
|  4 | 1987-03 |
| 42 | 1987-04 |
| 47 | 1987-05 |
| 44 | 1987-06 |
| 49 | 1987-07 |
| 45 | 1987-08 |
| 42 | 1987-09 |
| 19 | 1987-10 |
|  7 | 1988-03 |
| 41 | 1988-04 |
| 47 | 1988-05 |
| 41 | 1988-06 |
| 41 | 1988-07 |
| 41 | 1988-08 |
| 39 | 1988-09 |
| 16 | 1988-10 |
| 27 | 1989-03 |
| 48 | 1989-04 |
| 43 | 1989-05 |
| 42 | 1989-06 |
| 38 | 1989-07 |
| 40 | 1989-08 |
| 39 | 1989-09 |
|  6 | 1989-10 |
| 32 | 1990-03 |
| 49 | 1990-04 |
| 45 | 1990-05 |
| 43 | 1990-06 |
| 37 | 1990-07 |
| 38 | 1990-08 |
| 32 | 1990-09 |
| 21 | 1990-10 |
|  3 | 1991-06 |
|  2 | 1992-06 |
| 12 | 1992-07 |
| 10 | 1992-08 |
|  5 | 1992-09 |
|  4 | 1992-10 |
|  2 | 1993-03 |
| 12 | 1993-04 |
|  7 | 1993-05 |
|  5 | 1993-06 |
|  2 | 1993-07 |
|  6 | 1993-08 |
|  1 | 1993-09 |
| 40 | 1994-05 |
| 48 | 1994-06 |
| 42 | 1994-07 |
| 46 | 1994-08 |
| 41 | 1994-09 |
|  3 | 1995-04 |
|  1 | 1995-05 |
|  1 | 1995-06 |
| 10 | 1995-07 |
|  2 | 1995-08 |
|  1 | 1995-09 |
|  1 | 1995-10 |
|  6 | 1996-04 |
|  6 | 1996-05 |
| 12 | 1996-06 |
|  9 | 1996-07 |
|  4 | 1996-08 |
|  3 | 1996-09 |
|  1 | 1996-10 |
|  1 | 1997-03 |
|  5 | 1997-04 |
|  3 | 1997-05 |
|  6 | 1997-06 |
|  2 | 1997-07 |
| 11 | 1997-09 |
| 22 | 1997-10 |
| 29 | 1998-03 |
| 54 | 1998-04 |
| 52 | 1998-05 |
| 42 | 1998-06 |
| 45 | 1998-07 |
| 50 | 1998-08 |
| 48 | 1998-09 |
| 15 | 1998-10 |
| 41 | 1999-07 |
| 56 | 1999-08 |
| 56 | 1999-09 |
| 42 | 1999-10 |
|  8 | 1999-11 |
|  2 | 1999-12 |
| 22 | 2000-02 |
| 56 | 2000-03 |
| 55 | 2000-04 |
| 56 | 2000-05 |
| 71 | 2000-06 |
| 61 | 2000-07 |
| 65 | 2000-08 |
| 57 | 2000-09 |
| 28 | 2000-10 |
|  1 | 2000-11 |
| 49 | 2001-03 |
| 62 | 2001-04 |
| 59 | 2001-05 |
| 63 | 2001-06 |
| 64 | 2001-07 |
| 54 | 2001-08 |
| 51 | 2001-09 |
| 44 | 2001-10 |
|  5 | 2001-11 |
|  3 | 2002-01 |
|  5 | 2002-02 |
| 55 | 2002-03 |
| 63 | 2002-04 |
| 56 | 2002-05 |
| 66 | 2002-06 |
| 65 | 2002-07 |
| 56 | 2002-08 |
| 34 | 2002-09 |
| 11 | 2002-10 |
|  6 | 2003-02 |
| 35 | 2003-03 |
| 63 | 2003-04 |
| 62 | 2003-05 |
| 56 | 2003-06 |
| 46 | 2003-07 |
| 53 | 2003-08 |
| 44 | 2003-09 |
|  2 | 2003-10 |
| 27 | 2004-03 |
| 56 | 2004-04 |
| 59 | 2004-05 |
| 70 | 2004-06 |
| 69 | 2004-07 |
| 67 | 2004-08 |
| 57 | 2004-09 |
| 10 | 2004-10 |
| 19 | 2005-03 |
| 59 | 2005-04 |
| 55 | 2005-05 |
| 65 | 2005-06 |
| 61 | 2005-07 |
| 56 | 2005-08 |
| 55 | 2005-09 |
| 21 | 2005-10 |
| 40 | 2006-03 |
| 58 | 2006-04 |
| 56 | 2006-05 |
| 72 | 2006-06 |
| 72 | 2006-07 |
| 67 | 2006-08 |
| 56 | 2006-09 |
| 20 | 2006-10 |
|  2 | 2006-11 |
| 64 | 2007-03 |
| 68 | 2007-04 |
| 65 | 2007-05 |
| 72 | 2007-06 |
| 69 | 2007-07 |
| 66 | 2007-08 |
| 67 | 2007-09 |
| 19 | 2007-10 |
| 14 | 2008-03 |
| 61 | 2008-04 |
| 57 | 2008-05 |
| 66 | 2008-06 |
| 72 | 2008-07 |
| 58 | 2008-08 |
| 49 | 2008-09 |
| 15 | 2008-10 |
|  1 | 2008-11 |
|  2 | 2009-01 |
|  1 | 2009-02 |
| 36 | 2009-03 |
| 50 | 2009-04 |
| 60 | 2009-05 |
| 68 | 2009-06 |
| 72 | 2009-07 |
| 69 | 2009-08 |
| 57 | 2009-09 |
| 12 | 2009-10 |
| 26 | 2010-03 |
| 58 | 2010-04 |
| 62 | 2010-05 |
| 68 | 2010-06 |
| 71 | 2010-07 |
| 65 | 2010-08 |
| 51 | 2010-09 |
| 15 | 2010-10 |
| 31 | 2011-03 |
| 50 | 2011-04 |
| 58 | 2011-05 |
| 66 | 2011-06 |
| 70 | 2011-07 |
| 70 | 2011-08 |
| 55 | 2011-09 |
| 19 | 2011-10 |
|  2 | 2012-01 |
| 18 | 2012-03 |
| 54 | 2012-04 |
| 65 | 2012-05 |
| 73 | 2012-06 |
| 72 | 2012-07 |
| 73 | 2012-08 |
| 58 | 2012-09 |
| 19 | 2012-10 |
|  4 | 2013-02 |
| 62 | 2013-03 |
| 72 | 2013-04 |
| 72 | 2013-05 |
| 73 | 2013-06 |
| 69 | 2013-07 |
| 70 | 2013-08 |
| 72 | 2013-09 |
| 48 | 2013-10 |
| 23 | 2013-11 |
| 11 | 2013-12 |
| 13 | 2014-01 |
| 42 | 2014-02 |
| 64 | 2014-03 |
| 67 | 2014-04 |
| 70 | 2014-05 |
| 72 | 2014-06 |
| 73 | 2014-07 |
| 73 | 2014-08 |
| 73 | 2014-09 |
| 49 | 2014-10 |
| 26 | 2014-11 |
| 14 | 2014-12 |
| 15 | 2015-01 |
| 51 | 2015-02 |
| 71 | 2015-03 |
| 70 | 2015-04 |
| 73 | 2015-05 |
| 72 | 2015-06 |
| 73 | 2015-07 |
| 72 | 2015-08 |
| 73 | 2015-09 |
| 68 | 2015-10 |
| 25 | 2015-11 |
|  9 | 2015-12 |
|  8 | 2016-01 |
| 53 | 2016-02 |
| 73 | 2016-03 |
| 74 | 2016-04 |
| 74 | 2016-05 |
| 74 | 2016-06 |
| 74 | 2016-07 |
| 74 | 2016-08 |
| 72 | 2016-09 |
| 61 | 2016-10 |
| 25 | 2016-11 |
| 12 | 2016-12 |
| 17 | 2017-01 |
| 50 | 2017-02 |
| 70 | 2017-03 |
| 71 | 2017-04 |
| 69 | 2017-05 |
| 69 | 2017-06 |
| 69 | 2017-07 |
| 71 | 2017-08 |
| 69 | 2017-09 |
| 64 | 2017-10 |
| 32 | 2017-11 |
| 11 | 2017-12 |
| 22 | 2018-01 |
| 55 | 2018-02 |
| 72 | 2018-03 |
| 72 | 2018-04 |
| 73 | 2018-05 |
| 72 | 2018-06 |
| 73 | 2018-07 |
| 73 | 2018-08 |
| 72 | 2018-09 |
| 68 | 2018-10 |
| 26 | 2018-11 |
|  7 | 2018-12 |
| 14 | 2019-01 |
| 59 | 2019-02 |
| 69 | 2019-03 |
| 66 | 2019-04 |
| 64 | 2019-05 |
| 69 | 2019-06 |
| 69 | 2019-07 |
| 69 | 2019-08 |
| 69 | 2019-09 |
| 65 | 2019-10 |
| 36 | 2019-11 |
|  4 | 2019-12 |

**** 0731
***** File List
Subset to vx

#+BEGIN_SRC bash :results verbatim :eval no-export
(cd ${DATADIR}/MEaSUREs/NSIDC-0731.001; find -name "*vx*.tif"| LC_ALL=C sort)
#+END_SRC

#+RESULTS:
#+begin_example
./greenland_vel_mosaic_2014-12-01_2014-12-31_v01/greenland_vel_mosaic_2014-12-01_2014-12-31_vx_v01.1.tif
./greenland_vel_mosaic_2015-01-01_2015-01-31_v01/greenland_vel_mosaic_2015-01-01_2015-01-31_vx_v01.1.tif
./greenland_vel_mosaic_2015-02-01_2015-02-28_v01/greenland_vel_mosaic_2015-02-01_2015-02-28_vx_v01.1.tif
./greenland_vel_mosaic_2015-03-01_2015-03-31_v01/greenland_vel_mosaic_2015-03-01_2015-03-31_vx_v01.1.tif
./greenland_vel_mosaic_2015-04-01_2015-04-30_v01/greenland_vel_mosaic_2015-04-01_2015-04-30_vx_v01.1.tif
./greenland_vel_mosaic_2015-05-01_2015-05-31_v01/greenland_vel_mosaic_2015-05-01_2015-05-31_vx_v01.1.tif
./greenland_vel_mosaic_2015-06-01_2015-06-30_v01/greenland_vel_mosaic_2015-06-01_2015-06-30_vx_v01.1.tif
./greenland_vel_mosaic_2015-07-01_2015-07-31_v01/greenland_vel_mosaic_2015-07-01_2015-07-31_vx_v01.1.tif
./greenland_vel_mosaic_2015-08-01_2015-08-31_v01/greenland_vel_mosaic_2015-08-01_2015-08-31_vx_v01.1.tif
./greenland_vel_mosaic_2015-09-01_2015-09-30_v01/greenland_vel_mosaic_2015-09-01_2015-09-30_vx_v01.1.tif
./greenland_vel_mosaic_2015-10-01_2015-10-31_v01/greenland_vel_mosaic_2015-10-01_2015-10-31_vx_v01.1.tif
./greenland_vel_mosaic_2015-11-01_2015-11-30_v01/greenland_vel_mosaic_2015-11-01_2015-11-30_vx_v01.1.tif
./greenland_vel_mosaic_2015-12-01_2015-12-31_v01/greenland_vel_mosaic_2015-12-01_2015-12-31_vx_v01.1.tif
./greenland_vel_mosaic_2016-01-01_2016-01-31_v01/greenland_vel_mosaic_2016-01-01_2016-01-31_vx_v01.1.tif
./greenland_vel_mosaic_2016-02-01_2016-02-29_v01/greenland_vel_mosaic_2016-02-01_2016-02-29_vx_v01.1.tif
./greenland_vel_mosaic_2016-03-01_2016-03-31_v01/greenland_vel_mosaic_2016-03-01_2016-03-31_vx_v01.1.tif
./greenland_vel_mosaic_2016-04-01_2016-04-30_v01/greenland_vel_mosaic_2016-04-01_2016-04-30_vx_v01.1.tif
./greenland_vel_mosaic_2016-05-01_2016-05-31_v01/greenland_vel_mosaic_2016-05-01_2016-05-31_vx_v01.1.tif
./greenland_vel_mosaic_2016-06-01_2016-06-30_v01/greenland_vel_mosaic_2016-06-01_2016-06-30_vx_v01.1.tif
./greenland_vel_mosaic_2016-07-01_2016-07-31_v01/greenland_vel_mosaic_2016-07-01_2016-07-31_vx_v01.1.tif
./greenland_vel_mosaic_2016-08-01_2016-08-31_v01/greenland_vel_mosaic_2016-08-01_2016-08-31_vx_v01.1.tif
./greenland_vel_mosaic_2016-09-01_2016-09-30_v01/greenland_vel_mosaic_2016-09-01_2016-09-30_vx_v01.1.tif
./greenland_vel_mosaic_2016-10-01_2016-10-31_v01/greenland_vel_mosaic_2016-10-01_2016-10-31_vx_v01.1.tif
./greenland_vel_mosaic_2016-11-01_2016-11-30_v01/greenland_vel_mosaic_2016-11-01_2016-11-30_vx_v01.1.tif
./greenland_vel_mosaic_2016-12-01_2016-12-31_v01/greenland_vel_mosaic_2016-12-01_2016-12-31_vx_v01.1.tif
./greenland_vel_mosaic_2017-01-01_2017-01-31_v01/greenland_vel_mosaic_2017-01-01_2017-01-31_vx_v01.1.tif
./greenland_vel_mosaic_2017-02-01_2017-02-28_v01/greenland_vel_mosaic_2017-02-01_2017-02-28_vx_v01.1.tif
./greenland_vel_mosaic_2017-03-01_2017-03-31_v01/greenland_vel_mosaic_2017-03-01_2017-03-31_vx_v01.1.tif
./greenland_vel_mosaic_2017-04-01_2017-04-30_v01/greenland_vel_mosaic_2017-04-01_2017-04-30_vx_v01.1.tif
./greenland_vel_mosaic_2017-05-01_2017-05-31_v01/greenland_vel_mosaic_2017-05-01_2017-05-31_vx_v01.1.tif
./greenland_vel_mosaic_2017-06-01_2017-06-30_v01/greenland_vel_mosaic_2017-06-01_2017-06-30_vx_v01.1.tif
./greenland_vel_mosaic_2017-07-01_2017-07-31_v01/greenland_vel_mosaic_2017-07-01_2017-07-31_vx_v01.1.tif
./greenland_vel_mosaic_2017-08-01_2017-08-31_v01/greenland_vel_mosaic_2017-08-01_2017-08-31_vx_v01.1.tif
./greenland_vel_mosaic_2017-09-01_2017-09-30_v01/greenland_vel_mosaic_2017-09-01_2017-09-30_vx_v01.1.tif
./greenland_vel_mosaic_2017-10-01_2017-10-31_v01/greenland_vel_mosaic_2017-10-01_2017-10-31_vx_v01.1.tif
./greenland_vel_mosaic_2017-11-01_2017-11-30_v01/greenland_vel_mosaic_2017-11-01_2017-11-30_vx_v01.1.tif
./greenland_vel_mosaic_2017-12-01_2017-12-31_v01/greenland_vel_mosaic_2017-12-01_2017-12-31_vx_v01.1.tif
./greenland_vel_mosaic_2018-01-01_2018-01-31_v01/greenland_vel_mosaic_2018-01-01_2018-01-31_vx_v01.1.tif
./greenland_vel_mosaic_2018-02-01_2018-02-28_v01/greenland_vel_mosaic_2018-02-01_2018-02-28_vx_v01.1.tif
./greenland_vel_mosaic_2018-03-01_2018-03-31_v01/greenland_vel_mosaic_2018-03-01_2018-03-31_vx_v01.1.tif
./greenland_vel_mosaic_2018-04-01_2018-04-30_v01/greenland_vel_mosaic_2018-04-01_2018-04-30_vx_v01.1.tif
./greenland_vel_mosaic_2018-05-01_2018-05-31_v01/greenland_vel_mosaic_2018-05-01_2018-05-31_vx_v01.1.tif
./greenland_vel_mosaic_2018-06-01_2018-06-30_v01/greenland_vel_mosaic_2018-06-01_2018-06-30_vx_v01.1.tif
./greenland_vel_mosaic_2018-07-01_2018-07-31_v01/greenland_vel_mosaic_2018-07-01_2018-07-31_vx_v01.1.tif
./greenland_vel_mosaic_2018-08-01_2018-08-31_v01/greenland_vel_mosaic_2018-08-01_2018-08-31_vx_v01.1.tif
./greenland_vel_mosaic_2018-09-01_2018-09-30_v01/greenland_vel_mosaic_2018-09-01_2018-09-30_vx_v01.1.tif
./greenland_vel_mosaic_2018-10-01_2018-10-31_v01/greenland_vel_mosaic_2018-10-01_2018-10-31_vx_v01.1.tif
./greenland_vel_mosaic_2018-11-01_2018-11-30_v01/greenland_vel_mosaic_2018-11-01_2018-11-30_vx_v01.1.tif
#+end_example

***** File Metadata

#+NAME: QC_gdalinfo_NSIDC_0731
#+BEGIN_SRC bash :results verbatim :eval no-export
somefile=$(find ${DATADIR}/MEaSUREs/NSIDC-0731.001 -name "*vx*.tif" | LC_ALL=C sort | head -n1)
md5sum ${somefile}
echo ""
gdalinfo -mm ${somefile}
#+END_SRC

#+RESULTS: QC_gdalinfo_NSIDC_0731
#+begin_example
02a6415f4fed38bf8e5ae585eb4a2796  /home/kdm/data/MEaSUREs/NSIDC-0731.001/greenland_vel_mosaic_2014-12-01_2014-12-31_v01/greenland_vel_mosaic_2014-12-01_2014-12-31_vx_v01.1.tif

Driver: GTiff/GeoTIFF
Files: /home/kdm/data/MEaSUREs/NSIDC-0731.001/greenland_vel_mosaic_2014-12-01_2014-12-31_v01/greenland_vel_mosaic_2014-12-01_2014-12-31_vx_v01.1.tif
Size is 7585, 13700
Coordinate System is:
PROJCRS["WGS84/NSIDCSeaIcePolarStereographicNorth",
    BASEGEOGCRS["WGS 84",
        DATUM["World Geodetic System 1984",
            ELLIPSOID["WGS 84",6378137,298.257223563,
                LENGTHUNIT["metre",1]]],
        PRIMEM["Greenwich",0,
            ANGLEUNIT["degree",0.0174532925199433]],
        ID["EPSG",4326]],
    CONVERSION["Polar Stereographic (variant B)",
        METHOD["Polar Stereographic (variant B)",
            ID["EPSG",9829]],
        PARAMETER["Latitude of standard parallel",70,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8832]],
        PARAMETER["Longitude of origin",-45,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8833]],
        PARAMETER["False easting",0,
            LENGTHUNIT["metre",1],
            ID["EPSG",8806]],
        PARAMETER["False northing",0,
            LENGTHUNIT["metre",1],
            ID["EPSG",8807]]],
    CS[Cartesian,2],
        AXIS["(E)",south,
            MERIDIAN[90,
                ANGLEUNIT["degree",0.0174532925199433,
                    ID["EPSG",9122]]],
            ORDER[1],
            LENGTHUNIT["metre",1]],
        AXIS["(N)",south,
            MERIDIAN[180,
                ANGLEUNIT["degree",0.0174532925199433,
                    ID["EPSG",9122]]],
            ORDER[2],
            LENGTHUNIT["metre",1]]]
Data axis to CRS axis mapping: 1,2
Origin = (-659100.000000000000000,-639100.000000000000000)
Pixel Size = (200.000000000000000,-200.000000000000000)
Metadata:
  AREA_OR_POINT=Area
Image Structure Metadata:
  COMPRESSION=LZW
  INTERLEAVE=BAND
Corner Coordinates:
Upper Left  ( -659100.000, -639100.000) ( 90d52'57.45"W, 81d32'23.19"N)
Lower Left  ( -659100.000,-3379100.000) ( 56d 2'13.47"W, 58d58'10.19"N)
Upper Right (  857900.000, -639100.000) (  8d18'55.49"E, 80d 8'52.35"N)
Lower Right (  857900.000,-3379100.000) ( 30d45'16.18"W, 58d35'44.75"N)
Center      (   99400.000,-2009100.000) ( 42d10' 3.39"W, 71d35' 4.30"N)
Band 1 Block=256x256 Type=Float32, ColorInterp=Gray
    Computed Min/Max=-22201.459,8229.834
  NoData Value=-2000000000
#+end_example

***** md5sum hashes of all data

#+NAME: QC_md5sum_NSIDC_0731
#+BEGIN_SRC bash :results table :eval no-export
cd ${DATADIR}/MEaSUREs/NSIDC-0731.001
# awk 'NR % 5 == 0' input > output # print every 5th line
# head -n2 # top two files
find . -type f -name "*vx*.tif" | LC_ALL=C sort | tail -n16| parallel --keep-order "md5sum {}"
#+END_SRC

#+RESULTS: QC_md5sum_NSIDC_0731
| 81da7a23eb7c837292b500b5b7379ed5 | ./greenland_vel_mosaic_2017-08-01_2017-08-31_v01/greenland_vel_mosaic_2017-08-01_2017-08-31_vx_v01.1.tif |
| 06b706180b5eb840df9837cd419f5e70 | ./greenland_vel_mosaic_2017-09-01_2017-09-30_v01/greenland_vel_mosaic_2017-09-01_2017-09-30_vx_v01.1.tif |
| d28772162a33c7c8e25b3d697e2a8235 | ./greenland_vel_mosaic_2017-10-01_2017-10-31_v01/greenland_vel_mosaic_2017-10-01_2017-10-31_vx_v01.1.tif |
| bbe74d73b60c867139a7c37f1d9a25c4 | ./greenland_vel_mosaic_2017-11-01_2017-11-30_v01/greenland_vel_mosaic_2017-11-01_2017-11-30_vx_v01.1.tif |
| f908de1e0ae70a45321149f65b481482 | ./greenland_vel_mosaic_2017-12-01_2017-12-31_v01/greenland_vel_mosaic_2017-12-01_2017-12-31_vx_v01.1.tif |
| 859c4aef099ef2b7f32d2cad560efb4f | ./greenland_vel_mosaic_2018-01-01_2018-01-31_v01/greenland_vel_mosaic_2018-01-01_2018-01-31_vx_v01.1.tif |
| 63f52f28ad324b0dd531f3f885d19804 | ./greenland_vel_mosaic_2018-02-01_2018-02-28_v01/greenland_vel_mosaic_2018-02-01_2018-02-28_vx_v01.1.tif |
| ba146f97be7656efbc20c5c7e861128b | ./greenland_vel_mosaic_2018-03-01_2018-03-31_v01/greenland_vel_mosaic_2018-03-01_2018-03-31_vx_v01.1.tif |
| f22da3bbb7a3ec0c8c044747ec5776a1 | ./greenland_vel_mosaic_2018-04-01_2018-04-30_v01/greenland_vel_mosaic_2018-04-01_2018-04-30_vx_v01.1.tif |
| 5784f8b5f02b233e3f8c09171763d560 | ./greenland_vel_mosaic_2018-05-01_2018-05-31_v01/greenland_vel_mosaic_2018-05-01_2018-05-31_vx_v01.1.tif |
| c9f9c67d001859228d8665a70f847313 | ./greenland_vel_mosaic_2018-06-01_2018-06-30_v01/greenland_vel_mosaic_2018-06-01_2018-06-30_vx_v01.1.tif |
| debe629561dd7ce29587c25bb6ab8b5d | ./greenland_vel_mosaic_2018-07-01_2018-07-31_v01/greenland_vel_mosaic_2018-07-01_2018-07-31_vx_v01.1.tif |
| c5ae0b3e3a2ad0e07e8d74f91f08b1e7 | ./greenland_vel_mosaic_2018-08-01_2018-08-31_v01/greenland_vel_mosaic_2018-08-01_2018-08-31_vx_v01.1.tif |
| 13e416c623b801238905c11f0c01cf82 | ./greenland_vel_mosaic_2018-09-01_2018-09-30_v01/greenland_vel_mosaic_2018-09-01_2018-09-30_vx_v01.1.tif |
| cb753e82570b353a1af4f3b60699284e | ./greenland_vel_mosaic_2018-10-01_2018-10-31_v01/greenland_vel_mosaic_2018-10-01_2018-10-31_vx_v01.1.tif |
| 7d4ae0393311cf0c980397cff08a54be | ./greenland_vel_mosaic_2018-11-01_2018-11-30_v01/greenland_vel_mosaic_2018-11-01_2018-11-30_vx_v01.1.tif |

*** Sentinel 1
***** File List

#+BEGIN_SRC bash :results verbatim :eval no-export
(cd ${DATADIR}/Sentinel1; find . -name "*.nc" | LC_ALL=C sort)
#+END_SRC

#+RESULTS:
#+begin_example
./Sentinel1_IV_maps/IV_20160913_20161006.nc
./Sentinel1_IV_maps/IV_20160925_20161018.nc
./Sentinel1_IV_maps/IV_20161007_20161030.nc
./Sentinel1_IV_maps/IV_20161013_20161105.nc
./Sentinel1_IV_maps/IV_20161019_20161111.nc
./Sentinel1_IV_maps/IV_20161031_20161123.nc
./Sentinel1_IV_maps/IV_20161106_20161129.nc
./Sentinel1_IV_maps/IV_20161118_20161211.nc
./Sentinel1_IV_maps/IV_20161124_20161217.nc
./Sentinel1_IV_maps/IV_20161130_20161223.nc
./Sentinel1_IV_maps/IV_20161206_20161229.nc
./Sentinel1_IV_maps/IV_20161212_20170104.nc
./Sentinel1_IV_maps/IV_20161218_20170110.nc
./Sentinel1_IV_maps/IV_20161224_20170116.nc
./Sentinel1_IV_maps/IV_20161230_20170122.nc
./Sentinel1_IV_maps/IV_20170105_20170128.nc
./Sentinel1_IV_maps/IV_20170111_20170203.nc
./Sentinel1_IV_maps/IV_20170117_20170209.nc
./Sentinel1_IV_maps/IV_20170123_20170215.nc
./Sentinel1_IV_maps/IV_20170129_20170221.nc
./Sentinel1_IV_maps/IV_20170204_20170227.nc
./Sentinel1_IV_maps/IV_20170210_20170305.nc
./Sentinel1_IV_maps/IV_20170216_20170311.nc
./Sentinel1_IV_maps/IV_20170222_20170317.nc
./Sentinel1_IV_maps/IV_20170228_20170323.nc
./Sentinel1_IV_maps/IV_20170306_20170329.nc
./Sentinel1_IV_maps/IV_20170312_20170404.nc
./Sentinel1_IV_maps/IV_20170318_20170410.nc
./Sentinel1_IV_maps/IV_20170324_20170416.nc
./Sentinel1_IV_maps/IV_20170330_20170422.nc
./Sentinel1_IV_maps/IV_20170405_20170428.nc
./Sentinel1_IV_maps/IV_20170411_20170504.nc
./Sentinel1_IV_maps/IV_20170417_20170510.nc
./Sentinel1_IV_maps/IV_20170423_20170516.nc
./Sentinel1_IV_maps/IV_20170429_20170522.nc
./Sentinel1_IV_maps/IV_20170505_20170528.nc
./Sentinel1_IV_maps/IV_20170511_20170603.nc
./Sentinel1_IV_maps/IV_20170517_20170609.nc
./Sentinel1_IV_maps/IV_20170523_20170615.nc
./Sentinel1_IV_maps/IV_20170529_20170621.nc
./Sentinel1_IV_maps/IV_20170604_20170627.nc
./Sentinel1_IV_maps/IV_20170610_20170703.nc
./Sentinel1_IV_maps/IV_20170616_20170709.nc
./Sentinel1_IV_maps/IV_20170622_20170715.nc
./Sentinel1_IV_maps/IV_20170628_20170721.nc
./Sentinel1_IV_maps/IV_20170704_20170727.nc
./Sentinel1_IV_maps/IV_20170710_20170802.nc
./Sentinel1_IV_maps/IV_20170716_20170808.nc
./Sentinel1_IV_maps/IV_20170722_20170814.nc
./Sentinel1_IV_maps/IV_20170728_20170820.nc
./Sentinel1_IV_maps/IV_20170803_20170826.nc
./Sentinel1_IV_maps/IV_20170809_20170901.nc
./Sentinel1_IV_maps/IV_20170815_20170907.nc
./Sentinel1_IV_maps/IV_20170821_20170913.nc
./Sentinel1_IV_maps/IV_20170902_20170925.nc
./Sentinel1_IV_maps/IV_20170908_20171001.nc
./Sentinel1_IV_maps/IV_20170914_20171007.nc
./Sentinel1_IV_maps/IV_20170920_20171013.nc
./Sentinel1_IV_maps/IV_20170926_20171019.nc
./Sentinel1_IV_maps/IV_20171002_20171025.nc
./Sentinel1_IV_maps/IV_20171008_20171031.nc
./Sentinel1_IV_maps/IV_20171014_20171106.nc
./Sentinel1_IV_maps/IV_20171020_20171112.nc
./Sentinel1_IV_maps/IV_20171026_20171118.nc
./Sentinel1_IV_maps/IV_20171101_20171124.nc
./Sentinel1_IV_maps/IV_20171106_20171130.nc
./Sentinel1_IV_maps/IV_20171118_20171212.nc
./Sentinel1_IV_maps/IV_20171130_20171224.nc
./Sentinel1_IV_maps/IV_20171212_20180105.nc
./Sentinel1_IV_maps/IV_20171224_20180117.nc
./Sentinel1_IV_maps/IV_20180105_20180129.nc
./Sentinel1_IV_maps/IV_20180117_20180210.nc
./Sentinel1_IV_maps/IV_20180129_20180222.nc
./Sentinel1_IV_maps/IV_20180210_20180306.nc
./Sentinel1_IV_maps/IV_20180222_20180318.nc
./Sentinel1_IV_maps/IV_20180306_20180330.nc
./Sentinel1_IV_maps/IV_20180318_20180411.nc
./Sentinel1_IV_maps/IV_20180330_20180423.nc
./Sentinel1_IV_maps/IV_20180411_20180505.nc
./Sentinel1_IV_maps/IV_20180423_20180517.nc
./Sentinel1_IV_maps/IV_20180505_20180529.nc
./Sentinel1_IV_maps/IV_20180517_20180610.nc
./Sentinel1_IV_maps/IV_20180529_20180622.nc
./Sentinel1_IV_maps/IV_20180610_20180704.nc
./Sentinel1_IV_maps/IV_20180622_20180716.nc
./Sentinel1_IV_maps/IV_20180704_20180728.nc
./Sentinel1_IV_maps/IV_20180716_20180809.nc
./Sentinel1_IV_maps/IV_20180728_20180821.nc
./Sentinel1_IV_maps/IV_20180809_20180902.nc
./Sentinel1_IV_maps/IV_20180821_20180914.nc
./Sentinel1_IV_maps/IV_20180902_20180926.nc
./Sentinel1_IV_maps/IV_20180914_20181008.nc
./Sentinel1_IV_maps/IV_20180926_20181020.nc
./Sentinel1_IV_maps/IV_20181008_20181101.nc
./Sentinel1_IV_maps/IV_20181020_20181113.nc
./Sentinel1_IV_maps/IV_20181101_20181125.nc
./Sentinel1_IV_maps/IV_20181113_20181207.nc
./Sentinel1_IV_maps/IV_20181126_20181219.nc
./Sentinel1_IV_maps/IV_20181207_20181231.nc
./Sentinel1_IV_maps/IV_20181219_20190112.nc
./Sentinel1_IV_maps/IV_20181231_20190124.nc
./Sentinel1_IV_maps/IV_20190112_20190205.nc
./Sentinel1_IV_maps/IV_20190124_20190217.nc
./Sentinel1_IV_maps/IV_20190205_20190301.nc
./Sentinel1_IV_maps/IV_20190217_20190313.nc
./Sentinel1_IV_maps/IV_20190301_20190325.nc
./Sentinel1_IV_maps/IV_20190313_20190406.nc
./Sentinel1_IV_maps/IV_20190325_20190417.nc
./Sentinel1_IV_maps/IV_20190406_20190430.nc
./Sentinel1_IV_maps/IV_20190418_20190512.nc
./Sentinel1_IV_maps/IV_20190430_20190524.nc
./Sentinel1_IV_maps/IV_20190512_20190605.nc
./Sentinel1_IV_maps/IV_20190524_20190617.nc
./Sentinel1_IV_maps/IV_20190605_20190629.nc
./Sentinel1_IV_maps/IV_20190617_20190711.nc
./Sentinel1_IV_maps/IV_20190629_20190723.nc
./Sentinel1_IV_maps/IV_20190711_20190804.nc
./Sentinel1_IV_maps/IV_20190723_20190816.nc
./Sentinel1_IV_maps/IV_20190804_20190828.nc
./Sentinel1_IV_maps/IV_20190816_20190909.nc
./Sentinel1_IV_maps/IV_20190828_20190921.nc
./Sentinel1_IV_maps/IV_20190909_20191003.nc
./Sentinel1_IV_maps/IV_20190921_20191015.nc
./Sentinel1_IV_maps/IV_20191003_20191027.nc
./Sentinel1_IV_maps/IV_20191015_20191108.nc
./Sentinel1_IV_maps/IV_20191027_20191120.nc
./Sentinel1_IV_maps/IV_20191108_20191202.nc
./Sentinel1_IV_maps/IV_20191120_20191214.nc
./Sentinel1_IV_maps/IV_20191202_20191226.nc
./Sentinel1_IV_maps/IV_20191214_20200107.nc
./Sentinel1_IV_maps/IV_20191226_20200119.nc
./Sentinel1_IV_maps/IV_20200107_20200131.nc
./Sentinel1_IV_maps/IV_20200119_20200212.nc
./Sentinel1_IV_maps/IV_20200131_20200224.nc
./Sentinel1_IV_maps/IV_20200212_20200307.nc
./Sentinel1_IV_maps/IV_20200224_20200319.nc
./Sentinel1_IV_maps/IV_20200307_20200331.nc
./Sentinel1_IV_maps/IV_20200319_20200412.nc
./Sentinel1_IV_maps/IV_20200331_20200424.nc
./Sentinel1_IV_maps/IV_20200412_20200506.nc
./Sentinel1_IV_maps/IV_20200424_20200518.nc
./Sentinel1_IV_maps/IV_20200506_20200530.nc
./Sentinel1_IV_maps/IV_20200518_20200611.nc
./Sentinel1_IV_maps/IV_20200530_20200623.nc
./Sentinel1_IV_maps/IV_20200611_20200705.nc
./Sentinel1_IV_maps/IV_20200623_20200717.nc
./Sentinel1_IV_maps/IV_20200705_20200729.nc
./Sentinel1_IV_maps/IV_20200717_20200810.nc
./Sentinel1_IV_maps/IV_20200729_20200822.nc
./Sentinel1_IV_maps/IV_20200810_20200903.nc
./Sentinel1_IV_maps/IV_20200822_20200915.nc
./Sentinel1_IV_maps/IV_20200903_20200927.nc
#+end_example

***** File Metadata

#+NAME: QC_ncdump_Sentinel1
#+BEGIN_SRC bash :results verbatim :eval no-export
somefile=$(find ${DATADIR}/Sentinel1 -name "*.nc" | LC_ALL=C sort | head -n1)
# md5sum ${somefile}
echo ""
ncdump -chs ${somefile}
#+END_SRC

#+RESULTS: QC_ncdump_Sentinel1
#+begin_example

netcdf IV_20160913_20161006 {
dimensions:
	y = 5400 ;
	x = 3000 ;
	time = 1 ;
	bnds = 2 ;
variables:
	char crs ;
		crs:grid_mapping_name = "polar_stereographic" ;
		crs:standard_parallel = 70. ;
		crs:longitude_of_prime_meridian = 0. ;
		crs:straight_vertical_longitude_from_pole = -45. ;
		crs:semi_major_axis = 6378137. ;
		crs:inverse_flattening = 298.257223563 ;
		crs:latitude_of_projection_origin = 90. ;
		crs:false_easting = 0. ;
		crs:false_northing = 0. ;
	double y(y) ;
		y:units = "m" ;
		y:axis = "Y" ;
		y:long_name = "y coordinate of projection" ;
		y:standard_name = "projection_y_coordinate" ;
		y:_Storage = "contiguous" ;
		y:_Endianness = "little" ;
	double x(x) ;
		x:units = "m" ;
		x:axis = "X" ;
		x:long_name = "x coordinate of projection" ;
		x:standard_name = "projection_x_coordinate" ;
		x:_Storage = "contiguous" ;
		x:_Endianness = "little" ;
	double time(time) ;
		time:standard_name = "time" ;
		time:long_name = "Midpoint time of acquisitons used" ;
		time:bounds = "time_bnds" ;
		time:units = "days since 1990-1-1 0:0:0" ;
		time:_Storage = "contiguous" ;
		time:_Endianness = "little" ;
	double time_bnds(time, bnds) ;
		time_bnds:units = "days since 1990-1-1 0:0:0" ;
		time_bnds:_Storage = "contiguous" ;
		time_bnds:_Endianness = "little" ;
	float land_ice_surface_easting_velocity(time, y, x) ;
		land_ice_surface_easting_velocity:_FillValue = 1.e+20f ;
		land_ice_surface_easting_velocity:units = "m/day" ;
		land_ice_surface_easting_velocity:description = "easting ice velocity" ;
		land_ice_surface_easting_velocity:grid_mapping = "crs" ;
		land_ice_surface_easting_velocity:coordinates = "time y x" ;
		land_ice_surface_easting_velocity:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_easting_velocity:missing_value = 1.e+20f ;
		land_ice_surface_easting_velocity:_Storage = "chunked" ;
		land_ice_surface_easting_velocity:_ChunkSizes = 1, 1627, 904 ;
		land_ice_surface_easting_velocity:_DeflateLevel = 4 ;
		land_ice_surface_easting_velocity:_Shuffle = "true" ;
		land_ice_surface_easting_velocity:_Endianness = "little" ;
	float land_ice_surface_northing_velocity(time, y, x) ;
		land_ice_surface_northing_velocity:_FillValue = 1.e+20f ;
		land_ice_surface_northing_velocity:units = "m/day" ;
		land_ice_surface_northing_velocity:description = "northing ice velocity" ;
		land_ice_surface_northing_velocity:grid_mapping = "crs" ;
		land_ice_surface_northing_velocity:coordinates = "time y x" ;
		land_ice_surface_northing_velocity:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_northing_velocity:missing_value = 1.e+20f ;
		land_ice_surface_northing_velocity:_Storage = "chunked" ;
		land_ice_surface_northing_velocity:_ChunkSizes = 1, 1627, 904 ;
		land_ice_surface_northing_velocity:_DeflateLevel = 4 ;
		land_ice_surface_northing_velocity:_Shuffle = "true" ;
		land_ice_surface_northing_velocity:_Endianness = "little" ;
	float land_ice_surface_vertical_velocity(time, y, x) ;
		land_ice_surface_vertical_velocity:_FillValue = 1.e+20f ;
		land_ice_surface_vertical_velocity:units = "m/day" ;
		land_ice_surface_vertical_velocity:description = "vertical ice velocity" ;
		land_ice_surface_vertical_velocity:grid_mapping = "crs" ;
		land_ice_surface_vertical_velocity:coordinates = "time y x" ;
		land_ice_surface_vertical_velocity:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_vertical_velocity:missing_value = 1.e+20f ;
		land_ice_surface_vertical_velocity:_Storage = "chunked" ;
		land_ice_surface_vertical_velocity:_ChunkSizes = 1, 1627, 904 ;
		land_ice_surface_vertical_velocity:_DeflateLevel = 4 ;
		land_ice_surface_vertical_velocity:_Shuffle = "true" ;
		land_ice_surface_vertical_velocity:_Endianness = "little" ;
	float land_ice_surface_velocity_magnitude(time, y, x) ;
		land_ice_surface_velocity_magnitude:_FillValue = 1.e+20f ;
		land_ice_surface_velocity_magnitude:units = "m/day" ;
		land_ice_surface_velocity_magnitude:description = "magnitude of horizontal ice velocity" ;
		land_ice_surface_velocity_magnitude:grid_mapping = "crs" ;
		land_ice_surface_velocity_magnitude:coordinates = "time y x" ;
		land_ice_surface_velocity_magnitude:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_velocity_magnitude:missing_value = 1.e+20f ;
		land_ice_surface_velocity_magnitude:_Storage = "chunked" ;
		land_ice_surface_velocity_magnitude:_ChunkSizes = 1, 1627, 904 ;
		land_ice_surface_velocity_magnitude:_DeflateLevel = 4 ;
		land_ice_surface_velocity_magnitude:_Shuffle = "true" ;
		land_ice_surface_velocity_magnitude:_Endianness = "little" ;
	float land_ice_surface_easting_velocity_std(time, y, x) ;
		land_ice_surface_easting_velocity_std:_FillValue = 1.e+20f ;
		land_ice_surface_easting_velocity_std:units = "m/day" ;
		land_ice_surface_easting_velocity_std:description = "easting ice velocity error estimate " ;
		land_ice_surface_easting_velocity_std:grid_mapping = "crs" ;
		land_ice_surface_easting_velocity_std:coordinates = "time y x" ;
		land_ice_surface_easting_velocity_std:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_easting_velocity_std:missing_value = 1.e+20f ;
		land_ice_surface_easting_velocity_std:_Storage = "chunked" ;
		land_ice_surface_easting_velocity_std:_ChunkSizes = 1, 1627, 904 ;
		land_ice_surface_easting_velocity_std:_DeflateLevel = 4 ;
		land_ice_surface_easting_velocity_std:_Shuffle = "true" ;
		land_ice_surface_easting_velocity_std:_Endianness = "little" ;
	float land_ice_surface_northing_velocity_std(time, y, x) ;
		land_ice_surface_northing_velocity_std:_FillValue = 1.e+20f ;
		land_ice_surface_northing_velocity_std:units = "m/day" ;
		land_ice_surface_northing_velocity_std:description = "northing ice velocity error estimate" ;
		land_ice_surface_northing_velocity_std:grid_mapping = "crs" ;
		land_ice_surface_northing_velocity_std:coordinates = "time y x" ;
		land_ice_surface_northing_velocity_std:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_northing_velocity_std:missing_value = 1.e+20f ;
		land_ice_surface_northing_velocity_std:_Storage = "chunked" ;
		land_ice_surface_northing_velocity_std:_ChunkSizes = 1, 1627, 904 ;
		land_ice_surface_northing_velocity_std:_DeflateLevel = 4 ;
		land_ice_surface_northing_velocity_std:_Shuffle = "true" ;
		land_ice_surface_northing_velocity_std:_Endianness = "little" ;
	float land_ice_surface_velocity_magnitude_std(time, y, x) ;
		land_ice_surface_velocity_magnitude_std:_FillValue = 1.e+20f ;
		land_ice_surface_velocity_magnitude_std:units = "m/day" ;
		land_ice_surface_velocity_magnitude_std:description = "horizontal ice velocity error magnitude estimate" ;
		land_ice_surface_velocity_magnitude_std:grid_mapping = "crs" ;
		land_ice_surface_velocity_magnitude_std:coordinates = "time y x" ;
		land_ice_surface_velocity_magnitude_std:cell_methods = "time: mean (weighted average (based on error estimates) over contributing acquisitons)" ;
		land_ice_surface_velocity_magnitude_std:missing_value = 1.e+20f ;
		land_ice_surface_velocity_magnitude_std:_Storage = "chunked" ;
		land_ice_surface_velocity_magnitude_std:_ChunkSizes = 1, 1627, 904 ;
		land_ice_surface_velocity_magnitude_std:_DeflateLevel = 4 ;
		land_ice_surface_velocity_magnitude_std:_Shuffle = "true" ;
		land_ice_surface_velocity_magnitude_std:_Endianness = "little" ;

// global attributes:
		:product_version = "undefined" ;
		:date_created = "2017-11-16" ;
		:title = "" ;
		:institution = "" ;
		:summary = "" ;
		:project = "icesheets_CCI" ;
		:tracking_id = "414b98de-cc74-4d00-97b2-e5ca7727b95e" ;
		:time_coverage_start = "2016-09-14" ;
		:time_coverage_end = "2016-10-06" ;
		:sensors_used = "Sentinel-1A" ;
		:methods_used = "Offset-tracking" ;
		:calibration_method = "Control points on ice-free rock" ;
		:velocity_projection_method = "Surface Parallel Flow" ;
		:Conventions = "CF-1.5" ;
		:_SuperblockVersion = 2 ;
		:_IsNetcdf4 = 1 ;
		:_Format = "netCDF-4" ;
}
#+end_example


***** md5sum Hashes

#+NAME: QC_md5sum_Sentinel1
#+BEGIN_SRC bash :results table :eval no-export
cd ${DATADIR}/Sentinel1
# awk 'NR % 5 == 0' input > output # print every 5th line
# head -n2 # top two files
find . -type f -name "*.nc" | LC_ALL=C sort | tail -n16 | parallel --keep-order "md5sum {}"
#+END_SRC

#+RESULTS: QC_md5sum_Sentinel1
| a61b8f8c46c6e934aaa552ba09b9fe87 | ./Sentinel1_IV_maps/IV_20200307_20200331.nc |
| 0b44000ee6da6c7decd60abb9b31bf9c | ./Sentinel1_IV_maps/IV_20200319_20200412.nc |
| 27b8728f31bd25b166afbe79a775a6ad | ./Sentinel1_IV_maps/IV_20200331_20200424.nc |
| 1d7a763133b7ebf4afce16f1c8c69092 | ./Sentinel1_IV_maps/IV_20200412_20200506.nc |
| 573da1efa71ab5d35bee0151abdffd8d | ./Sentinel1_IV_maps/IV_20200424_20200518.nc |
| df4546c9b8d675dd6c1c68e98791b8cb | ./Sentinel1_IV_maps/IV_20200506_20200530.nc |
| 13e87eb8832e8eab244be19ad61f0454 | ./Sentinel1_IV_maps/IV_20200518_20200611.nc |
| 6df9ffd18c29dfe5a029eaca8f1814a1 | ./Sentinel1_IV_maps/IV_20200530_20200623.nc |
| ec14eb05daf7d26ba6c97494c7afd808 | ./Sentinel1_IV_maps/IV_20200611_20200705.nc |
| 52b15c0a9c51c9fa2168e5684c7e2b0b | ./Sentinel1_IV_maps/IV_20200623_20200717.nc |
| 32231de896cc229af06d4fc9f7826580 | ./Sentinel1_IV_maps/IV_20200705_20200729.nc |
| b34c4c3da14963f18343e53f7001f0ea | ./Sentinel1_IV_maps/IV_20200717_20200810.nc |
| eaf6bc2d5c522ab970749ad840f3fce8 | ./Sentinel1_IV_maps/IV_20200729_20200822.nc |
| fbcff81daccc75c799e554264174eb0a | ./Sentinel1_IV_maps/IV_20200810_20200903.nc |
| 061159f37fa07668509f99214c529927 | ./Sentinel1_IV_maps/IV_20200822_20200915.nc |
| 99d4e19b0e4d7004a93896bb2898c618 | ./Sentinel1_IV_maps/IV_20200903_20200927.nc |

** Results
*** GIS
#+BEGIN_SRC bash :results table :eval no-export
FILE=./out/GIS_D.csv.zip
zcat ${FILE}
#+END_SRC

#+RESULTS:
|       Date | Discharge [Gt yr-1] |
| 1986-04-15 |             445.385 |
| 1986-05-15 |             455.132 |
| 1986-06-15 |             459.675 |
| 1986-07-15 |             461.184 |
| 1986-08-15 |             460.905 |
| 1986-09-15 |             465.856 |
| 1986-10-15 |             464.501 |
| 1987-03-15 |              459.33 |
| 1987-04-15 |              459.02 |
| 1987-05-15 |             449.515 |
| 1987-06-15 |             457.927 |
| 1987-07-15 |             451.998 |
| 1987-08-15 |             450.152 |
| 1987-09-15 |             454.896 |
| 1987-10-15 |              452.58 |
| 1988-03-15 |             445.169 |
| 1988-04-15 |             444.917 |
| 1988-05-15 |             443.818 |
| 1988-06-15 |             449.015 |
| 1988-07-15 |             445.029 |
| 1988-08-15 |             442.533 |
| 1988-09-15 |             434.187 |
| 1988-10-15 |             430.954 |
| 1989-03-15 |             433.481 |
| 1989-04-15 |             428.759 |
| 1989-05-15 |             444.866 |
| 1989-06-15 |             451.494 |
| 1989-07-15 |             446.966 |
| 1989-08-15 |             444.385 |
| 1989-09-15 |             446.886 |
| 1989-10-15 |             443.794 |
| 1990-03-15 |             447.193 |
| 1990-04-15 |             439.601 |
| 1990-05-15 |              446.92 |
| 1990-06-15 |             450.772 |
| 1990-07-15 |             449.419 |
| 1990-08-15 |             441.274 |
| 1990-09-15 |             434.693 |
| 1990-10-15 |             439.289 |
| 1991-01-01 |              427.68 |
| 1991-06-15 |             427.567 |
| 1992-01-01 |              428.43 |
| 1992-06-15 |             438.554 |
| 1992-07-15 |             440.417 |
| 1992-08-15 |             434.718 |
| 1992-09-15 |             434.044 |
| 1992-10-15 |             432.932 |
| 1993-01-01 |             429.946 |
| 1993-03-15 |             436.225 |
| 1993-04-15 |             438.411 |
| 1993-05-15 |             438.725 |
| 1993-06-15 |             438.004 |
| 1993-07-15 |             439.022 |
| 1993-08-15 |               439.2 |
| 1993-09-15 |             439.364 |
| 1994-01-01 |              440.88 |
| 1994-05-15 |             451.936 |
| 1994-06-15 |             459.948 |
| 1994-07-15 |             475.165 |
| 1994-08-15 |             461.788 |
| 1994-09-15 |             442.429 |
| 1995-01-01 |             437.762 |
| 1995-04-15 |             435.351 |
| 1995-05-15 |             434.253 |
| 1995-06-15 |             433.078 |
| 1995-07-15 |             431.383 |
| 1995-08-15 |             428.971 |
| 1995-09-15 |             426.793 |
| 1995-10-15 |             424.683 |
| 1996-01-01 |              419.38 |
| 1996-04-15 |             426.789 |
| 1996-05-15 |             428.223 |
| 1996-06-15 |             429.516 |
| 1996-07-15 |             429.247 |
| 1996-08-15 |             430.216 |
| 1996-09-15 |             431.723 |
| 1996-10-15 |             432.699 |
| 1997-01-01 |             435.543 |
| 1997-03-15 |             435.832 |
| 1997-04-15 |             435.935 |
| 1997-05-15 |             435.934 |
| 1997-06-15 |             436.178 |
| 1997-07-15 |             435.705 |
| 1997-09-15 |              434.88 |
| 1997-10-15 |             434.219 |
| 1998-01-01 |             430.373 |
| 1998-03-15 |             436.642 |
| 1998-04-15 |             439.129 |
| 1998-05-15 |             445.174 |
| 1998-06-15 |             452.872 |
| 1998-07-15 |              454.43 |
| 1998-08-15 |             442.206 |
| 1998-09-15 |             429.649 |
| 1998-10-15 |             438.522 |
| 1999-01-01 |             435.898 |
| 1999-07-15 |             441.637 |
| 1999-08-15 |             437.052 |
| 1999-09-15 |             441.834 |
| 1999-10-15 |             441.201 |
| 1999-11-15 |             442.781 |
| 1999-12-15 |              444.25 |
| 2000-01-01 |             445.135 |
| 2000-02-15 |             444.443 |
| 2000-03-15 |             440.927 |
| 2000-04-15 |             444.973 |
| 2000-05-15 |              444.02 |
| 2000-06-15 |             454.298 |
| 2000-07-15 |             451.254 |
| 2000-08-15 |             442.337 |
| 2000-09-03 |             428.464 |
| 2000-09-15 |             431.847 |
| 2000-10-15 |             431.883 |
| 2000-11-15 |             433.895 |
| 2001-03-15 |              441.62 |
| 2001-04-15 |              443.21 |
| 2001-05-15 |             438.789 |
| 2001-06-15 |             458.521 |
| 2001-07-15 |              455.71 |
| 2001-08-15 |              445.07 |
| 2001-09-15 |             447.239 |
| 2001-10-15 |             443.487 |
| 2001-11-15 |             446.784 |
| 2002-01-15 |               449.5 |
| 2002-02-15 |             451.433 |
| 2002-03-15 |             453.358 |
| 2002-04-15 |             455.231 |
| 2002-05-15 |             463.027 |
| 2002-06-15 |              475.45 |
| 2002-07-15 |             471.261 |
| 2002-08-15 |             465.422 |
| 2002-09-15 |             460.758 |
| 2002-10-15 |             465.058 |
| 2003-02-15 |             470.949 |
| 2003-03-15 |             472.343 |
| 2003-04-15 |             476.224 |
| 2003-05-15 |             472.135 |
| 2003-06-15 |             481.388 |
| 2003-07-15 |             477.329 |
| 2003-08-15 |             474.176 |
| 2003-09-15 |             475.744 |
| 2003-10-15 |             477.433 |
| 2004-03-15 |             485.147 |
| 2004-04-15 |             482.048 |
| 2004-05-15 |             485.129 |
| 2004-06-15 |             502.912 |
| 2004-07-15 |             494.312 |
| 2004-08-15 |              483.23 |
| 2004-09-15 |             486.267 |
| 2004-10-15 |             487.774 |
| 2005-03-15 |             499.778 |
| 2005-04-15 |             500.798 |
| 2005-05-15 |             504.567 |
| 2005-06-15 |             517.911 |
| 2005-07-15 |             511.956 |
| 2005-08-15 |             497.126 |
| 2005-09-15 |             489.008 |
| 2005-10-15 |             488.566 |
| 2005-12-13 |             489.681 |
| 2006-03-15 |             492.973 |
| 2006-04-15 |             493.278 |
| 2006-05-15 |             495.444 |
| 2006-06-15 |             498.456 |
| 2006-07-15 |             508.086 |
| 2006-08-15 |             496.423 |
| 2006-09-15 |             477.547 |
| 2006-10-15 |             481.593 |
| 2006-11-15 |             478.546 |
| 2006-12-18 |              476.71 |
| 2007-03-15 |             482.458 |
| 2007-04-15 |             478.765 |
| 2007-05-15 |             482.861 |
| 2007-06-15 |             508.137 |
| 2007-07-15 |             497.772 |
| 2007-08-15 |             474.746 |
| 2007-09-07 |             476.249 |
| 2007-09-15 |             470.089 |
| 2007-10-15 |             471.614 |
| 2008-03-15 |             476.807 |
| 2008-04-15 |             476.493 |
| 2008-05-15 |              482.47 |
| 2008-06-15 |             501.485 |
| 2008-07-15 |             493.493 |
| 2008-08-15 |             485.803 |
| 2008-10-15 |              486.07 |
| 2008-11-15 |             486.471 |
| 2009-01-15 |             487.245 |
| 2009-02-15 |             487.617 |
| 2009-03-15 |             487.951 |
| 2009-04-15 |             485.476 |
| 2009-05-15 |             491.298 |
| 2009-06-15 |             509.405 |
| 2009-07-15 |             516.592 |
| 2009-08-15 |             483.972 |
| 2009-09-02 |             480.952 |
| 2009-09-15 |             481.954 |
| 2009-10-15 |             484.154 |
| 2010-03-15 |             494.894 |
| 2010-04-15 |             493.349 |
| 2010-05-15 |             489.316 |
| 2010-06-15 |             511.755 |
| 2010-07-15 |              498.44 |
| 2010-08-15 |             491.579 |
| 2010-09-15 |             486.183 |
| 2010-10-15 |             486.488 |
| 2011-03-15 |             490.339 |
| 2011-04-15 |             495.451 |
| 2011-05-15 |             497.451 |
| 2011-06-15 |              506.99 |
| 2011-07-15 |             508.968 |
| 2011-08-15 |             493.765 |
| 2011-09-15 |             491.621 |
| 2011-10-15 |             491.799 |
| 2012-01-15 |             491.387 |
| 2012-03-15 |             491.359 |
| 2012-04-15 |             490.523 |
| 2012-05-15 |              493.75 |
| 2012-06-15 |             513.424 |
| 2012-07-15 |             498.844 |
| 2012-08-15 |             483.075 |
| 2012-09-15 |             482.078 |
| 2012-10-15 |             488.201 |
| 2012-11-10 |             491.418 |
| 2013-02-15 |             492.458 |
| 2013-03-15 |             492.718 |
| 2013-04-15 |             487.314 |
| 2013-05-15 |             485.353 |
| 2013-06-15 |             501.546 |
| 2013-07-15 |             501.092 |
| 2013-08-15 |             499.014 |
| 2013-09-15 |             499.301 |
| 2013-10-15 |             499.621 |
| 2013-11-15 |             500.344 |
| 2013-12-15 |             499.704 |
| 2014-01-15 |              500.33 |
| 2014-02-15 |             498.514 |
| 2014-03-15 |             499.023 |
| 2014-04-15 |             495.271 |
| 2014-05-15 |             496.162 |
| 2014-06-15 |             516.014 |
| 2014-07-15 |             513.664 |
| 2014-08-15 |             491.931 |
| 2014-09-01 |             494.872 |
| 2014-09-15 |             478.697 |
| 2014-10-15 |             493.933 |
| 2014-11-15 |             498.964 |
| 2014-12-15 |             499.387 |
| 2014-12-16 |             499.931 |
| 2015-01-15 |               498.8 |
| 2015-01-16 |             498.165 |
| 2015-02-14 |              499.54 |
| 2015-02-15 |             497.172 |
| 2015-03-15 |             499.741 |
| 2015-03-16 |             502.027 |
| 2015-05-15 |             496.312 |
| 2015-05-16 |             501.431 |
| 2015-07-15 |             519.655 |
| 2015-07-16 |             513.475 |
| 2015-08-15 |             499.748 |
| 2015-08-16 |             497.163 |
| 2015-09-01 |             500.482 |
| 2015-10-15 |             499.919 |
| 2015-10-16 |             497.102 |
| 2015-12-15 |             499.105 |
| 2015-12-16 |             498.483 |
| 2016-01-15 |             493.668 |
| 2016-01-16 |             492.846 |
| 2016-03-15 |             491.502 |
| 2016-03-16 |             493.627 |
| 2016-05-15 |             496.323 |
| 2016-05-16 |             500.948 |
| 2016-07-15 |             507.204 |
| 2016-07-16 |             501.092 |
| 2016-08-15 |               496.4 |
| 2016-08-16 |             491.229 |
| 2016-09-01 |             500.789 |
| 2016-09-25 |             489.765 |
| 2016-10-06 |              496.93 |
| 2016-10-15 |             499.159 |
| 2016-10-16 |             488.926 |
| 2016-10-18 |             499.456 |
| 2016-10-25 |             496.794 |
| 2016-10-30 |             493.906 |
| 2016-11-11 |             497.271 |
| 2016-11-16 |             497.596 |
| 2016-11-30 |              498.09 |
| 2016-12-05 |             498.266 |
| 2016-12-12 |             498.513 |
| 2016-12-15 |              495.74 |
| 2016-12-16 |             494.479 |
| 2016-12-17 |             497.129 |
| 2016-12-24 |             499.072 |
| 2016-12-29 |             500.444 |
| 2017-01-04 |             501.599 |
| 2017-01-10 |             501.304 |
| 2017-01-15 |             500.769 |
| 2017-01-22 |             499.197 |
| 2017-01-29 |              499.54 |
| 2017-02-03 |             500.582 |
| 2017-02-09 |             502.344 |
| 2017-02-14 |             499.628 |
| 2017-02-22 |             500.842 |
| 2017-02-27 |             500.021 |
| 2017-03-06 |               499.6 |
| 2017-03-11 |             500.406 |
| 2017-03-15 |             502.032 |
| 2017-03-16 |             498.265 |
| 2017-03-18 |             500.543 |
| 2017-03-23 |             502.553 |
| 2017-03-30 |             503.354 |
| 2017-04-04 |             502.743 |
| 2017-04-11 |             502.289 |
| 2017-04-16 |              505.99 |
| 2017-04-23 |             510.324 |
| 2017-04-28 |               517.6 |
| 2017-05-05 |             518.503 |
| 2017-05-10 |             515.637 |
| 2017-05-15 |             504.803 |
| 2017-05-16 |             506.368 |
| 2017-05-17 |             504.967 |
| 2017-05-22 |             504.305 |
| 2017-05-28 |             502.375 |
| 2017-06-03 |             502.802 |
| 2017-06-09 |             503.802 |
| 2017-06-16 |              507.54 |
| 2017-06-21 |             510.797 |
| 2017-06-28 |             513.063 |
| 2017-07-03 |             513.573 |
| 2017-07-09 |             516.542 |
| 2017-07-16 |             519.914 |
| 2017-07-21 |             518.194 |
| 2017-07-27 |             516.095 |
| 2017-08-02 |             511.969 |
| 2017-08-08 |             505.939 |
| 2017-08-12 |             505.533 |
| 2017-08-15 |             513.557 |
| 2017-08-16 |             511.961 |
| 2017-08-20 |             501.632 |
| 2017-08-26 |              502.86 |
| 2017-09-13 |             499.867 |
| 2017-09-19 |             504.725 |
| 2017-09-24 |             505.548 |
| 2017-10-01 |             503.599 |
| 2017-10-07 |             502.319 |
| 2017-10-13 |             506.511 |
| 2017-10-15 |             508.655 |
| 2017-10-16 |             503.455 |
| 2017-10-19 |             507.129 |
| 2017-10-25 |             510.145 |
| 2017-10-31 |             508.001 |
| 2017-11-06 |             505.332 |
| 2017-11-12 |             500.654 |
| 2017-11-18 |             496.071 |
| 2017-11-30 |             500.185 |
| 2017-12-12 |             499.592 |
| 2017-12-15 |             504.431 |
| 2017-12-16 |             506.047 |
| 2017-12-24 |             494.598 |
| 2018-01-05 |             498.318 |
| 2018-01-15 |             505.761 |
| 2018-01-16 |               505.3 |
| 2018-01-17 |             499.497 |
| 2018-01-29 |             496.625 |
| 2018-02-10 |             495.032 |
| 2018-02-14 |             504.076 |
| 2018-02-15 |             506.169 |
| 2018-02-22 |              493.41 |
| 2018-03-06 |              494.76 |
| 2018-03-15 |             507.149 |
| 2018-03-16 |             502.066 |
| 2018-03-18 |             492.851 |
| 2018-03-30 |             491.521 |
| 2018-04-11 |             493.217 |
| 2018-04-23 |             496.969 |
| 2018-05-05 |             496.421 |
| 2018-05-15 |             505.542 |
| 2018-05-16 |             507.245 |
| 2018-05-17 |              501.48 |
| 2018-05-29 |             494.683 |
| 2018-06-10 |             496.469 |
| 2018-06-22 |             497.084 |
| 2018-07-04 |             498.009 |
| 2018-07-15 |             511.817 |
| 2018-07-28 |             491.938 |
| 2018-08-09 |             490.735 |
| 2018-08-15 |             508.263 |
| 2018-08-16 |             505.835 |
| 2018-08-21 |             484.886 |
| 2018-09-02 |             484.295 |
| 2018-09-14 |             490.135 |
| 2018-09-26 |             489.284 |
| 2018-10-08 |             491.453 |
| 2018-10-15 |             507.265 |
| 2018-10-16 |             502.933 |
| 2018-10-20 |             497.802 |
| 2018-11-01 |             499.237 |
| 2018-11-13 |             498.806 |
| 2018-11-25 |             496.466 |
| 2018-12-07 |             493.459 |
| 2018-12-15 |             496.445 |
| 2018-12-19 |             497.295 |
| 2018-12-31 |             497.379 |
| 2019-01-12 |             498.077 |
| 2019-01-24 |             498.737 |
| 2019-02-05 |             498.205 |
| 2019-02-17 |              497.73 |
| 2019-03-01 |             497.451 |
| 2019-03-13 |             496.161 |
| 2019-03-25 |             493.651 |
| 2019-04-05 |             495.039 |
| 2019-04-18 |              499.36 |
| 2019-04-30 |             504.239 |
| 2019-05-12 |             501.086 |
| 2019-05-24 |             503.394 |
| 2019-06-05 |             505.294 |
| 2019-06-17 |             509.771 |
| 2019-06-29 |             508.554 |
| 2019-07-11 |             509.485 |
| 2019-07-23 |             501.627 |
| 2019-08-04 |             495.247 |
| 2019-08-16 |             486.296 |
| 2019-08-28 |             489.282 |
| 2019-09-09 |             488.244 |
| 2019-09-21 |             493.095 |
| 2019-10-03 |             496.129 |
| 2019-10-15 |             493.436 |
| 2019-10-27 |              498.61 |
| 2019-11-08 |              499.08 |
| 2019-11-20 |             501.179 |
| 2019-12-02 |             503.593 |
| 2019-12-14 |             501.897 |
| 2019-12-26 |             501.152 |
| 2020-01-07 |             505.266 |
| 2020-01-19 |             503.769 |
| 2020-01-31 |             507.042 |
| 2020-02-12 |             507.472 |
| 2020-02-24 |             504.852 |
| 2020-03-07 |              500.84 |
| 2020-03-19 |             503.597 |
| 2020-03-31 |             504.135 |
| 2020-04-12 |             507.825 |
| 2020-04-24 |             510.193 |
| 2020-05-06 |             508.154 |
| 2020-05-18 |             506.926 |
| 2020-05-30 |             506.051 |
| 2020-06-11 |             507.794 |
| 2020-06-23 |             510.843 |
| 2020-07-05 |             516.593 |
| 2020-07-17 |             512.246 |
| 2020-07-29 |             507.657 |
| 2020-08-10 |              503.39 |
| 2020-08-22 |             506.249 |
| 2020-09-03 |             492.729 |
| 2020-09-15 |             494.914 |

*** Regions
#+BEGIN_SRC bash :results table :eval no-export
FILE=./out/region_D.csv.zip
zcat ${FILE}
#+END_SRC

#+RESULTS:
|       Date |     CE |     CW |     NE |     NO |      NW |      SE |     SW |
| 1986-04-15 | 65.397 | 68.237 | 22.513 | 21.303 |  93.327 | 152.421 | 22.186 |
| 1986-05-15 | 65.774 | 75.349 | 22.632 | 21.042 |  94.291 | 153.859 | 22.185 |
| 1986-06-15 | 69.241 | 75.334 |  22.91 | 22.516 |  96.326 | 151.163 | 22.185 |
| 1986-07-15 | 68.873 | 75.399 | 20.633 | 23.515 |  98.461 | 152.119 | 22.185 |
| 1986-08-15 | 67.918 |  73.93 | 22.754 | 22.447 |  98.135 | 153.537 | 22.184 |
| 1986-09-15 | 70.161 | 73.529 | 23.813 | 22.637 |  98.777 | 154.756 | 22.184 |
| 1986-10-15 | 69.534 | 73.141 | 23.217 |  22.82 |  97.561 | 156.044 | 22.184 |
| 1987-03-15 | 69.095 | 71.173 | 20.216 | 23.745 |  91.439 |  161.48 | 22.182 |
| 1987-04-15 | 69.004 | 70.766 | 20.356 | 23.935 |  90.182 | 162.594 | 22.182 |
| 1987-05-15 | 67.396 | 67.825 |  22.02 | 20.845 |  90.603 | 158.644 | 22.182 |
| 1987-06-15 | 69.274 | 70.307 | 21.879 | 23.427 |  96.643 | 154.216 | 22.181 |
| 1987-07-15 | 67.575 | 74.882 | 22.782 | 21.444 |   96.49 | 146.646 | 22.181 |
| 1987-08-15 | 64.039 |  73.21 |  23.53 | 23.515 |  92.556 |  151.63 | 21.672 |
| 1987-09-15 | 67.637 | 72.703 |  23.68 |  22.15 |  92.615 | 154.277 | 21.833 |
| 1987-10-15 |  66.45 | 71.678 |  23.78 | 22.193 |  92.689 | 153.946 | 21.844 |
| 1988-03-15 | 68.395 |  66.46 |  24.29 | 22.411 |  93.064 | 148.652 | 21.897 |
| 1988-04-15 | 68.791 | 66.153 | 24.394 | 22.456 |  93.644 |  147.57 | 21.908 |
| 1988-05-15 |  70.05 | 70.772 | 23.067 |  22.05 |   91.46 | 144.499 | 21.918 |
| 1988-06-15 | 69.711 | 70.361 | 22.681 |  23.02 |  96.156 | 145.156 | 21.929 |
| 1988-07-15 | 68.957 | 70.013 | 21.288 | 24.019 |  98.186 | 140.627 |  21.94 |
| 1988-08-15 | 65.862 | 69.006 | 19.438 | 22.827 |  95.625 | 147.823 |  21.95 |
| 1988-09-15 | 65.078 | 68.096 | 19.549 |   22.8 |  95.263 | 141.441 | 21.961 |
| 1988-10-15 | 64.955 | 67.893 | 19.964 | 22.773 |  96.072 | 137.326 | 21.971 |
| 1989-03-15 | 66.065 | 66.864 | 22.053 | 22.638 | 100.143 | 133.696 | 22.024 |
| 1989-04-15 | 65.609 | 65.032 | 20.629 |  22.61 |  99.896 | 132.949 | 22.034 |
| 1989-05-15 | 64.867 | 66.178 |  22.42 | 21.984 | 102.033 | 145.339 | 22.045 |
| 1989-06-15 | 69.945 | 69.034 | 22.264 | 23.488 | 102.376 | 142.332 | 22.055 |
| 1989-07-15 |  70.48 | 68.502 | 22.164 | 23.426 | 104.027 | 136.303 | 22.065 |
| 1989-08-15 | 69.827 | 72.074 | 22.065 | 23.361 |  99.417 | 135.564 | 22.076 |
| 1989-09-15 | 70.803 | 72.427 | 22.715 | 22.586 | 101.316 | 134.954 | 22.087 |
| 1989-10-15 | 67.587 | 72.066 | 22.533 |  22.56 | 101.568 | 135.383 | 22.097 |
| 1990-03-15 | 70.415 | 70.231 | 21.619 | 22.431 | 102.828 | 137.523 | 22.148 |
| 1990-04-15 | 67.022 | 68.032 | 20.358 | 22.404 |  102.71 | 136.915 | 22.159 |
| 1990-05-15 | 70.265 | 64.029 | 23.503 | 22.051 | 103.275 | 141.629 | 22.169 |
| 1990-06-15 | 73.904 | 70.957 | 22.428 | 23.273 | 103.954 | 134.077 | 22.179 |
| 1990-07-15 |  74.74 | 70.392 | 22.595 | 23.255 | 101.745 | 134.503 | 22.189 |
| 1990-08-15 | 72.139 | 67.028 |  22.06 | 21.591 | 101.152 | 135.105 |   22.2 |
| 1990-09-15 | 66.717 | 65.608 | 21.973 | 21.588 | 100.943 | 135.654 |  22.21 |
| 1990-10-15 |  71.45 |   65.4 | 21.971 | 21.585 |  99.167 | 137.496 |  22.22 |
| 1991-01-01 | 66.221 | 64.854 |  21.91 | 21.579 |  94.554 | 136.315 | 22.247 |
| 1991-06-15 | 68.967 | 63.689 | 21.781 | 21.565 |  91.262 | 138.001 | 22.302 |
| 1992-01-01 | 72.294 | 62.253 | 21.626 | 21.548 |  88.339 | 140.002 | 22.368 |
| 1992-06-15 | 71.883 | 62.916 | 21.739 | 22.207 |  88.755 | 146.676 | 24.379 |
| 1992-07-15 | 71.808 | 63.037 | 21.759 | 22.326 |   88.83 | 147.878 | 24.779 |
| 1992-08-15 |  71.73 | 63.162 |  21.78 | 22.449 |  88.907 |  145.22 | 21.469 |
| 1992-09-15 | 71.652 | 63.288 | 21.802 | 22.572 |  88.984 | 143.964 | 21.782 |
| 1992-10-15 | 71.577 | 63.409 | 21.822 | 22.691 |  89.059 | 142.524 |  21.85 |
| 1993-01-01 |  71.38 | 63.727 | 21.875 |   23.0 |  89.253 |  138.78 | 21.932 |
| 1993-03-15 | 71.142 | 64.126 | 21.996 | 22.876 |  89.932 |  143.19 | 22.963 |
| 1993-04-15 | 71.041 | 64.296 | 22.048 | 22.824 |   90.22 | 145.058 | 22.924 |
| 1993-05-15 | 70.944 | 64.461 | 22.098 | 22.773 |  90.499 | 145.366 | 22.585 |
| 1993-06-15 | 70.843 | 64.631 | 22.149 | 22.721 |  90.788 | 145.682 |  21.19 |
| 1993-07-15 | 70.746 | 64.796 | 22.199 |  22.67 |  91.067 | 145.987 | 21.556 |
| 1993-08-15 | 70.645 | 64.967 | 22.251 | 22.618 |  91.356 | 146.301 | 21.062 |
| 1993-09-15 | 70.545 | 65.138 | 22.302 | 22.566 |  91.645 | 146.614 | 20.555 |
| 1994-01-01 | 70.196 | 65.736 | 22.482 | 22.384 |  92.651 | 147.694 | 19.736 |
| 1994-05-15 | 69.497 | 69.562 | 23.866 | 22.257 |  96.882 | 149.978 | 19.893 |
| 1994-06-15 | 71.183 | 71.154 | 24.641 | 23.111 |  98.553 | 151.378 |  19.93 |
| 1994-07-15 | 70.324 | 83.794 | 23.697 | 23.689 |  99.607 | 154.192 | 19.862 |
| 1994-08-15 | 66.643 | 76.917 | 23.191 | 22.076 |   96.07 | 157.098 | 19.792 |
| 1994-09-15 | 64.495 | 60.528 | 22.949 | 22.227 |  94.927 | 158.299 | 19.004 |
| 1995-01-01 | 67.623 | 61.372 | 22.309 | 22.754 |  91.891 | 152.272 |  19.54 |
| 1995-04-15 | 67.455 | 62.392 |  22.13 | 22.474 |  91.113 | 148.756 | 21.031 |
| 1995-05-15 | 67.407 | 62.688 | 22.078 | 22.393 |  90.889 |  147.75 | 21.048 |
| 1995-06-15 | 67.357 | 62.994 | 22.025 | 22.309 |  90.658 | 146.714 | 21.021 |
| 1995-07-15 |  67.31 | 63.291 | 21.973 | 22.228 |  90.434 | 145.715 | 20.432 |
| 1995-08-15 | 67.261 | 63.599 | 21.919 | 22.145 |  90.202 | 143.688 | 20.157 |
| 1995-09-15 | 67.212 | 63.907 | 21.866 | 22.061 |  89.971 | 141.665 |  20.11 |
| 1995-10-15 | 67.166 | 64.206 | 21.814 |  21.98 |  89.747 | 139.712 | 20.058 |
| 1996-01-01 | 67.046 | 64.987 | 21.679 |  21.77 |  89.165 |  134.65 | 20.082 |
| 1996-04-15 | 68.122 | 64.815 | 21.843 | 21.785 |  89.187 | 138.714 | 22.322 |
| 1996-05-15 | 68.429 | 64.767 |  21.89 |  21.79 |  89.193 | 139.875 |  22.28 |
| 1996-06-15 | 68.747 | 64.717 | 21.938 | 21.794 |  89.199 | 141.074 | 22.047 |
| 1996-07-15 | 69.055 | 64.669 | 21.984 | 21.799 |  89.205 |  141.75 | 20.785 |
| 1996-08-15 | 69.373 | 64.619 | 22.033 | 21.803 |  89.212 |  142.52 | 20.657 |
| 1996-09-15 | 69.691 |  64.57 | 22.081 | 21.808 |  89.218 | 143.291 | 21.065 |
| 1996-10-15 | 69.999 | 64.523 | 22.127 | 21.812 |  89.224 | 144.036 | 20.977 |
| 1997-01-01 |   70.8 | 64.401 | 22.248 | 21.824 |   89.24 | 145.975 | 21.054 |
| 1997-03-15 |  71.15 | 65.229 | 22.237 | 21.863 |   89.48 | 144.394 | 21.479 |
| 1997-04-15 |   71.3 |  65.58 | 22.233 |  21.88 |  89.582 | 143.722 | 21.639 |
| 1997-05-15 | 71.445 | 65.921 | 22.228 | 21.896 |   89.68 | 143.072 | 21.693 |
| 1997-06-15 | 71.595 | 66.273 | 22.223 | 21.912 |  89.782 |   142.4 | 21.992 |
| 1997-07-15 | 71.742 | 66.613 | 22.219 | 21.928 |  89.881 |  141.75 | 21.572 |
| 1997-09-15 | 72.045 | 67.317 |  22.21 | 21.962 |  90.085 | 140.406 | 20.857 |
| 1997-10-15 | 71.929 | 67.658 | 22.205 | 21.978 |  90.183 | 139.755 |  20.51 |
| 1998-01-01 | 71.542 | 68.545 | 22.193 |  22.02 |   90.44 | 135.171 | 20.462 |
| 1998-03-15 | 71.949 | 72.543 | 19.881 | 21.476 |  92.099 |  137.22 | 21.474 |
| 1998-04-15 |  71.53 | 74.304 |  18.88 | 21.245 |  93.217 |  138.02 | 21.935 |
| 1998-05-15 | 73.187 |  72.88 | 21.353 | 21.804 |  92.887 | 140.417 | 22.647 |
| 1998-06-15 | 73.244 | 75.269 | 23.569 | 23.317 |  96.527 | 139.938 | 21.008 |
| 1998-07-15 | 72.689 | 76.345 | 23.526 | 23.691 |  97.128 | 141.278 | 19.773 |
| 1998-08-15 | 70.043 | 76.681 | 23.465 | 19.351 |  91.569 | 142.967 | 18.131 |
| 1998-09-15 | 68.321 | 76.729 | 21.457 | 19.788 |  89.816 | 135.276 | 18.261 |
| 1998-10-15 |  69.45 | 76.162 | 21.698 | 20.212 |  89.336 | 143.278 | 18.387 |
| 1999-01-01 | 69.864 | 74.686 | 22.324 | 21.312 |  88.089 | 140.908 | 18.713 |
| 1999-07-15 | 69.687 | 76.745 | 22.412 | 24.083 |   89.26 |  139.11 |  20.34 |
| 1999-08-15 | 67.341 | 76.262 | 21.694 |   24.0 |  89.029 | 138.843 | 19.882 |
| 1999-09-15 | 67.348 | 76.407 | 21.037 | 23.918 |  89.565 | 144.335 | 19.224 |
| 1999-10-15 |  68.51 | 75.378 |  21.36 | 23.838 |  90.704 | 141.698 | 19.713 |
| 1999-11-15 | 68.585 | 76.251 | 21.578 | 23.755 |  91.279 | 141.487 | 19.845 |
| 1999-12-15 | 68.656 | 77.097 | 21.789 | 23.675 |  91.834 |   141.1 | 20.099 |
| 2000-01-01 | 68.697 | 77.576 | 21.909 |  23.63 |  92.148 | 140.933 | 20.242 |
| 2000-02-15 | 69.084 | 77.417 | 22.411 | 23.506 |  91.801 | 139.227 | 20.997 |
| 2000-03-15 | 67.922 | 75.716 | 22.734 | 23.426 |  91.577 | 138.139 | 21.413 |
| 2000-04-15 | 68.995 | 77.542 | 23.178 | 23.341 |  88.318 | 141.724 | 21.876 |
| 2000-05-15 | 68.992 | 79.387 | 23.515 | 23.258 |  89.646 | 136.751 | 22.471 |
| 2000-06-15 | 68.756 |  81.08 | 24.035 | 23.173 |  92.998 | 142.273 | 21.982 |
| 2000-07-15 | 69.228 | 83.645 | 21.075 | 22.526 |  97.044 | 135.705 |  22.03 |
| 2000-08-15 | 69.454 | 82.507 | 22.702 | 21.857 |  91.957 | 134.006 | 19.854 |
| 2000-09-03 | 66.421 | 80.046 | 22.604 | 21.448 |  88.378 |   130.0 | 19.566 |
| 2000-09-15 | 65.627 | 80.662 | 22.581 | 21.478 |  87.951 | 134.047 | 19.501 |
| 2000-10-15 | 65.974 | 80.728 | 22.762 | 21.552 |  88.225 | 132.718 | 19.924 |
| 2000-11-15 | 66.737 | 80.968 | 22.955 | 21.629 |  88.799 | 132.811 | 19.995 |
| 2001-03-15 | 69.671 | 81.873 | 23.703 | 21.924 |  91.061 | 133.115 | 20.273 |
| 2001-04-15 | 69.733 | 80.299 |  23.85 | 21.999 |  92.264 | 134.691 | 20.374 |
| 2001-05-15 | 68.895 | 77.653 | 24.022 | 22.072 |  89.902 | 135.425 | 20.821 |
| 2001-06-15 | 71.442 | 83.998 | 24.409 | 23.102 |  92.182 | 142.559 | 20.829 |
| 2001-07-15 | 71.354 | 83.912 | 24.788 | 24.099 |  95.816 | 135.272 | 20.469 |
| 2001-08-15 | 66.694 | 81.333 | 25.157 | 24.023 |  92.135 | 135.451 | 20.277 |
| 2001-09-15 | 68.515 | 82.984 | 25.458 | 23.947 |  88.619 | 137.677 |  20.04 |
| 2001-10-15 | 67.509 | 80.557 | 25.865 | 23.873 |  88.482 | 137.584 | 19.617 |
| 2001-11-15 | 68.221 | 79.999 | 26.309 | 23.797 |  88.817 | 139.992 | 19.649 |
| 2002-01-15 | 69.601 | 78.888 | 27.182 | 23.647 |  89.478 |  140.99 | 19.715 |
| 2002-02-15 | 70.269 | 78.296 | 27.624 | 23.572 |  89.816 | 142.001 | 19.855 |
| 2002-03-15 | 70.871 | 77.763 | 28.023 | 23.505 |  90.121 | 142.914 | 20.162 |
| 2002-04-15 | 69.173 | 81.985 | 28.498 |  23.43 |  89.629 | 142.208 | 20.309 |
| 2002-05-15 | 69.263 | 84.297 |   28.9 | 23.357 |  91.844 | 144.586 | 20.781 |
| 2002-06-15 | 71.005 | 86.634 | 29.436 | 23.282 |  97.267 | 146.714 |  21.11 |
| 2002-07-15 | 67.776 | 84.198 | 29.151 | 24.577 |  96.549 | 148.866 | 20.144 |
| 2002-08-15 | 67.834 | 80.554 |  28.63 | 24.373 |  91.197 | 153.157 | 19.676 |
| 2002-09-15 | 66.321 | 81.502 | 28.303 | 24.169 |   91.56 | 149.155 | 19.748 |
| 2002-10-15 | 67.281 | 81.869 |  27.91 | 23.972 |  91.748 | 152.495 | 19.783 |
| 2003-02-15 | 71.201 | 83.372 | 26.296 | 23.164 |   92.52 | 154.105 | 20.292 |
| 2003-03-15 | 72.093 | 83.714 | 25.928 |  22.98 |  92.696 | 154.349 | 20.584 |
| 2003-04-15 | 74.004 | 84.741 |  25.52 | 22.777 |  93.588 | 154.994 |   20.6 |
| 2003-05-15 | 69.544 | 85.891 | 25.234 |  22.58 |  92.197 | 155.872 | 20.817 |
| 2003-06-15 | 71.195 |  86.62 | 24.828 |  23.07 |  96.807 | 158.052 | 20.817 |
| 2003-07-15 | 69.037 | 86.383 | 24.448 | 23.545 |  95.454 | 157.379 | 21.083 |
| 2003-08-15 | 70.838 | 86.193 | 24.494 | 23.599 |  93.427 | 155.189 | 20.435 |
| 2003-09-15 | 69.251 | 86.228 | 24.533 | 23.652 |  92.678 | 158.887 | 20.514 |
| 2003-10-15 |  70.07 | 85.978 | 24.586 | 23.704 |  92.783 | 159.729 | 20.581 |
| 2004-03-15 | 74.258 | 84.688 | 24.854 | 23.965 |  93.317 | 163.132 | 20.934 |
| 2004-04-15 | 74.989 | 81.696 | 24.908 | 24.017 |  93.492 | 162.499 | 20.447 |
| 2004-05-15 | 73.066 | 85.345 | 24.943 | 24.068 |   95.35 | 161.419 | 20.938 |
| 2004-06-15 | 75.295 | 86.875 | 25.188 | 24.121 | 101.465 | 169.078 | 20.891 |
| 2004-07-15 | 75.241 | 85.795 | 22.675 | 24.481 | 102.801 | 163.021 | 20.298 |
| 2004-08-15 | 72.497 | 84.702 | 22.883 | 24.393 |  97.897 | 161.107 | 19.751 |
| 2004-09-15 | 69.339 | 84.862 | 23.073 | 24.306 |   96.89 | 167.167 | 20.631 |
| 2004-10-15 | 71.675 | 84.764 | 23.295 | 24.221 |  96.945 | 166.098 | 20.777 |
| 2005-03-15 |  83.39 |  84.31 | 24.411 | 23.796 |  97.199 | 165.163 | 21.508 |
| 2005-04-15 | 85.788 | 84.226 | 24.579 | 23.709 |  95.265 | 164.978 | 22.253 |
| 2005-05-15 | 87.353 | 83.432 | 24.839 | 23.624 |  93.927 | 169.225 | 22.167 |
| 2005-06-15 | 88.071 | 86.986 | 25.102 | 23.537 | 100.116 | 172.346 | 21.754 |
| 2005-07-15 | 87.316 | 87.301 |  25.69 | 22.327 | 101.366 | 166.394 | 21.562 |
| 2005-08-15 | 82.987 | 85.105 | 25.315 | 22.299 |  96.019 | 163.744 | 21.659 |
| 2005-09-15 | 82.758 | 83.157 |  24.79 |  22.27 |  94.566 | 159.573 | 21.894 |
| 2005-10-15 | 84.147 | 83.024 | 24.306 | 22.243 |  95.064 | 158.352 |  21.43 |
| 2005-12-13 | 86.876 | 82.767 | 23.356 | 22.188 |  96.043 | 156.816 | 21.635 |
| 2006-03-15 | 87.375 | 82.406 | 24.343 | 23.226 |  96.248 | 157.155 | 22.221 |
| 2006-04-15 |  85.42 | 84.658 | 24.622 | 23.575 |   94.75 | 157.694 | 22.559 |
| 2006-05-15 |  86.34 | 83.627 | 24.996 | 23.912 |  95.328 | 158.445 | 22.796 |
| 2006-06-15 | 83.638 | 87.207 | 25.222 |  24.26 | 101.152 | 153.255 | 23.721 |
| 2006-07-15 |  86.41 |  92.07 | 24.915 | 24.261 | 103.843 | 154.252 | 22.336 |
| 2006-08-15 | 87.322 |  90.39 | 25.176 | 24.007 |  97.112 | 152.366 |  20.05 |
| 2006-09-15 | 77.658 | 88.534 |  24.76 | 23.753 |  95.546 | 148.828 | 18.466 |
| 2006-10-15 | 82.228 | 87.726 | 24.472 | 23.508 |  95.466 | 147.992 | 20.203 |
| 2006-11-15 | 82.474 | 86.893 | 24.174 | 23.254 |  95.382 |  146.46 | 19.909 |
| 2006-12-18 | 82.737 | 86.012 | 23.856 | 22.985 |  95.292 | 144.829 | 20.999 |
| 2007-03-15 | 82.463 | 84.142 |  24.38 | 25.357 |  95.584 | 149.001 | 21.531 |
| 2007-04-15 | 82.144 | 82.767 | 24.649 | 25.479 |  94.954 | 146.512 |  22.26 |
| 2007-05-15 | 82.031 | 85.152 | 25.048 | 25.597 |  95.509 | 147.469 | 22.055 |
| 2007-06-15 |  84.04 | 90.481 | 25.631 | 25.719 | 104.293 | 155.477 | 22.497 |
| 2007-07-15 | 80.375 | 88.974 |  25.14 | 25.246 | 105.377 | 151.409 | 21.249 |
| 2007-08-15 | 76.684 | 88.098 |  23.11 | 23.611 |  96.125 | 147.591 | 19.525 |
| 2007-09-07 | 80.804 | 84.832 | 24.361 | 23.297 |  95.419 | 148.005 | 19.531 |
| 2007-09-15 | 77.573 | 89.084 | 24.476 | 23.373 |  91.345 | 145.175 | 19.063 |
| 2007-10-15 | 77.653 | 88.244 | 24.602 | 23.659 |  92.062 | 146.414 |  18.98 |
| 2008-03-15 | 77.617 | 84.037 | 25.231 | 25.102 |  95.684 | 148.247 | 20.889 |
| 2008-04-15 |  77.21 | 83.187 | 25.286 | 25.395 |   96.42 | 148.679 | 20.315 |
| 2008-05-15 | 78.115 |  83.98 | 25.475 | 25.679 |  94.916 |   153.7 | 20.605 |
| 2008-06-15 | 79.223 | 89.562 | 25.732 | 25.971 | 106.083 |  154.34 | 20.575 |
| 2008-07-15 | 80.001 | 91.625 | 26.179 | 24.975 | 103.423 | 148.514 | 18.777 |
| 2008-08-15 | 78.536 | 93.734 | 26.084 | 24.894 |  97.423 | 146.641 | 18.491 |
| 2008-10-15 | 78.496 | 91.189 | 25.897 | 24.737 |  97.666 | 149.319 | 18.767 |
| 2008-11-15 | 78.476 | 89.898 | 25.802 | 24.657 |  97.789 |  150.67 | 19.179 |
| 2009-01-15 |  78.44 | 87.358 | 25.616 |   24.5 |  98.031 | 153.315 | 19.985 |
| 2009-02-15 | 78.429 | 86.065 | 25.523 | 24.421 |  98.153 |  154.64 | 20.385 |
| 2009-03-15 | 78.419 | 84.899 |  25.44 | 24.349 |  98.263 | 155.836 | 20.746 |
| 2009-04-15 | 77.677 | 84.406 | 25.455 | 24.269 |  98.384 | 154.611 | 20.673 |
| 2009-05-15 | 78.158 | 85.588 | 25.299 | 24.192 |  97.947 | 158.918 | 21.194 |
| 2009-06-15 | 80.212 | 93.377 | 25.293 | 24.113 | 104.151 | 160.998 | 21.261 |
| 2009-07-15 | 79.411 | 97.539 | 26.031 | 23.286 | 108.817 | 160.626 | 20.882 |
| 2009-08-15 | 75.515 | 91.306 | 23.191 | 22.761 |   98.55 | 153.097 | 19.552 |
| 2009-09-02 | 77.474 | 87.849 |  24.69 | 22.456 | 100.034 | 149.459 | 18.989 |
| 2009-09-15 | 75.916 | 92.003 | 24.824 | 22.583 |  98.397 | 149.997 | 18.234 |
| 2009-10-15 | 76.171 | 91.844 | 24.803 | 22.876 |    98.8 |  151.04 | 18.619 |
| 2010-03-15 | 77.443 | 91.046 |   24.7 |  24.35 | 100.828 | 156.112 | 20.415 |
| 2010-04-15 | 77.617 | 90.883 | 24.739 | 24.651 | 101.411 | 153.797 | 20.249 |
| 2010-05-15 | 77.355 | 93.509 | 24.599 | 24.943 |  97.134 |  151.33 | 20.447 |
| 2010-06-15 | 79.452 | 96.202 | 24.665 | 25.244 | 108.343 | 158.068 | 19.781 |
| 2010-07-15 | 78.538 |  91.51 |  25.32 | 23.904 | 104.956 | 155.567 | 18.645 |
| 2010-08-15 | 75.957 | 87.122 | 25.061 | 23.935 | 103.813 | 157.569 | 18.121 |
| 2010-09-15 | 75.877 | 84.789 | 25.131 | 24.014 | 102.025 | 157.344 | 17.003 |
| 2010-10-15 | 76.047 | 84.355 | 25.246 | 24.091 | 102.544 | 156.756 | 17.449 |
| 2011-03-15 | 76.925 | 82.128 | 25.823 | 24.474 | 105.074 | 155.274 | 20.641 |
| 2011-04-15 | 79.403 | 83.809 | 25.975 | 24.552 | 105.589 | 155.006 | 21.117 |
| 2011-05-15 | 81.668 | 84.669 | 26.146 | 24.628 |  105.07 | 154.113 | 21.158 |
| 2011-06-15 | 80.895 | 87.613 | 26.259 | 24.706 | 108.608 | 157.965 | 20.944 |
| 2011-07-15 | 82.773 |  88.31 | 26.237 | 24.913 | 111.451 |  154.51 | 20.773 |
| 2011-08-15 | 78.876 | 89.511 | 25.422 | 24.837 | 103.116 | 150.874 | 21.128 |
| 2011-09-15 | 76.661 | 93.429 | 25.441 | 24.762 | 102.932 | 148.407 | 19.989 |
| 2011-10-15 | 76.969 | 92.021 | 25.565 |  24.69 | 103.075 | 149.014 | 20.466 |
| 2012-01-15 |  77.92 | 87.739 | 25.946 | 24.467 | 103.515 | 150.157 | 21.643 |
| 2012-03-15 | 78.563 |  85.02 | 26.194 | 24.324 | 103.849 | 150.975 | 22.433 |
| 2012-04-15 |   77.0 | 83.618 | 26.208 | 24.251 | 104.021 | 153.165 | 22.261 |
| 2012-05-15 | 78.313 |  89.06 | 26.294 | 24.179 | 102.945 | 149.725 | 23.234 |
| 2012-06-15 | 80.403 | 99.751 | 26.457 | 24.106 | 110.207 | 149.202 | 23.298 |
| 2012-07-15 | 79.246 | 93.883 | 25.971 | 24.162 | 110.451 | 144.346 | 20.784 |
| 2012-08-15 | 73.854 | 92.591 | 24.283 | 23.896 | 102.037 | 148.621 | 17.794 |
| 2012-09-15 | 73.408 | 92.697 | 24.701 | 23.554 | 100.057 | 149.502 | 18.158 |
| 2012-10-15 | 75.579 | 93.904 | 25.197 | 23.223 | 102.396 | 149.203 | 18.699 |
| 2012-11-10 |  77.46 |  94.95 | 25.608 | 22.937 | 104.422 | 145.698 | 20.344 |
| 2013-02-15 | 78.542 | 94.728 | 25.579 | 22.762 | 103.627 | 146.398 | 20.821 |
| 2013-03-15 | 78.853 | 94.655 | 25.569 | 22.711 | 103.389 | 146.597 | 20.943 |
| 2013-04-15 | 77.174 | 91.713 | 25.552 | 22.655 |  103.57 | 145.961 | 20.689 |
| 2013-05-15 | 76.314 | 88.275 | 25.606 | 23.116 | 103.391 |  147.39 |  21.26 |
| 2013-06-15 | 77.558 | 91.854 | 26.154 | 24.171 | 108.436 | 150.791 |  22.58 |
| 2013-07-15 | 77.417 | 90.067 | 26.086 | 24.463 | 113.278 | 148.154 | 21.627 |
| 2013-08-15 | 77.711 | 95.611 | 24.961 | 23.694 | 107.394 | 149.933 |  19.71 |
| 2013-09-15 |  75.31 | 98.248 | 25.468 | 23.476 | 106.025 | 151.379 | 19.394 |
| 2013-10-15 | 78.669 |  98.37 | 25.698 | 23.573 | 107.127 | 146.733 |  19.45 |
| 2013-11-15 | 78.516 | 96.743 | 25.935 | 23.673 | 108.028 | 146.907 | 20.542 |
| 2013-12-15 |  78.08 | 95.173 | 26.164 |  23.77 | 108.898 | 147.394 | 20.225 |
| 2014-01-15 | 77.629 | 93.548 |   26.4 | 23.869 | 109.787 | 148.152 | 20.946 |
| 2014-02-15 | 77.176 | 91.919 | 26.633 | 23.968 | 110.662 | 147.625 | 20.531 |
| 2014-03-15 | 75.959 | 91.421 | 26.844 | 24.057 | 111.369 | 147.978 | 21.395 |
| 2014-04-15 | 76.117 | 86.652 | 27.181 | 24.446 | 111.824 | 147.385 | 21.665 |
| 2014-05-15 | 74.963 | 91.128 | 26.695 | 25.167 | 111.113 | 144.767 | 22.329 |
| 2014-06-15 | 78.758 | 98.159 | 27.643 | 25.621 | 115.617 | 147.405 | 22.812 |
| 2014-07-15 | 76.985 | 97.381 | 27.935 |  25.65 | 116.565 | 149.011 | 20.138 |
| 2014-08-15 | 74.588 | 93.866 | 27.266 |  25.27 | 104.953 | 147.195 | 18.791 |
| 2014-09-01 | 76.159 | 90.192 |  27.75 | 24.978 | 109.248 | 147.111 | 19.434 |
| 2014-09-15 | 73.551 | 85.374 | 26.767 | 24.418 | 103.153 | 146.891 | 18.542 |
| 2014-10-15 | 74.539 | 96.665 | 26.921 | 24.534 |  104.56 | 147.917 | 18.797 |
| 2014-11-15 | 75.834 | 96.032 |  27.08 | 24.653 | 106.009 | 150.272 | 19.084 |
| 2014-12-15 | 76.887 | 95.419 | 27.234 | 24.769 | 107.408 | 148.447 | 19.223 |
| 2014-12-16 | 76.922 | 95.399 | 27.239 | 24.773 | 107.455 | 148.658 | 19.486 |
| 2015-01-15 | 76.856 |  93.84 |  27.44 | 24.674 | 108.418 | 147.955 | 19.618 |
| 2015-01-16 | 76.854 | 93.789 | 27.447 | 24.671 | 108.451 | 147.509 | 19.444 |
| 2015-02-14 | 76.384 | 92.189 | 27.644 | 24.901 | 110.088 | 148.776 | 19.558 |
| 2015-02-15 | 76.098 | 90.414 | 27.684 | 24.911 |  109.33 | 148.835 |   19.9 |
| 2015-03-15 | 76.374 | 88.982 |  27.45 | 25.195 | 110.342 | 150.226 | 21.172 |
| 2015-03-16 | 76.591 | 90.193 | 27.352 | 25.226 | 111.972 | 150.483 | 20.209 |
| 2015-05-15 | 75.128 | 85.968 | 27.894 | 25.439 |  109.18 | 151.752 | 20.951 |
| 2015-05-16 | 76.604 | 86.254 | 28.556 | 25.525 | 112.428 |  151.52 | 20.544 |
| 2015-07-15 |  76.92 | 96.052 | 29.158 | 26.321 |  114.17 | 155.761 | 21.272 |
| 2015-07-16 | 76.878 | 96.609 | 29.309 | 26.332 | 112.074 | 151.295 | 20.978 |
| 2015-08-15 |  74.51 | 91.573 | 28.328 | 25.776 | 105.946 | 153.268 | 20.346 |
| 2015-08-16 | 74.425 | 92.664 | 28.484 | 25.687 | 105.382 | 150.493 | 20.028 |
| 2015-09-01 | 74.777 | 95.012 | 28.005 | 24.741 | 110.786 | 146.593 | 20.566 |
| 2015-10-15 | 74.723 | 93.595 | 27.508 | 24.018 | 107.781 | 152.661 | 19.632 |
| 2015-10-16 | 74.916 | 96.576 | 27.496 | 24.002 | 106.751 | 148.711 | 18.651 |
| 2015-12-15 | 74.239 | 96.036 | 27.998 | 24.452 | 108.839 |  148.07 | 19.472 |
| 2015-12-16 | 74.228 | 96.027 | 28.006 | 24.459 | 108.873 | 147.824 | 19.065 |
| 2016-01-15 | 74.197 |  91.52 | 28.057 | 24.607 | 109.016 | 146.361 |  19.91 |
| 2016-01-16 | 74.195 |  91.37 | 28.059 | 24.612 | 109.021 | 146.098 | 19.491 |
| 2016-03-15 | 73.132 | 87.426 | 27.966 | 24.876 | 112.015 | 145.594 | 20.494 |
| 2016-03-16 | 73.832 | 92.289 | 28.486 | 24.832 | 109.804 | 144.116 | 20.268 |
| 2016-05-15 |   73.7 | 91.336 | 29.061 | 25.067 | 111.569 | 144.233 | 21.357 |
| 2016-05-16 | 74.575 | 95.661 | 28.847 | 25.472 | 112.275 | 143.234 | 20.884 |
| 2016-07-15 | 75.346 | 94.671 | 29.304 | 26.976 | 115.975 | 145.706 | 19.226 |
| 2016-07-16 | 75.822 | 93.363 | 29.367 | 27.016 |  115.55 | 141.695 | 18.279 |
| 2016-08-15 |  73.06 | 93.391 | 28.634 | 26.556 | 111.295 | 145.466 | 17.997 |
| 2016-08-16 | 73.807 | 92.263 | 29.095 | 26.622 | 110.737 |  141.25 | 17.455 |
| 2016-09-01 | 75.096 | 92.788 | 28.355 | 25.634 |  112.37 | 147.203 | 19.344 |
| 2016-09-25 |  72.38 | 94.705 | 27.956 | 25.642 | 111.087 |  140.42 | 17.575 |
| 2016-10-06 | 72.159 | 94.564 | 27.734 | 25.526 | 113.972 | 144.797 | 18.178 |
| 2016-10-15 | 73.809 | 91.768 | 28.013 | 25.217 | 111.745 | 149.913 | 18.694 |
| 2016-10-16 | 74.187 | 91.401 | 28.039 | 25.183 | 109.712 | 142.334 |  18.07 |
| 2016-10-18 | 73.072 | 94.478 | 27.922 | 25.388 | 115.289 | 145.079 | 18.227 |
| 2016-10-25 | 72.839 | 94.261 |  28.12 | 25.436 | 113.867 | 144.029 | 18.243 |
| 2016-10-30 | 72.041 | 93.101 | 27.957 | 25.325 | 114.274 | 142.895 | 18.313 |
| 2016-11-11 |  73.14 | 91.191 | 28.034 | 25.279 | 114.613 | 146.148 | 18.867 |
| 2016-11-16 | 73.637 | 91.219 | 28.086 |  25.33 | 114.529 | 145.653 | 19.143 |
| 2016-11-30 | 74.239 | 88.928 | 28.235 |  25.36 | 114.785 | 147.247 | 19.295 |
| 2016-12-05 | 74.455 |  88.11 | 28.288 |  25.37 | 114.877 | 147.817 | 19.349 |
| 2016-12-12 | 74.756 | 86.965 | 28.363 | 25.385 | 115.005 | 148.614 | 19.425 |
| 2016-12-15 | 76.104 | 85.305 | 28.296 | 25.406 | 112.967 | 148.118 | 19.545 |
| 2016-12-16 |  76.52 | 84.752 | 28.274 | 25.412 | 112.287 | 147.796 | 19.438 |
| 2016-12-17 |  75.31 | 85.818 | 28.285 | 25.284 | 115.211 | 147.701 | 19.521 |
| 2016-12-24 | 75.698 | 86.247 | 28.343 | 25.479 | 114.416 | 149.273 | 19.615 |
| 2016-12-29 |  76.17 | 86.182 | 28.615 | 25.379 | 114.663 | 149.769 | 19.666 |
| 2017-01-04 |  76.25 |  85.76 | 28.638 | 25.479 | 114.553 | 151.144 | 19.775 |
| 2017-01-10 | 76.338 | 85.071 | 28.485 | 25.555 | 114.632 | 151.119 | 20.105 |
| 2017-01-15 |  75.98 | 84.865 | 28.444 | 25.572 | 113.972 | 151.697 | 20.239 |
| 2017-01-22 | 75.561 | 84.576 | 28.387 | 25.595 | 113.048 | 151.859 | 20.171 |
| 2017-01-29 | 76.479 | 83.505 | 28.578 | 25.805 | 113.161 |  151.92 | 20.092 |
| 2017-02-03 | 76.993 | 83.253 |  28.54 | 25.816 | 114.154 | 151.773 | 20.052 |
| 2017-02-09 | 77.494 | 82.916 | 28.566 | 25.854 | 114.256 | 153.141 | 20.118 |
| 2017-02-14 | 77.968 | 82.156 |  28.56 | 25.738 | 113.373 | 151.802 | 20.031 |
| 2017-02-22 | 78.074 | 83.198 | 28.542 | 26.046 | 113.017 | 151.693 | 20.272 |
| 2017-02-27 |  77.96 | 82.727 | 28.486 | 25.963 | 114.001 | 150.569 | 20.314 |
| 2017-03-06 | 78.785 | 82.039 | 28.767 | 25.852 | 113.691 | 150.294 | 20.173 |
| 2017-03-11 | 78.808 | 81.871 | 28.762 | 25.834 | 113.946 | 150.998 | 20.187 |
| 2017-03-15 | 78.782 | 81.715 |  28.58 |   25.9 |   114.3 | 152.089 | 20.666 |
| 2017-03-16 | 78.797 | 81.118 |  28.71 |  25.87 | 113.778 |  149.55 | 20.442 |
| 2017-03-18 | 78.586 | 81.679 | 28.989 | 25.935 | 113.925 | 151.156 | 20.274 |
| 2017-03-23 | 78.179 | 82.125 | 28.806 | 25.974 | 115.395 | 151.438 | 20.637 |
| 2017-03-30 | 78.549 | 82.174 | 28.926 |  26.09 | 115.314 | 151.613 | 20.688 |
| 2017-04-04 | 78.108 | 82.068 |  28.82 |  25.92 |  115.76 | 151.407 | 20.661 |
| 2017-04-11 | 78.177 | 80.698 | 28.938 | 26.004 | 114.358 |  153.41 | 20.703 |
| 2017-04-16 | 78.414 | 81.149 | 28.818 | 25.947 | 115.612 |  155.17 |  20.88 |
| 2017-04-23 | 79.699 | 82.326 | 28.984 | 26.294 | 115.763 | 156.264 | 20.994 |
| 2017-04-28 | 80.267 | 83.633 | 29.094 | 26.281 | 117.903 | 159.198 | 21.225 |
| 2017-05-05 |  80.37 | 81.855 |  29.13 |  26.48 |  117.03 | 162.299 | 21.339 |
| 2017-05-10 |  79.35 |  80.39 | 29.057 | 26.431 | 116.807 | 162.388 | 21.214 |
| 2017-05-15 | 79.932 |   80.2 | 28.943 | 26.162 | 114.485 | 153.675 | 21.408 |
| 2017-05-16 | 79.991 | 79.949 | 29.213 | 26.402 | 115.696 | 154.112 | 21.006 |
| 2017-05-17 | 78.619 | 80.219 | 29.141 | 26.671 | 115.614 | 153.869 | 20.835 |
| 2017-05-22 | 78.693 | 80.247 | 29.101 | 26.748 | 114.818 |  154.11 | 20.587 |
| 2017-05-28 | 78.635 | 79.387 | 29.418 | 26.839 | 114.264 |  153.27 | 20.564 |
| 2017-06-03 | 78.935 | 79.981 | 29.686 | 26.718 | 114.024 | 152.836 | 20.622 |
| 2017-06-09 | 78.763 | 80.718 | 29.941 | 27.032 |  113.65 | 153.295 | 20.403 |
| 2017-06-16 | 79.298 | 81.484 | 29.983 | 27.633 | 114.792 | 153.911 | 20.439 |
| 2017-06-21 | 80.822 | 81.137 | 30.374 | 28.073 | 115.713 | 154.421 | 20.258 |
| 2017-06-28 | 81.297 | 81.119 | 30.853 | 28.502 | 117.656 | 153.665 | 19.973 |
| 2017-07-03 | 80.775 |  81.88 | 31.241 | 29.187 | 117.772 | 152.838 |  19.88 |
| 2017-07-09 | 80.331 | 84.334 |  31.14 | 29.572 | 119.222 | 152.072 | 19.872 |
| 2017-07-16 | 80.344 | 84.863 | 30.892 | 29.415 | 119.967 | 153.864 | 20.569 |
| 2017-07-21 |  80.55 | 85.029 | 31.223 | 29.743 | 119.796 | 151.744 | 20.108 |
| 2017-07-27 | 80.444 | 83.836 | 31.271 | 29.667 | 118.784 | 152.537 | 19.556 |
| 2017-08-02 | 79.555 | 83.905 |  31.15 | 29.456 | 117.682 | 151.469 | 18.753 |
| 2017-08-08 | 78.208 | 83.954 |  30.77 | 28.955 | 114.988 | 150.999 | 18.064 |
| 2017-08-12 | 77.601 | 84.225 | 30.192 | 28.612 | 115.179 | 151.778 | 17.948 |
| 2017-08-15 | 79.425 | 85.875 | 29.885 | 27.771 | 116.481 | 155.582 | 18.537 |
| 2017-08-16 |  78.64 | 86.815 |  30.43 | 27.661 | 115.907 | 154.203 | 18.305 |
| 2017-08-20 | 77.339 | 84.865 | 29.687 | 27.142 |  113.77 | 151.177 | 17.653 |
| 2017-08-26 | 77.476 | 86.576 |  29.44 | 26.395 | 113.533 | 151.785 | 17.655 |
| 2017-09-13 | 77.028 | 85.146 | 29.403 | 26.156 | 112.617 | 151.643 | 17.875 |
| 2017-09-19 | 77.761 |  85.54 | 29.316 | 26.234 | 114.686 | 153.406 | 17.781 |
| 2017-09-24 | 77.701 | 86.759 | 29.456 | 26.319 |  114.56 | 153.119 | 17.635 |
| 2017-10-01 | 77.358 | 86.461 | 29.376 | 26.392 | 115.807 | 150.457 | 17.748 |
| 2017-10-07 | 76.525 | 85.704 | 29.376 | 26.416 | 115.455 |  150.82 | 18.023 |
| 2017-10-13 | 76.747 | 85.093 | 29.422 | 26.339 | 117.426 | 153.341 | 18.142 |
| 2017-10-15 | 78.157 | 84.555 | 29.438 | 26.304 | 114.788 | 156.798 | 18.615 |
| 2017-10-16 | 77.807 | 84.553 | 29.427 | 26.287 | 113.806 | 153.469 | 18.106 |
| 2017-10-19 | 76.813 | 85.097 | 29.667 | 26.578 | 116.678 | 154.106 |  18.19 |
| 2017-10-25 | 76.874 | 85.235 | 29.768 |  26.54 | 117.764 | 155.266 | 18.697 |
| 2017-10-31 | 76.986 | 85.059 | 29.751 | 26.352 | 116.858 | 153.995 | 18.999 |
| 2017-11-06 | 77.429 | 84.195 | 29.765 | 26.296 | 117.144 |   151.7 | 18.803 |
| 2017-11-12 | 77.322 | 82.506 | 29.826 | 26.121 | 115.163 | 151.151 | 18.564 |
| 2017-11-18 | 77.491 | 80.946 |  29.74 | 26.137 |  114.63 | 148.787 |  18.34 |
| 2017-11-30 | 77.312 | 81.714 | 29.583 | 26.167 | 116.842 | 149.538 | 19.028 |
| 2017-12-12 |  77.34 | 81.235 | 29.412 | 26.494 | 116.763 | 149.415 | 18.933 |
| 2017-12-15 | 78.658 | 81.112 | 29.413 | 26.483 | 116.636 | 153.212 | 18.917 |
| 2017-12-16 | 79.098 | 81.071 | 29.414 | 26.479 | 116.594 | 154.394 | 18.998 |
| 2017-12-24 | 77.773 |  78.18 | 29.502 | 26.341 | 115.331 | 148.403 | 19.067 |
| 2018-01-05 | 77.959 | 79.237 | 29.412 | 26.371 | 116.077 | 150.067 | 19.196 |
| 2018-01-15 | 80.303 |  79.24 | 29.438 | 26.621 | 116.798 | 154.115 | 19.247 |
| 2018-01-16 | 80.537 |  79.24 |  29.44 | 26.646 |  116.87 | 153.185 | 19.382 |
| 2018-01-17 | 78.057 | 79.102 |   29.6 | 26.493 | 117.282 | 149.554 | 19.408 |
| 2018-01-29 | 77.394 | 77.197 | 29.449 |  26.66 | 116.538 | 150.125 | 19.263 |
| 2018-02-10 | 77.234 | 77.106 | 29.621 | 26.467 | 115.534 | 149.434 | 19.635 |
| 2018-02-14 | 81.183 |  77.25 | 29.481 | 26.686 | 115.941 | 153.926 | 19.608 |
| 2018-02-15 | 79.954 | 76.648 | 29.502 | 26.684 | 116.323 | 156.868 |  20.19 |
| 2018-02-22 | 79.162 |  74.49 |  29.65 |  26.67 | 115.369 | 148.662 | 19.407 |
| 2018-03-06 | 79.016 | 75.118 | 29.482 | 26.472 | 115.831 | 149.344 | 19.498 |
| 2018-03-15 | 80.425 | 76.639 | 29.763 | 26.612 |  117.67 | 155.502 | 20.538 |
| 2018-03-16 | 81.453 | 76.308 |  29.63 | 26.756 | 116.564 | 151.569 | 19.785 |
| 2018-03-18 | 78.631 | 74.164 | 29.391 | 26.594 | 115.886 | 148.386 | 19.798 |
| 2018-03-30 | 79.055 | 74.385 | 29.437 | 26.475 | 115.799 | 146.849 | 19.521 |
| 2018-04-11 | 79.862 | 74.047 | 29.665 | 26.749 | 115.231 | 147.964 | 19.699 |
| 2018-04-23 | 80.099 | 75.952 | 29.456 | 26.863 | 115.345 | 149.237 | 20.015 |
| 2018-05-05 | 80.706 | 74.383 |  29.43 | 26.759 | 114.537 | 150.816 |  19.79 |
| 2018-05-15 | 81.773 | 75.023 | 29.583 | 26.963 | 115.561 | 155.648 | 20.992 |
| 2018-05-16 | 82.898 | 75.695 |  29.85 | 27.265 | 118.319 | 153.099 | 20.119 |
| 2018-05-17 | 82.199 | 75.097 | 29.612 | 26.751 | 117.293 | 150.878 | 19.649 |
| 2018-05-29 | 79.489 | 73.933 | 29.881 |  27.05 | 114.798 | 149.533 | 19.999 |
| 2018-06-10 | 79.902 | 74.714 | 30.029 | 27.105 | 114.299 | 150.227 | 20.192 |
| 2018-06-22 | 80.221 | 76.543 | 30.083 | 28.114 | 115.622 | 146.605 | 19.896 |
| 2018-07-04 | 80.347 | 75.031 | 30.415 |  28.47 | 116.606 | 147.184 | 19.956 |
| 2018-07-15 | 83.247 | 76.092 | 30.116 | 28.543 | 118.221 | 155.284 | 20.315 |
| 2018-07-28 |  80.44 | 74.866 | 30.281 | 28.759 | 114.756 | 144.697 | 18.137 |
| 2018-08-09 | 78.912 | 75.942 | 30.135 | 28.856 | 114.112 | 144.985 | 17.794 |
| 2018-08-15 | 81.189 | 78.969 |  30.16 | 28.955 | 116.025 | 154.516 |  18.45 |
| 2018-08-16 | 81.959 | 77.688 | 30.142 | 29.154 | 115.795 |  152.94 | 18.157 |
| 2018-08-21 |  76.52 | 76.362 | 30.005 | 28.935 | 111.708 | 144.295 | 17.061 |
| 2018-09-02 | 76.655 | 77.662 | 29.949 | 28.073 | 110.672 | 144.451 | 16.833 |
| 2018-09-14 | 78.229 | 79.153 | 30.205 | 27.886 | 110.053 | 147.662 | 16.948 |
| 2018-09-26 | 77.013 | 79.828 | 30.303 | 27.792 | 110.343 | 146.205 | 17.799 |
| 2018-10-08 | 76.639 |  77.92 | 29.807 |  27.57 | 112.097 | 149.129 | 18.291 |
| 2018-10-15 | 80.031 | 79.886 | 29.956 |  27.83 | 113.809 | 156.721 | 19.031 |
| 2018-10-16 | 79.892 | 79.266 | 29.976 | 27.867 | 113.956 | 153.508 | 18.467 |
| 2018-10-20 | 78.548 | 78.883 | 29.779 | 27.827 | 114.267 | 150.023 | 18.474 |
| 2018-11-01 | 79.231 | 78.982 | 30.348 | 27.823 | 113.335 | 151.011 | 18.508 |
| 2018-11-13 | 80.396 | 76.226 | 30.326 | 27.614 | 113.161 | 152.443 | 18.641 |
| 2018-11-25 | 78.611 |  75.01 |  30.19 | 27.819 | 113.623 | 152.238 | 18.975 |
| 2018-12-07 | 79.374 | 74.221 | 30.318 |  27.86 | 112.556 | 150.112 | 19.019 |
| 2018-12-15 | 80.628 |  75.11 | 30.396 | 27.841 | 112.748 | 150.175 | 19.546 |
| 2018-12-19 | 81.255 | 75.555 | 30.435 | 27.832 | 112.845 | 150.202 | 19.171 |
| 2018-12-31 |  79.87 | 75.378 | 30.362 | 27.948 | 112.946 |   151.3 | 19.575 |
| 2019-01-12 | 79.513 | 73.995 | 30.392 | 27.955 | 112.978 | 153.187 | 20.056 |
| 2019-01-24 | 78.814 | 73.388 | 30.392 | 28.124 | 113.171 | 154.552 | 20.296 |
| 2019-02-05 | 80.133 |  72.58 | 30.361 | 27.911 | 112.811 | 154.381 | 20.028 |
| 2019-02-17 | 78.201 | 73.919 |  30.22 |  28.01 | 113.253 | 154.519 | 19.608 |
| 2019-03-01 | 79.418 | 73.286 |  30.22 | 27.967 | 112.877 | 153.693 |  19.99 |
| 2019-03-13 | 77.423 | 72.438 | 30.173 | 28.135 | 113.078 | 154.613 | 20.302 |
| 2019-03-25 | 77.156 | 73.532 | 30.276 | 28.093 | 112.497 | 151.566 |  20.53 |
| 2019-04-05 | 77.197 | 73.147 | 30.247 | 28.283 | 111.356 | 154.418 | 20.392 |
| 2019-04-18 | 78.419 | 73.377 | 30.255 | 28.391 | 111.077 | 156.942 | 20.899 |
| 2019-04-30 | 78.907 |  74.23 | 30.108 | 28.262 | 114.903 | 157.207 | 20.624 |
| 2019-05-12 | 79.466 | 75.609 | 30.194 | 28.312 | 111.831 | 155.235 |  20.44 |
| 2019-05-24 | 77.937 | 77.756 | 30.401 | 28.179 | 113.495 | 155.223 | 20.403 |
| 2019-06-05 | 78.133 | 79.991 |  30.67 | 28.451 | 112.691 | 155.285 | 20.074 |
| 2019-06-17 |  78.69 | 81.187 | 30.828 | 28.503 | 113.898 | 156.131 | 20.534 |
| 2019-06-29 | 78.675 | 81.719 | 30.976 | 28.519 | 112.318 | 156.378 | 19.969 |
| 2019-07-11 |  78.22 | 85.006 | 30.937 | 28.479 | 111.297 | 156.265 | 19.282 |
| 2019-07-23 | 77.961 | 83.492 | 30.812 | 28.208 |  106.82 | 155.751 | 18.583 |
| 2019-08-04 | 77.282 |  80.99 | 30.758 | 28.071 | 104.777 |  155.93 | 17.438 |
| 2019-08-16 | 75.591 | 80.258 | 30.383 | 27.128 | 102.783 | 153.701 | 16.452 |
| 2019-08-28 | 77.466 | 82.015 | 29.732 | 26.746 | 103.357 | 153.471 | 16.495 |
| 2019-09-09 | 77.418 | 81.585 | 29.535 | 25.982 | 103.707 | 153.154 | 16.863 |
| 2019-09-21 | 79.293 | 81.342 | 29.635 | 25.343 | 102.756 | 157.729 | 16.995 |
| 2019-10-03 | 80.148 | 80.369 | 29.645 | 25.554 | 104.464 | 158.051 | 17.898 |
| 2019-10-15 | 78.961 | 80.694 | 29.774 | 25.521 | 104.467 | 156.166 | 17.853 |
| 2019-10-27 | 79.742 | 80.139 | 29.921 | 25.759 | 107.441 | 157.501 | 18.107 |
| 2019-11-08 | 79.978 | 78.991 | 29.869 | 25.586 | 108.021 | 158.018 | 18.616 |
| 2019-11-20 | 80.739 | 78.366 | 29.985 |  25.92 | 107.309 | 160.134 | 18.727 |
| 2019-12-02 | 81.278 | 77.863 | 30.002 | 26.004 | 109.545 | 159.622 | 19.279 |
| 2019-12-14 | 81.905 | 77.218 | 30.035 | 25.897 | 109.112 | 158.427 | 19.303 |
| 2019-12-26 | 82.098 | 77.192 | 30.117 | 25.836 | 110.037 | 156.605 | 19.268 |
| 2020-01-07 | 83.421 | 76.431 | 30.049 | 25.982 | 110.821 | 158.859 | 19.703 |
| 2020-01-19 | 84.111 | 74.494 | 30.171 | 26.051 | 109.211 | 159.567 | 20.164 |
| 2020-01-31 | 85.208 | 75.126 | 30.195 | 25.946 | 109.737 | 160.607 | 20.223 |
| 2020-02-12 | 84.785 | 74.349 |  30.19 | 26.066 | 109.989 | 161.784 | 20.309 |
| 2020-02-24 | 83.722 | 73.946 |  30.02 | 26.055 | 110.093 | 160.921 | 20.096 |
| 2020-03-07 | 83.925 | 73.162 | 30.284 | 26.208 |  109.23 | 157.954 | 20.078 |
| 2020-03-19 | 83.288 | 73.629 | 30.224 | 26.232 |  108.97 | 161.083 | 20.171 |
| 2020-03-31 | 83.436 | 73.244 | 30.377 | 26.336 | 108.812 |  161.16 | 20.769 |
| 2020-04-12 | 84.701 | 74.095 | 30.378 | 26.374 | 109.617 |  161.79 |  20.87 |
| 2020-04-24 | 84.327 | 74.599 | 30.211 | 26.503 | 111.254 | 162.796 | 20.503 |
| 2020-05-06 | 84.429 | 75.888 | 30.238 | 26.599 | 109.073 | 161.645 | 20.282 |
| 2020-05-18 |  83.78 | 76.893 | 30.494 | 26.799 | 110.086 | 158.151 | 20.723 |
| 2020-05-30 | 83.473 | 79.757 | 30.944 | 26.835 | 108.217 | 155.985 | 20.839 |
| 2020-06-11 | 84.174 | 82.524 | 31.154 |  27.51 | 107.642 | 154.266 | 20.523 |
| 2020-06-23 | 85.161 | 85.588 | 31.674 | 27.701 | 108.546 | 152.028 | 20.145 |
| 2020-07-05 | 84.712 |  88.94 |  31.85 | 27.766 | 110.929 | 152.085 | 20.311 |
| 2020-07-17 | 82.849 | 89.082 | 31.798 |  27.77 | 110.689 | 150.295 | 19.762 |
| 2020-07-29 | 81.809 | 87.849 | 31.816 | 27.669 | 108.642 | 151.291 |  18.58 |
| 2020-08-10 | 82.228 | 90.198 |  31.62 | 26.993 |  105.73 | 149.006 | 17.615 |
| 2020-08-22 | 81.527 |  89.82 | 30.994 | 27.758 | 109.332 | 149.612 | 17.207 |
| 2020-09-03 | 79.876 | 88.064 | 30.079 | 25.801 | 105.953 |  145.82 | 17.136 |
| 2020-09-15 | 80.593 | 87.605 | 30.014 | 25.349 | 104.587 | 149.824 | 16.943 |

*** Some arbitrary glaciers
#+BEGIN_SRC bash :results table :eval no-export
FILE=./out/sector_D.csv.zip

# GLLIST='Date|ACADEMY|SERMEQ_KUJ|BOWDOIN|BUGT|HELH|STORE|KANGER|ZACH|RINK|NIOGHALV|PETERMANN'
GLLIST='Date|JAKOBSH|HELH|STORE|ZACH' # |RINK'

# head -n1 ${FILE} \
#   | tr ',' '\n' \
#   | cat -n \
#   | grep -E ${GLLIST}

COLS=$(\
head -n1 <(zcat ${FILE}) \
  | tr ',' '\n' \
  | cat -n \
  | grep -E ${GLLIST} \
  | cut -d$'\t' -f1 
)

cut -d, -f$(echo $COLS|tr ' ' ',') <(zcat ${FILE})
#+END_SRC

#+RESULTS:
|       Date | HELHEIMGLETSCHER | JAKOBSHAVN_ISBRAE | STORE_GLETSCHER | ZACHARIAE_ISSTROM |
| 1986-04-15 |           29.657 |            23.174 |          11.266 |             9.237 |
| 1986-05-15 |           33.243 |             30.07 |          11.141 |              9.31 |
| 1986-06-15 |            31.41 |            30.006 |          10.919 |             9.385 |
| 1986-07-15 |           33.052 |            29.944 |          10.704 |             8.988 |
| 1986-08-15 |           31.726 |             29.88 |          10.659 |             9.865 |
| 1986-09-15 |           32.877 |            29.569 |          10.614 |            10.525 |
| 1986-10-15 |           32.978 |            29.267 |           10.57 |            10.182 |
| 1987-03-15 |           33.478 |            27.734 |           10.35 |             8.453 |
| 1987-04-15 |           33.579 |            27.417 |          10.305 |             8.098 |
| 1987-05-15 |           33.291 |            23.884 |           9.951 |             9.477 |
| 1987-06-15 |           31.647 |            25.525 |          10.255 |             9.018 |
| 1987-07-15 |           31.725 |            30.462 |           10.13 |            10.091 |
| 1987-08-15 |           33.944 |            29.506 |           9.879 |             9.958 |
| 1987-09-15 |            31.76 |            28.549 |           9.953 |             9.923 |
| 1987-10-15 |           31.756 |            27.622 |          10.026 |              9.89 |
| 1988-03-15 |           32.387 |            22.901 |           10.39 |              9.72 |
| 1988-04-15 |           32.514 |            23.374 |          10.618 |             9.685 |
| 1988-05-15 |           29.596 |            27.388 |          10.193 |             9.618 |
| 1988-06-15 |           30.434 |            27.685 |          10.169 |             9.582 |
| 1988-07-15 |           27.953 |            26.319 |          10.749 |             8.979 |
| 1988-08-15 |           29.655 |            25.979 |          10.283 |             7.956 |
| 1988-09-15 |           30.542 |            25.638 |           9.817 |              8.95 |
| 1988-10-15 |            27.13 |            25.307 |           9.862 |             9.164 |
| 1989-03-15 |           27.297 |            23.637 |          10.089 |            10.243 |
| 1989-04-15 |            27.33 |            23.974 |          10.045 |             8.581 |
| 1989-05-15 |           29.529 |            24.105 |          10.076 |             9.984 |
| 1989-06-15 |           28.755 |            25.817 |          10.218 |             9.509 |
| 1989-07-15 |           27.724 |            25.975 |          10.755 |             9.913 |
| 1989-08-15 |           27.367 |            31.457 |           10.24 |             9.823 |
| 1989-09-15 |           26.399 |            30.892 |          10.508 |             9.804 |
| 1989-10-15 |           26.694 |            30.131 |          10.516 |             9.785 |
| 1990-03-15 |           28.158 |            26.282 |          10.555 |             9.691 |
| 1990-04-15 |            28.27 |            24.431 |          10.304 |             9.064 |
| 1990-05-15 |           26.516 |            22.394 |           9.971 |            11.212 |
| 1990-06-15 |           27.074 |            27.925 |            10.6 |             9.732 |
| 1990-07-15 |           26.768 |             26.83 |          10.418 |             9.422 |
| 1990-08-15 |           26.453 |            25.645 |           10.23 |             9.755 |
| 1990-09-15 |           25.757 |            24.811 |          10.043 |             9.725 |
| 1990-10-15 |           26.648 |            24.624 |          10.028 |             9.697 |
| 1991-01-01 |           25.738 |            24.134 |           9.987 |             9.622 |
| 1991-06-15 |           27.174 |            23.086 |           9.903 |             9.463 |
| 1992-01-01 |           28.872 |            21.792 |           9.801 |             9.271 |
| 1992-06-15 |           30.247 |            22.589 |           9.716 |              9.37 |
| 1992-07-15 |           30.491 |            22.733 |           9.701 |             9.388 |
| 1992-08-15 |           30.743 |            22.883 |           9.685 |             9.406 |
| 1992-09-15 |           30.994 |            23.034 |           9.669 |             9.425 |
| 1992-10-15 |           31.236 |            23.179 |           9.654 |             9.443 |
| 1993-01-01 |           31.859 |            23.559 |           9.614 |             9.489 |
| 1993-03-15 |           32.435 |            23.835 |           9.624 |             9.533 |
| 1993-04-15 |           32.678 |            23.953 |           9.628 |             9.551 |
| 1993-05-15 |           32.912 |            24.067 |           9.632 |             9.569 |
| 1993-06-15 |           33.153 |            24.186 |           9.636 |             9.588 |
| 1993-07-15 |           33.385 |              24.3 |           9.639 |             9.605 |
| 1993-08-15 |           33.623 |            24.419 |           9.643 |             9.624 |
| 1993-09-15 |            33.86 |            24.538 |           9.647 |             9.642 |
| 1994-01-01 |           34.678 |            24.955 |           9.661 |             9.707 |
| 1994-05-15 |           35.784 |            26.078 |           9.856 |            10.267 |
| 1994-06-15 |           36.038 |             26.34 |           9.968 |            11.449 |
| 1994-07-15 |           36.283 |            39.357 |           8.947 |             10.78 |
| 1994-08-15 |           36.536 |            33.582 |           8.618 |            10.203 |
| 1994-09-15 |           36.788 |            18.082 |           8.701 |             10.05 |
| 1995-01-01 |            31.93 |            22.587 |           8.613 |             9.518 |
| 1995-04-15 |           29.458 |            23.334 |           8.727 |             9.368 |
| 1995-05-15 |           28.752 |            23.551 |            8.76 |             9.325 |
| 1995-06-15 |           28.025 |            23.776 |           8.794 |              9.28 |
| 1995-07-15 |           27.324 |            23.995 |           8.827 |             9.236 |
| 1995-08-15 |           26.604 |            24.221 |           8.861 |             9.192 |
| 1995-09-15 |           25.887 |            24.449 |           8.895 |             9.147 |
| 1995-10-15 |           25.195 |            24.669 |           8.928 |             9.103 |
| 1996-01-01 |           23.412 |            25.247 |           9.013 |              8.99 |
| 1996-04-15 |           23.457 |            25.518 |           8.695 |             9.245 |
| 1996-05-15 |           23.468 |            25.596 |           8.605 |             9.318 |
| 1996-06-15 |            23.48 |            25.676 |           8.511 |             9.393 |
| 1996-07-15 |           23.492 |            25.754 |           8.421 |             9.466 |
| 1996-08-15 |           23.503 |            25.835 |           8.328 |             9.542 |
| 1996-09-15 |           23.514 |            25.915 |           8.234 |             9.617 |
| 1996-10-15 |           23.524 |            25.994 |           8.144 |              9.69 |
| 1997-01-01 |            23.55 |            26.197 |           7.911 |             9.879 |
| 1997-03-15 |           23.368 |            26.415 |           8.274 |             9.816 |
| 1997-04-15 |            23.29 |            26.508 |           8.428 |             9.789 |
| 1997-05-15 |           23.216 |            26.598 |           8.576 |             9.763 |
| 1997-06-15 |           23.139 |            26.692 |            8.73 |             9.736 |
| 1997-07-15 |           23.064 |            26.782 |           8.879 |              9.71 |
| 1997-09-15 |           22.911 |            26.969 |           9.186 |             9.656 |
| 1997-10-15 |           22.837 |             27.06 |           9.334 |              9.63 |
| 1998-01-01 |           22.644 |            27.296 |            9.72 |             9.562 |
| 1998-03-15 |           22.563 |            29.562 |          10.098 |             8.666 |
| 1998-04-15 |           23.626 |            30.525 |          10.259 |             8.285 |
| 1998-05-15 |            24.55 |            29.504 |          10.213 |              8.25 |
| 1998-06-15 |           22.763 |            31.583 |          10.285 |             10.34 |
| 1998-07-15 |           24.151 |            33.193 |          10.122 |            10.612 |
| 1998-08-15 |           23.506 |            33.513 |           10.13 |            10.732 |
| 1998-09-15 |           22.976 |            33.524 |          10.158 |             8.763 |
| 1998-10-15 |           22.926 |            33.144 |          10.164 |             8.956 |
| 1999-01-01 |           23.403 |            32.155 |          10.178 |             9.455 |
| 1999-07-15 |           24.433 |            33.564 |           9.654 |             9.959 |
| 1999-08-15 |           24.596 |            33.789 |          10.036 |             9.321 |
| 1999-09-15 |           24.608 |            34.013 |          10.385 |             8.739 |
| 1999-10-15 |            24.62 |            32.002 |          10.076 |             8.827 |
| 1999-11-15 |            24.36 |            32.778 |          10.112 |             8.918 |
| 1999-12-15 |           24.107 |            33.529 |          10.146 |             9.006 |
| 2000-01-01 |           23.964 |            33.955 |          10.166 |             9.056 |
| 2000-02-15 |           23.432 |            33.437 |          10.218 |             9.374 |
| 2000-03-15 |            23.09 |            33.103 |          10.267 |             9.579 |
| 2000-04-15 |           24.352 |            34.927 |          10.074 |             9.798 |
| 2000-05-15 |           22.791 |             35.01 |          10.398 |             10.01 |
| 2000-06-15 |            23.54 |            36.159 |          10.596 |            10.229 |
| 2000-07-15 |           25.136 |            37.883 |           9.722 |             9.348 |
| 2000-08-15 |           23.521 |             38.09 |           9.825 |             9.806 |
| 2000-09-03 |           23.195 |            37.126 |           9.676 |             9.864 |
| 2000-09-15 |           24.139 |            37.373 |           9.674 |             9.588 |
| 2000-10-15 |           24.019 |            36.951 |           9.785 |             9.691 |
| 2000-11-15 |           23.894 |            36.877 |           9.899 |             9.797 |
| 2001-03-15 |           23.375 |            36.579 |          10.335 |            10.207 |
| 2001-04-15 |           24.182 |            36.501 |          10.215 |            10.313 |
| 2001-05-15 |           22.824 |            35.541 |           9.984 |            10.416 |
| 2001-06-15 |           23.795 |            38.117 |          10.447 |            10.522 |
| 2001-07-15 |           25.161 |             39.53 |           9.761 |            10.937 |
| 2001-08-15 |           24.515 |            37.622 |           9.885 |            11.365 |
| 2001-09-15 |            23.87 |            38.509 |           9.692 |            11.793 |
| 2001-10-15 |           23.247 |            36.693 |           9.504 |            12.208 |
| 2001-11-15 |           23.726 |            36.526 |           9.601 |            12.636 |
| 2002-01-15 |           24.674 |            36.179 |           9.792 |            13.478 |
| 2002-02-15 |            25.17 |            35.969 |           9.894 |            13.905 |
| 2002-03-15 |           25.619 |             35.78 |           9.985 |             14.29 |
| 2002-04-15 |           26.115 |             37.08 |          10.628 |            14.716 |
| 2002-05-15 |           27.018 |            39.578 |           9.831 |            15.128 |
| 2002-06-15 |           28.052 |            41.587 |          10.597 |            15.554 |
| 2002-07-15 |           28.092 |            40.968 |           9.491 |            15.182 |
| 2002-08-15 |           29.296 |            38.147 |           9.189 |            14.796 |
| 2002-09-15 |           29.343 |            38.905 |           9.436 |            14.411 |
| 2002-10-15 |           29.388 |            39.078 |           9.675 |            14.038 |
| 2003-02-15 |           29.582 |            39.778 |           10.66 |             12.51 |
| 2003-03-15 |            29.63 |            39.934 |          10.887 |            12.162 |
| 2003-04-15 |           29.682 |              41.6 |          10.214 |            11.777 |
| 2003-05-15 |           27.952 |            41.656 |            10.4 |            11.404 |
| 2003-06-15 |           28.791 |            41.557 |          10.238 |            11.019 |
| 2003-07-15 |           30.381 |            41.461 |           10.23 |            10.647 |
| 2003-08-15 |           31.334 |            41.363 |          10.221 |            10.707 |
| 2003-09-15 |           31.022 |            41.264 |          10.213 |            10.767 |
| 2003-10-15 |           30.793 |             41.48 |          10.204 |            10.825 |
| 2004-03-15 |           29.573 |            42.553 |          10.158 |            11.117 |
| 2004-04-15 |           29.313 |             39.84 |          10.412 |            11.176 |
| 2004-05-15 |           29.939 |            41.766 |          10.097 |            11.233 |
| 2004-06-15 |           31.464 |            43.713 |           8.431 |            11.292 |
| 2004-07-15 |           31.438 |            44.314 |           8.134 |            10.728 |
| 2004-08-15 |           32.559 |            43.114 |           8.817 |             10.87 |
| 2004-09-15 |           34.389 |            44.079 |           8.683 |            11.012 |
| 2004-10-15 |           34.316 |            43.795 |           8.888 |            11.149 |
| 2005-03-15 |           34.027 |            42.385 |           9.921 |            11.837 |
| 2005-04-15 |           33.985 |              42.1 |          10.133 |            11.978 |
| 2005-05-15 |           34.638 |            41.769 |           9.453 |            12.115 |
| 2005-06-15 |           34.632 |            43.434 |           9.936 |            12.256 |
| 2005-07-15 |           34.646 |            46.099 |           8.839 |            12.301 |
| 2005-08-15 |           34.435 |            44.827 |           8.416 |            11.952 |
| 2005-09-15 |           33.919 |            44.522 |           8.466 |            11.603 |
| 2005-10-15 |           33.136 |             43.95 |           8.591 |            11.265 |
| 2005-12-13 |           31.596 |            42.829 |           8.836 |            10.601 |
| 2006-03-15 |           30.298 |             41.79 |           9.245 |            11.258 |
| 2006-04-15 |           30.365 |            43.058 |           9.512 |             11.48 |
| 2006-05-15 |            28.34 |            42.275 |            9.47 |            11.694 |
| 2006-06-15 |           29.018 |            45.818 |           8.841 |            11.915 |
| 2006-07-15 |           28.674 |            47.844 |           9.772 |             12.22 |
| 2006-08-15 |           28.172 |             48.97 |           9.198 |            12.237 |
| 2006-09-15 |           27.277 |            47.657 |           8.681 |            11.959 |
| 2006-10-15 |           26.954 |            46.389 |           8.944 |            11.689 |
| 2006-11-15 |           26.621 |            45.083 |           9.216 |            11.411 |
| 2006-12-18 |           26.266 |            43.696 |           9.505 |            11.115 |
| 2007-03-15 |           29.272 |             42.25 |           9.851 |            11.417 |
| 2007-04-15 |            28.58 |            40.683 |           9.741 |            11.751 |
| 2007-05-15 |           27.911 |            43.251 |           9.602 |            12.074 |
| 2007-06-15 |           27.219 |            46.196 |           9.124 |            12.408 |
| 2007-07-15 |           28.921 |            48.475 |           9.156 |            11.922 |
| 2007-08-15 |           31.488 |            47.127 |            8.71 |             9.977 |
| 2007-09-07 |           30.782 |            43.571 |           9.428 |            11.481 |
| 2007-09-15 |           30.537 |            47.742 |           9.037 |            11.522 |
| 2007-10-15 |           30.719 |            46.894 |           9.108 |            11.675 |
| 2008-03-15 |           27.536 |            42.641 |           9.469 |            12.442 |
| 2008-04-15 |           26.888 |            41.782 |           9.543 |            12.596 |
| 2008-05-15 |           27.386 |            40.952 |           9.614 |            12.746 |
| 2008-06-15 |           25.536 |            45.102 |           9.501 |              12.9 |
| 2008-07-15 |           26.297 |             49.73 |           9.633 |            13.049 |
| 2008-08-15 |           25.535 |            50.726 |           9.556 |            12.959 |
| 2008-10-15 |           26.741 |             48.07 |           9.652 |            12.782 |
| 2008-11-15 |           27.354 |            46.723 |           9.701 |            12.691 |
| 2009-01-15 |            28.56 |            44.075 |           9.796 |            12.514 |
| 2009-02-15 |           29.173 |             42.73 |           9.844 |            12.424 |
| 2009-03-15 |           29.726 |            41.516 |           9.887 |            12.343 |
| 2009-04-15 |           30.339 |            41.887 |           9.889 |            12.253 |
| 2009-05-15 |           30.932 |            42.348 |          10.239 |            12.166 |
| 2009-06-15 |           31.544 |            48.452 |          10.164 |            12.076 |
| 2009-07-15 |            29.44 |            52.529 |           9.987 |            12.246 |
| 2009-08-15 |           28.294 |            49.196 |           9.481 |              10.8 |
| 2009-09-02 |           27.851 |             44.54 |           9.687 |            11.805 |
| 2009-09-15 |            28.57 |            49.327 |           9.603 |            11.809 |
| 2009-10-15 |           28.426 |            49.131 |           9.683 |            11.817 |
| 2010-03-15 |             27.7 |            48.138 |          10.085 |            11.859 |
| 2010-04-15 |           27.551 |            47.933 |          10.167 |            11.867 |
| 2010-05-15 |           26.947 |            47.773 |          10.303 |            11.875 |
| 2010-06-15 |           28.873 |            51.744 |           9.442 |            11.884 |
| 2010-07-15 |           26.971 |            49.336 |           8.512 |            11.814 |
| 2010-08-15 |           30.346 |            45.628 |           9.059 |            11.927 |
| 2010-09-15 |           29.939 |            44.022 |           9.034 |             12.04 |
| 2010-10-15 |           29.735 |            43.316 |           9.124 |            12.149 |
| 2011-03-15 |           28.719 |            39.743 |           9.578 |            12.698 |
| 2011-04-15 |           27.808 |            40.979 |            9.67 |             12.81 |
| 2011-05-15 |           26.926 |            40.535 |           9.581 |            12.919 |
| 2011-06-15 |           26.061 |             43.01 |           9.846 |            13.031 |
| 2011-07-15 |           27.823 |             45.54 |           9.078 |            13.151 |
| 2011-08-15 |           27.527 |            51.052 |           8.084 |            12.475 |
| 2011-09-15 |           26.539 |            52.697 |           8.392 |            12.603 |
| 2011-10-15 |           26.189 |            51.138 |           8.339 |            12.727 |
| 2012-01-15 |           26.316 |            46.391 |           8.176 |            13.105 |
| 2012-03-15 |           26.404 |            43.352 |           8.072 |            13.354 |
| 2012-04-15 |           26.449 |            41.784 |           8.018 |            13.483 |
| 2012-05-15 |           27.128 |            46.475 |           9.014 |            13.607 |
| 2012-06-15 |           27.182 |            55.254 |           9.337 |            13.736 |
| 2012-07-15 |           26.058 |            52.149 |           8.404 |            12.789 |
| 2012-08-15 |             26.9 |             52.95 |           8.042 |             11.81 |
| 2012-09-15 |           26.775 |            53.512 |           8.171 |            12.117 |
| 2012-10-15 |           26.021 |             53.12 |           8.552 |            12.413 |
| 2012-11-10 |           25.367 |             52.78 |           8.882 |             12.67 |
| 2013-02-15 |           26.215 |            50.542 |            9.34 |            12.627 |
| 2013-03-15 |            26.46 |            49.887 |           9.472 |            12.613 |
| 2013-04-15 |           25.824 |            48.245 |           9.581 |            12.598 |
| 2013-05-15 |           25.205 |            46.647 |           8.949 |            13.271 |
| 2013-06-15 |           27.703 |            48.493 |           9.147 |            13.557 |
| 2013-07-15 |           27.529 |            47.691 |            8.57 |            13.434 |
| 2013-08-15 |            28.09 |            51.887 |           9.714 |            12.309 |
| 2013-09-15 |           27.829 |            54.853 |           9.599 |             12.76 |
| 2013-10-15 |           27.642 |            55.475 |           9.154 |            12.897 |
| 2013-11-15 |           27.142 |             53.64 |           9.341 |            13.038 |
| 2013-12-15 |           26.657 |            51.869 |           9.521 |            13.174 |
| 2014-01-15 |           26.157 |            50.037 |           9.709 |            13.313 |
| 2014-02-15 |           25.657 |            48.203 |           9.896 |            13.451 |
| 2014-03-15 |           26.093 |            47.102 |           9.661 |            13.575 |
| 2014-04-15 |           24.944 |            42.942 |           9.599 |            13.749 |
| 2014-05-15 |           25.038 |            47.852 |            9.46 |            13.615 |
| 2014-06-15 |           25.389 |            53.099 |            9.84 |            13.966 |
| 2014-07-15 |           25.866 |            54.849 |           8.718 |            14.274 |
| 2014-08-15 |           25.662 |            51.982 |           8.496 |            13.863 |
| 2014-09-01 |           26.278 |            46.539 |           9.271 |            14.277 |
| 2014-09-15 |           26.886 |            43.447 |           8.688 |            13.135 |
| 2014-10-15 |           27.501 |            54.155 |            9.16 |             13.36 |
| 2014-11-15 |           27.798 |             52.84 |            9.33 |            13.592 |
| 2014-12-15 |           26.181 |            51.569 |           9.494 |            13.816 |
| 2014-12-16 |           26.127 |            51.526 |           9.499 |            13.824 |
| 2015-01-15 |           25.774 |            49.565 |            9.57 |            14.052 |
| 2015-01-16 |           25.763 |              49.5 |           9.572 |             14.06 |
| 2015-02-14 |           27.427 |            47.607 |           9.605 |            14.238 |
| 2015-02-15 |           27.707 |             45.88 |            9.36 |            14.234 |
| 2015-03-15 |           27.725 |            44.831 |           9.449 |            14.128 |
| 2015-03-16 |           27.757 |            46.098 |           9.659 |            14.051 |
| 2015-05-15 |            29.71 |            42.896 |           9.423 |            14.587 |
| 2015-05-16 |           29.647 |            42.102 |           9.595 |            14.733 |
| 2015-07-15 |           31.196 |            51.725 |           9.803 |            15.038 |
| 2015-07-16 |           30.584 |            51.924 |           9.679 |            15.091 |
| 2015-08-15 |           31.456 |            48.614 |           9.363 |             14.63 |
| 2015-08-16 |           31.076 |            48.878 |           9.466 |            14.614 |
| 2015-09-01 |           28.371 |            50.696 |            9.49 |            14.381 |
| 2015-10-15 |           31.154 |            49.216 |           9.459 |            14.041 |
| 2015-10-16 |           30.569 |            51.522 |           9.534 |            14.033 |
| 2015-12-15 |           29.153 |            50.907 |           9.575 |            14.347 |
| 2015-12-16 |           29.129 |            50.897 |           9.576 |            14.352 |
| 2016-01-15 |           28.448 |            47.142 |           9.581 |            14.454 |
| 2016-01-16 |           28.425 |            47.017 |           9.581 |            14.458 |
| 2016-03-15 |            26.88 |            43.802 |           9.489 |             14.51 |
| 2016-03-16 |           26.727 |             48.11 |           9.651 |            14.726 |
| 2016-05-15 |            27.13 |            46.586 |           9.987 |            14.935 |
| 2016-05-16 |           27.092 |            51.059 |           9.758 |            14.856 |
| 2016-07-15 |           27.418 |             51.32 |           9.557 |            15.079 |
| 2016-07-16 |           26.708 |            50.637 |           9.172 |            15.056 |
| 2016-08-15 |           27.342 |            51.647 |           9.188 |            14.812 |
| 2016-08-16 |           26.497 |            50.765 |           9.014 |            14.983 |
| 2016-09-01 |           29.454 |             49.61 |             9.0 |            14.591 |
| 2016-09-25 |           28.935 |             52.25 |           9.247 |            14.217 |
| 2016-10-06 |           29.388 |             51.04 |           9.436 |            14.116 |
| 2016-10-15 |           30.128 |            48.222 |            9.54 |            14.273 |
| 2016-10-16 |           28.552 |            48.898 |            9.04 |             14.29 |
| 2016-10-18 |           29.891 |            50.803 |           9.479 |            14.201 |
| 2016-10-25 |           30.773 |             50.23 |           9.571 |            14.273 |
| 2016-10-30 |            31.05 |            49.169 |            9.25 |            14.273 |
| 2016-11-11 |           31.295 |            47.796 |           8.869 |            14.338 |
| 2016-11-16 |           31.413 |            47.607 |           8.973 |             14.34 |
| 2016-11-30 |           30.917 |            45.462 |           8.838 |            14.451 |
| 2016-12-05 |            30.74 |            44.696 |            8.79 |            14.491 |
| 2016-12-12 |           30.493 |            43.623 |           8.722 |            14.547 |
| 2016-12-15 |           30.098 |            42.062 |           8.741 |             14.54 |
| 2016-12-16 |           29.967 |            41.541 |           8.747 |            14.537 |
| 2016-12-17 |           30.465 |            42.343 |           8.777 |            14.554 |
| 2016-12-24 |           30.854 |            42.833 |           8.806 |            14.588 |
| 2016-12-29 |           31.388 |             42.55 |           8.872 |            14.807 |
| 2017-01-04 |           31.826 |            41.905 |           9.114 |            14.826 |
| 2017-01-10 |           31.981 |            41.291 |            9.08 |            14.611 |
| 2017-01-15 |           31.968 |            41.133 |           9.071 |            14.583 |
| 2017-01-22 |            31.95 |            40.913 |           9.059 |            14.545 |
| 2017-01-29 |           31.757 |             40.04 |           9.038 |            14.698 |
| 2017-02-03 |            31.83 |            39.673 |           9.153 |            14.682 |
| 2017-02-09 |           32.083 |            39.351 |           9.252 |            14.678 |
| 2017-02-14 |           31.102 |            38.513 |            9.42 |             14.68 |
| 2017-02-22 |           31.273 |            39.928 |           9.123 |            14.605 |
| 2017-02-27 |           31.049 |            39.312 |           9.154 |            14.577 |
| 2017-03-06 |           29.534 |            38.949 |           9.154 |             14.74 |
| 2017-03-11 |           29.681 |            38.505 |           9.296 |            14.747 |
| 2017-03-15 |           29.909 |            37.745 |           9.408 |            14.704 |
| 2017-03-16 |           29.433 |            37.588 |           9.169 |            14.836 |
| 2017-03-18 |           29.436 |            38.478 |           9.136 |            14.815 |
| 2017-03-23 |           29.331 |            38.121 |           9.469 |            14.779 |
| 2017-03-30 |           29.296 |            38.426 |           9.567 |            14.865 |
| 2017-04-04 |           29.594 |             38.36 |           9.464 |            14.859 |
| 2017-04-11 |           29.488 |            37.568 |           9.349 |            14.882 |
| 2017-04-16 |           30.552 |            37.255 |           9.791 |            14.867 |
| 2017-04-23 |             29.9 |            38.095 |           9.929 |             14.96 |
| 2017-04-28 |           29.826 |             38.68 |           9.982 |            15.054 |
| 2017-05-05 |           31.552 |            37.622 |           9.757 |            15.089 |
| 2017-05-10 |           31.693 |             36.85 |           9.414 |            15.086 |
| 2017-05-15 |           30.819 |            36.942 |           9.393 |            14.793 |
| 2017-05-16 |           32.558 |            36.581 |           9.235 |             15.19 |
| 2017-05-17 |           32.904 |            36.873 |           9.226 |            15.135 |
| 2017-05-22 |           33.046 |            36.652 |           9.174 |            15.136 |
| 2017-05-28 |           32.549 |            35.824 |           9.169 |            15.297 |
| 2017-06-03 |           32.471 |            35.738 |           9.401 |             15.46 |
| 2017-06-09 |           32.712 |            36.612 |            9.33 |            15.482 |
| 2017-06-16 |           33.518 |            37.301 |           9.331 |            15.557 |
| 2017-06-21 |           33.942 |            37.857 |           9.096 |            15.946 |
| 2017-06-28 |           34.038 |            37.829 |           9.081 |            16.256 |
| 2017-07-03 |           33.946 |            38.657 |           9.098 |            16.433 |
| 2017-07-09 |             33.5 |            40.553 |           9.254 |            16.383 |
| 2017-07-16 |           33.331 |            41.116 |           9.356 |             16.32 |
| 2017-07-21 |           33.088 |            41.769 |           9.175 |            16.365 |
| 2017-07-27 |           33.349 |            41.741 |           8.864 |            16.411 |
| 2017-08-02 |           33.605 |            41.879 |           8.897 |             16.45 |
| 2017-08-08 |           34.128 |            42.106 |           8.928 |            16.318 |
| 2017-08-12 |            34.11 |            42.382 |           8.996 |            15.908 |
| 2017-08-15 |            34.69 |            43.421 |           9.106 |            15.546 |
| 2017-08-16 |           34.695 |            44.381 |           9.128 |            15.919 |
| 2017-08-20 |           34.621 |            42.984 |           8.908 |            15.523 |
| 2017-08-26 |           34.633 |            43.948 |           9.028 |             15.42 |
| 2017-09-13 |            34.68 |            42.221 |           9.437 |            15.344 |
| 2017-09-19 |           34.626 |            41.932 |           9.499 |            15.311 |
| 2017-09-24 |           34.578 |            43.323 |           9.401 |            15.381 |
| 2017-10-01 |            33.63 |            43.238 |           9.233 |            15.324 |
| 2017-10-07 |           33.634 |             42.67 |           9.198 |            15.377 |
| 2017-10-13 |           34.389 |            41.852 |            9.24 |            15.484 |
| 2017-10-15 |           34.226 |            41.393 |           9.314 |            15.423 |
| 2017-10-16 |           33.915 |            41.575 |           9.167 |            15.392 |
| 2017-10-19 |           34.142 |            41.651 |           9.295 |            15.488 |
| 2017-10-25 |           34.526 |            41.515 |           9.389 |            15.533 |
| 2017-10-31 |           34.517 |            41.135 |           9.428 |            15.568 |
| 2017-11-06 |           34.164 |            40.088 |           9.487 |            15.539 |
| 2017-11-12 |           34.278 |            38.738 |           9.375 |            15.614 |
| 2017-11-18 |           33.827 |             37.17 |           9.351 |            15.621 |
| 2017-11-30 |           33.086 |            37.774 |           9.545 |            15.491 |
| 2017-12-12 |           32.503 |            37.046 |           9.414 |            15.443 |
| 2017-12-15 |           32.408 |            37.449 |           9.463 |            15.501 |
| 2017-12-16 |           32.377 |            37.583 |            9.48 |            15.521 |
| 2017-12-24 |           32.301 |            34.389 |           9.458 |            15.425 |
| 2018-01-05 |           32.146 |            35.718 |           9.303 |            15.455 |
| 2018-01-15 |           31.197 |            35.906 |           9.314 |            15.461 |
| 2018-01-16 |           31.102 |            35.925 |           9.315 |            15.461 |
| 2018-01-17 |           32.038 |            35.429 |           9.244 |            15.445 |
| 2018-01-29 |           31.689 |             33.92 |           9.286 |            15.415 |
| 2018-02-10 |           31.495 |            33.968 |            9.34 |            15.505 |
| 2018-02-14 |           30.599 |            34.314 |           9.234 |            15.485 |
| 2018-02-15 |           30.703 |            33.613 |           9.378 |              15.5 |
| 2018-02-22 |           31.431 |            31.695 |           9.131 |            15.604 |
| 2018-03-06 |           30.961 |            32.633 |           8.817 |             15.52 |
| 2018-03-15 |            30.54 |            33.527 |           9.502 |            15.585 |
| 2018-03-16 |           30.459 |            33.454 |            9.23 |            15.557 |
| 2018-03-18 |           31.086 |            31.421 |           9.346 |            15.431 |
| 2018-03-30 |           30.713 |            32.284 |           9.119 |            15.412 |
| 2018-04-11 |           30.461 |            31.797 |           9.209 |            15.583 |
| 2018-04-23 |           30.295 |            32.531 |           9.687 |            15.405 |
| 2018-05-05 |           30.128 |            31.782 |           9.359 |             15.46 |
| 2018-05-15 |           29.793 |            32.188 |           9.507 |            15.527 |
| 2018-05-16 |           29.511 |             32.59 |           9.408 |            15.578 |
| 2018-05-17 |           30.533 |            31.975 |           9.386 |            15.498 |
| 2018-05-29 |           30.185 |            31.712 |           9.257 |            15.669 |
| 2018-06-10 |           30.165 |            31.611 |           9.384 |            15.781 |
| 2018-06-22 |           28.972 |            32.902 |             9.5 |            15.679 |
| 2018-07-04 |           28.581 |            31.779 |           9.445 |            15.804 |
| 2018-07-15 |           28.363 |            32.938 |           9.299 |            15.615 |
| 2018-07-28 |           28.403 |            33.148 |           8.464 |            15.775 |
| 2018-08-09 |           28.823 |            34.417 |           8.261 |            15.597 |
| 2018-08-15 |            29.33 |            37.661 |            8.45 |            15.648 |
| 2018-08-16 |           29.669 |            36.118 |           8.429 |            15.591 |
| 2018-08-21 |           29.336 |            36.021 |           8.224 |            15.554 |
| 2018-09-02 |           29.889 |            37.011 |           8.308 |            15.574 |
| 2018-09-14 |           30.524 |            37.378 |           8.721 |            15.647 |
| 2018-09-26 |           31.056 |            38.075 |            8.97 |            15.715 |
| 2018-10-08 |           31.465 |            35.739 |           9.148 |            15.615 |
| 2018-10-15 |           30.475 |            37.806 |           9.146 |            15.641 |
| 2018-10-16 |           31.143 |            37.315 |           9.154 |            15.645 |
| 2018-10-20 |           32.406 |            36.293 |           9.074 |            15.528 |
| 2018-11-01 |           32.609 |            36.652 |            9.16 |            15.852 |
| 2018-11-13 |           32.435 |            34.115 |           9.162 |            15.808 |
| 2018-11-25 |           32.249 |            32.817 |           9.165 |             15.72 |
| 2018-12-07 |           31.458 |            32.148 |           9.092 |            15.829 |
| 2018-12-15 |           31.619 |            32.768 |           9.169 |            15.872 |
| 2018-12-19 |             31.7 |            33.078 |           9.207 |            15.894 |
| 2018-12-31 |            31.11 |            32.308 |           9.423 |            15.957 |
| 2019-01-12 |           31.962 |            31.621 |           9.377 |            15.876 |
| 2019-01-24 |           32.483 |            30.947 |           9.653 |            15.859 |
| 2019-02-05 |           32.551 |            30.479 |           9.515 |            15.901 |
| 2019-02-17 |           32.644 |            31.381 |           9.596 |            15.755 |
| 2019-03-01 |           32.993 |            31.274 |           9.504 |            15.705 |
| 2019-03-13 |           33.511 |            30.661 |           9.539 |            15.683 |
| 2019-03-25 |           33.268 |            31.363 |           9.596 |            15.777 |
| 2019-04-05 |           33.385 |            30.989 |           9.462 |            15.786 |
| 2019-04-18 |           33.633 |            31.266 |           9.604 |            15.725 |
| 2019-04-30 |           33.178 |            31.546 |           9.505 |            15.629 |
| 2019-05-12 |           33.386 |            32.769 |           9.551 |            15.713 |
| 2019-05-24 |           33.413 |            34.474 |           9.727 |            15.803 |
| 2019-06-05 |           33.325 |             36.88 |           9.818 |            15.954 |
| 2019-06-17 |            33.88 |            38.627 |           9.652 |            16.085 |
| 2019-06-29 |            34.46 |            39.757 |           9.432 |             16.16 |
| 2019-07-11 |           34.924 |            42.536 |            9.51 |            16.198 |
| 2019-07-23 |           35.926 |            41.744 |           9.278 |            16.155 |
| 2019-08-04 |           35.432 |            39.926 |           9.061 |            16.114 |
| 2019-08-16 |           35.419 |            40.221 |           8.939 |            15.885 |
| 2019-08-28 |           36.535 |            41.676 |           8.755 |            15.395 |
| 2019-09-09 |           36.377 |             41.32 |           8.644 |            15.235 |
| 2019-09-21 |           36.643 |            41.081 |           8.543 |            15.352 |
| 2019-10-03 |           36.852 |            39.643 |           8.524 |            15.335 |
| 2019-10-15 |           37.179 |            39.512 |           8.662 |            15.502 |
| 2019-10-27 |           36.338 |            38.828 |           8.688 |            15.608 |
| 2019-11-08 |           35.777 |            37.482 |           8.768 |            15.626 |
| 2019-11-20 |            35.57 |             36.74 |            8.76 |            15.674 |
| 2019-12-02 |           34.598 |            36.029 |           8.954 |            15.769 |
| 2019-12-14 |           33.921 |            34.847 |            9.09 |            15.762 |
| 2019-12-26 |           31.477 |            34.441 |           9.191 |            15.785 |
| 2020-01-07 |           34.539 |            33.628 |           9.139 |            15.802 |
| 2020-01-19 |           35.381 |            31.985 |           9.398 |            15.853 |
| 2020-01-31 |            35.75 |            32.437 |           9.396 |            15.897 |
| 2020-02-12 |           35.607 |             31.59 |           9.677 |            15.896 |
| 2020-02-24 |           34.838 |             31.34 |           9.658 |            15.814 |
| 2020-03-07 |           34.079 |            30.864 |           9.557 |             15.97 |
| 2020-03-19 |           34.933 |            31.267 |           9.654 |            15.914 |
| 2020-03-31 |           34.075 |            30.906 |           9.532 |            16.054 |
| 2020-04-12 |           34.241 |            31.651 |           9.539 |            16.089 |
| 2020-04-24 |           34.527 |            32.018 |           9.574 |             16.07 |
| 2020-05-06 |            33.57 |            33.157 |           9.423 |            16.065 |
| 2020-05-18 |           30.956 |            33.962 |           9.478 |            16.221 |
| 2020-05-30 |           30.749 |            36.943 |           9.585 |            16.401 |
| 2020-06-11 |           28.866 |            39.423 |           9.531 |            16.582 |
| 2020-06-23 |           28.059 |            41.897 |           9.603 |            16.737 |
| 2020-07-05 |           29.606 |            45.513 |            9.48 |            16.788 |
| 2020-07-17 |           28.464 |            45.889 |           9.453 |            16.767 |
| 2020-07-29 |           30.694 |            45.279 |           9.447 |            16.753 |
| 2020-08-10 |           28.547 |            48.174 |           9.456 |            16.551 |
| 2020-08-22 |           28.147 |            47.279 |           9.538 |            16.245 |
| 2020-09-03 |           27.991 |            45.768 |           9.491 |            15.732 |
| 2020-09-15 |           30.287 |            45.364 |           9.519 |            15.743 |


* Meta                                                  :noexport:

This document probably uses code - python, octave, and/or R. Below I provide the version of the software(s) used to create this document in order to support the goal of reproducibility. 

*** Os installed
#+BEGIN_SRC bash :results table :eval no-export :exports results
for tool in gdal-bin parallel sed netcdf-bin proj-bin nco bash grass; do dpkg -l | grep "ii  ${tool} " | sed 's/\ \ */\ /g' | cut -d" " -f2,3; done| sort
#+END_SRC

#+RESULTS:
| bash       | 5.0-6ubuntu1.1      |
| gdal-bin   | 3.1.3+dfsg-1~focal0 |
| grass      | 7.8.4-1~focal1      |
| nco        | 4.9.1-1build2       |
| netcdf-bin | 1:4.7.3-1           |
| parallel   | 20161222-1.1        |
| proj-bin   | 7.1.1-1~focal0      |
| sed        | 4.7-1               |

*** Org Mode
#+BEGIN_SRC elisp :exports both :eval no-export
(org-version nil t)
#+END_SRC

#+RESULTS:
: Org mode version 9.4 (9.4-9-gab0052-elpaplus @ /home/kdm/.emacs.d/elpa/org-plus-contrib-20200928/)

*** Python
#+BEGIN_SRC bash :cmdline -i :results verbatim :exports both :eval no-export
. /home/kdm/local/miniconda3/etc/profile.d/conda.sh
conda env export --name ice_discharge | tee environment.yml
#+END_SRC

#+RESULTS:
#+begin_example
name: ice_discharge
channels:
  - conda-forge
  - defaults
dependencies:
  - _libgcc_mutex=0.1=conda_forge
  - _openmp_mutex=4.5=1_llvm
  - attrs=19.3.0=py_0
  - backcall=0.1.0=py_0
  - bleach=3.1.4=pyh9f0ad1d_0
  - bzip2=1.0.8=h516909a_2
  - ca-certificates=2020.4.5.2=hecda079_0
  - certifi=2020.4.5.2=py38h32f6830_0
  - cfchecker=4.0.0=py_0
  - cftime=1.1.3=py38h8790de6_0
  - cfunits=3.2.7=pyh9f0ad1d_0
  - curl=7.69.1=h33f0ec9_0
  - cycler=0.10.0=py_2
  - dbus=1.13.6=he372182_0
  - decorator=4.4.2=py_0
  - defusedxml=0.6.0=py_0
  - entrypoints=0.3=py38h32f6830_1001
  - expat=2.2.9=he1b5a44_2
  - fontconfig=2.13.1=h86ecdb6_1001
  - freetype=2.10.1=he06d7ca_0
  - future=0.18.2=py38h32f6830_1
  - gettext=0.19.8.1=hc5be6a0_1002
  - glib=2.64.2=h6f030ca_0
  - gst-plugins-base=1.14.5=h0935bb2_2
  - gstreamer=1.14.5=h36ae1b5_2
  - hdf4=4.2.13=hf30be14_1003
  - hdf5=1.10.6=nompi_h3c11f04_100
  - icu=64.2=he1b5a44_1
  - importlib-metadata=1.6.0=py38h32f6830_0
  - importlib_metadata=1.6.0=0
  - ipykernel=5.2.1=py38h23f93f0_0
  - ipython=7.13.0=py38h32f6830_2
  - ipython_genutils=0.2.0=py_1
  - ipywidgets=7.5.1=py_0
  - jedi=0.17.0=py38h32f6830_0
  - jinja2=2.11.2=pyh9f0ad1d_0
  - jpeg=9c=h14c3975_1001
  - jsonschema=3.2.0=py38h32f6830_1
  - jupyter=1.0.0=py_2
  - jupyter_client=6.1.3=py_0
  - jupyter_console=6.1.0=py_1
  - jupyter_core=4.6.3=py38h32f6830_1
  - kiwisolver=1.2.0=py38hbf85e49_0
  - krb5=1.17.1=h2fd8d38_0
  - ld_impl_linux-64=2.34=h53a641e_0
  - libblas=3.8.0=16_openblas
  - libcblas=3.8.0=16_openblas
  - libclang=9.0.1=default_hde54327_0
  - libcurl=7.69.1=hf7181ac_0
  - libedit=3.1.20191231=h46ee950_0
  - libffi=3.2.1=he1b5a44_1007
  - libgcc-ng=9.2.0=h24d8f2e_2
  - libgfortran-ng=7.3.0=hdf63c60_5
  - libiconv=1.15=h516909a_1006
  - liblapack=3.8.0=16_openblas
  - libllvm9=9.0.1=he513fc3_1
  - libnetcdf=4.7.4=nompi_h84807e1_104
  - libopenblas=0.3.9=h5ec1e0e_0
  - libpng=1.6.37=hed695b0_1
  - libsodium=1.0.17=h516909a_0
  - libssh2=1.9.0=hab1572f_2
  - libstdcxx-ng=9.2.0=hdf63c60_2
  - libuuid=2.32.1=h14c3975_1000
  - libxcb=1.13=h14c3975_1002
  - libxkbcommon=0.10.0=he1b5a44_0
  - libxml2=2.9.10=hee79883_0
  - llvm-openmp=10.0.0=hc9558a2_0
  - markupsafe=1.1.1=py38h1e0a361_1
  - matplotlib=3.2.1=0
  - matplotlib-base=3.2.1=py38h2af1d28_0
  - mistune=0.8.4=py38h1e0a361_1001
  - nbconvert=5.6.1=py38h32f6830_1
  - nbformat=5.0.6=py_0
  - ncurses=6.1=hf484d3e_1002
  - netcdf4=1.5.3=nompi_py38hfd55d45_105
  - notebook=6.0.3=py38_0
  - nspr=4.25=he1b5a44_0
  - nss=3.47=he751ad9_0
  - numpy=1.18.1=py38h8854b6b_1
  - openssl=1.1.1g=h516909a_0
  - pandas=1.0.3=py38hcb8c335_1
  - pandoc=2.9.2.1=0
  - pandocfilters=1.4.2=py_1
  - parso=0.7.0=pyh9f0ad1d_0
  - patsy=0.5.1=py_0
  - pcre=8.44=he1b5a44_0
  - pexpect=4.8.0=py38h32f6830_1
  - pickleshare=0.7.5=py38h32f6830_1001
  - pip=20.1=pyh9f0ad1d_0
  - prometheus_client=0.7.1=py_0
  - prompt-toolkit=3.0.5=py_0
  - prompt_toolkit=3.0.5=0
  - pthread-stubs=0.4=h14c3975_1001
  - ptyprocess=0.6.0=py_1001
  - pygments=2.6.1=py_0
  - pyparsing=2.4.7=pyh9f0ad1d_0
  - pyqt=5.12.3=py38hcca6a23_1
  - pyrsistent=0.16.0=py38h1e0a361_0
  - python=3.8.2=he5300dc_7_cpython
  - python-dateutil=2.8.1=py_0
  - python_abi=3.8=1_cp38
  - pytz=2020.1=pyh9f0ad1d_0
  - pyzmq=19.0.0=py38ha71036d_1
  - qt=5.12.5=hd8c4c69_1
  - qtconsole=4.7.3=pyh9f0ad1d_0
  - qtpy=1.9.0=py_0
  - readline=8.0=hf8c457e_0
  - scipy=1.4.1=py38h18bccfc_3
  - send2trash=1.5.0=py_0
  - setuptools=46.1.3=py38h32f6830_0
  - six=1.14.0=py_1
  - sqlite=3.30.1=hcee41ef_0
  - statsmodels=0.11.1=py38h1e0a361_1
  - tabulate=0.8.7=pyh9f0ad1d_0
  - terminado=0.8.3=py38h32f6830_1
  - testpath=0.4.4=py_0
  - tk=8.6.10=hed695b0_0
  - tornado=6.0.4=py38h1e0a361_1
  - traitlets=4.3.3=py38h32f6830_1
  - udunits2=2.2.27.6=h4e0c4b3_1001
  - uncertainties=3.1.2=py38_0
  - wcwidth=0.1.9=pyh9f0ad1d_0
  - webencodings=0.5.1=py_1
  - wheel=0.34.2=py_1
  - widgetsnbextension=3.5.1=py38_0
  - xarray=0.15.1=py_0
  - xorg-libxau=1.0.9=h14c3975_0
  - xorg-libxdmcp=1.1.3=h516909a_0
  - xz=5.2.5=h516909a_0
  - zeromq=4.3.2=he1b5a44_2
  - zipp=3.1.0=py_0
  - zlib=1.2.11=h516909a_1006
  - pip:
    - chardet==3.0.4
    - idna==2.10
    - pydataverse==0.2.1
    - pyqt5-sip==4.19.18
    - pyqtwebengine==5.12.1
    - requests==2.24.0
    - urllib3==1.25.10
prefix: /home/kdm/local/miniconda3/envs/ice_discharge

#+end_example

* LaTeX Setup                                           :noexport:
#+NAME: copernicus-latex-setup
#+BEGIN_SRC elisp :results none :eval no-export
(add-to-list 'org-latex-classes
               `("copernicus"
                 "\\documentclass{copernicus}
               [NO-DEFAULT-PACKAGES]
               [NO-PACKAGES]
               [NO-EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
               )

;; (org-add-link-type
;;  "citet"  (lambda (key) (org-open-file cby-references-file t nil key))
;;  (lambda (path desc format)
;;    (cond
;;     ((eq format 'latex) (format "\\citet{%s}" path))
;;     ((eq format 'ascii) (format "%s" desc))
;;     )))
;; (org-add-link-type
;;  "citep"  (lambda (key) (org-open-file cby-references-file t nil key))
;;  (lambda (path desc format)
;;    (cond
;;     ((eq format 'latex) (format "\\citep{%s}" path))
;;     ((eq format 'ascii) (format "%s" desc))
;;     )))

(setq-local org-latex-title-command "")
#+END_SRC

